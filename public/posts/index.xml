<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>Posts on networked subject</title>
		<link>https://subject.network/posts/</link>
		<description>Recent content in Posts on networked subject</description>
		<generator>Hugo -- gohugo.io</generator>
		<language>en-us</language>
		<copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
		<lastBuildDate>Sat, 19 Jun 2021 20:58:40 -0500</lastBuildDate>
		<atom:link href="https://subject.network/posts/index.xml" rel="self" type="application/rss+xml" />
		
		<item>
			<title>Essay: A Topiary</title>
			<link>https://subject.network/posts/topiary/</link>
			<pubDate>Sat, 19 Jun 2021 20:58:40 -0500</pubDate>
			
			<guid>https://subject.network/posts/topiary/</guid>
			<description>This isn&amp;rsquo;t a proper post, but rather a small announcement. I recently wrote an essay that was published on the urbit.org blog, which I will link here rather than repost. It is a modest attempt at contextualizing Urbit within the history of hypertext and hypermedia, and in particular their relation to %graph-store.
A big thank you to all those who provided feedback and edited it &amp;ndash; particularly Matt, L, James and Hadden.</description>
			<content type="html"><![CDATA[<p><img src="/img/topiary.gif" alt=""></p>
<p>This isn&rsquo;t a proper post, but rather a small announcement. I recently wrote <a href="https://urbit.org/blog/a-topiary/">an essay</a> that was published on the urbit.org blog, which I will link here rather than repost. It is a modest attempt at contextualizing Urbit within the history of hypertext and hypermedia, and in particular their relation to <a href="/posts/graph-store/">%graph-store</a>.</p>
<p>A big thank you to all those who provided feedback and edited it &ndash; particularly Matt, L, James and Hadden.</p>
<hr>
<p><em>This post is also available on Urbit, where you can post comments. Join <a href="web+urbitgraph://group/~matwet/networked-subject/">~matwet/networked-subject</a> and open the Networked Subject notebook.</em></p>
]]></content>
		</item>
		
		<item>
			<title>Configuring your Urbit Bitcoin wallet</title>
			<link>https://subject.network/posts/btc-wallet-config/</link>
			<pubDate>Fri, 28 May 2021 21:15:07 -0500</pubDate>
			
			<guid>https://subject.network/posts/btc-wallet-config/</guid>
			<description>The day has finally arrived: May 27 saw a major update to Urbit, and the public release of a bitcoin wallet and the ability to send and receive payments. Your ship provides an identity layer on top of bitcoin &amp;ndash; you can tell your planet to send money to ~sampel-palnet, and Urbit takes care of the rest. Think CashApp &amp;ndash; enter a handle, send money &amp;ndash; but you own the whole stack.</description>
			<content type="html"><![CDATA[<p><img src="/img/btc-prov.jpg" alt=""></p>
<p>The day has finally arrived: May 27 saw a major update to Urbit, and the public release of a bitcoin wallet and the ability to send and receive payments. Your ship provides an identity layer on top of bitcoin &ndash; you can tell your planet to send money to <code>~sampel-palnet</code>, and Urbit takes care of the rest. Think CashApp &ndash; enter a handle, send money &ndash; but you own the whole stack.</p>
<p>Urbit&rsquo;s implementation derives an xPub address from your ship&rsquo;s master ticket. An xPub (extended public key) is like a seed to generate new addresses for every transaction &ndash; what is called a hierarchical deterministic wallet (HD wallet). Your ship&rsquo;s master ticket is cryptographic proof of ownership of your address on the network, and is now the seed for all the bitcoin addresses you will generate in the course of transacting. On top of systemic elegance, this is a great boon to financial privacy &ndash; by creating a different address every time you receive funds, it makes it much more difficult for an observer to tell how much money you have or who is sending it to you. By connecting to a node you trust or run yourself, nobody sees a connection between wallet addresses and IP addresses. Urbit takes care of all of this transparently.</p>
<p>Urbit&rsquo;s bitcoin implementation is pretty straightforward to understand. A provider runs a full node with a specific stack of bitcoin software. The provider then configures <code>%btc-provider</code> on a ship to relay information to and from the full node. Normal pilots run <code>%btc-wallet</code> on their ships, and point the wallet at the provider&rsquo;s ship. Your ship&rsquo;s wallet talks to your provider, and your provider talks to the full node.</p>
<p><img src="/img/btc/prov.jpg" alt=""></p>
<p>This tutorial has two halves &ndash;  connecting a ship to a provider, and connecting your provider to an operational full node. If you do not already have an Electrs full node stack set up, see the <a href="/posts/pi-fullnode-urbit/#bitcoind">previous bitcoin tutorial</a> for instructions. If you are just trying to connect your wallet to an existing provider, you can skip the second section.</p>
<h2 id="connecting-a-ship-to-a-provider">Connecting a ship to a provider</h2>
<p>If you just want to connect your ship to somebody&rsquo;s provider, the process is very simple.</p>
<p>Start your wallet:</p>
<div class="window">
    <div class="titlebar">
      <div class="buttons">
        <div class="bclose">
        </div>
        <div class="minimize">
        </div>
        <div class="zoom">
        </div>
      </div>
      urbit - ~/urbit/sampel-palnet
    </div>
    <div class="termdojo">
      <ul>
        
        
        <li></li>
        
        
        <li>~sampel-palnet:dojo>&nbsp;|start&nbsp;%btc-wallet</li>
        
        
        <li>&nbsp;</li>
        
        
        <li></li>
        
        
        <li></li>
          
      </ul>
    </div>
  </div>

<p><img src="/img/btc/icon.png" alt=""></p>
<p>A bright orange bitcoin tile will appear in Landscape next to your clock &ndash; click on it, and enter the <code>@p</code> of your provider.</p>
<p><img src="/img/btc/provnode.png" alt=""></p>
<p>This means it&rsquo;s working 🙂</p>
<p>You will be prompted for your master ticket (you only have to set this up one time). Your master ticket will allow you to derive your xPub key.</p>
<p>If you do not have a master ticket, for instance if your ship is on a hardware wallet, you can bypass this option and provide an xPub from an existing wallet (instructions for <a href="https://wiki.trezor.io/User_manual:Displaying_account_public_key_(XPUB)">Trezor</a>, <a href="https://support.ledger.com/hc/en-us/articles/360011069619-Extended-public-key">Ledger</a> &ndash; note that some people have experienced issues with importing external xPubs).</p>
<p>Paste in your xPub key and proceed. Once you can see your balance, you&rsquo;re good to go! You now have a bitcoin wallet on your ship. You can send money to other ships without knowing anything about their wallet addresses, and you will automatically create a new address for every transaction you receive.</p>
<p>If you need to change your provider from the dojo, you can use this one-liner syntax (thanks <code>~silnem</code>!):</p>
<div class="window">
    <div class="titlebar">
      <div class="buttons">
        <div class="bclose">
        </div>
        <div class="minimize">
        </div>
        <div class="zoom">
        </div>
      </div>
      urbit - ~/urbit/sampel-palnet
    </div>
    <div class="termdojo">
      <ul>
        
        
        <li></li>
        
        
        <li>~sampel-palnet:dojo>&nbsp;:btc-wallet|command&nbsp;[%set-provider&nbsp;[~&nbsp;~sampel]]</li>
        
        
        <li>&nbsp;</li>
        
        
        <li></li>
        
        
        <li></li>
          
      </ul>
    </div>
  </div>

<h2 id="connecting-a-provider-to-a-full-node">Connecting a provider to a full node</h2>
<p>Before you start, make sure TCP port 50002 ingress is allowed for your node &ndash; disable any firewall for that port, and set up port forwarding if your node is on a home network and remote from your provider ship. Once your full node is stood up, synced and connectable, you can connect your provider to it from the dojo. For these commands, replace <code>~sampel</code> with your provider ship&rsquo;s <code>@p</code>.</p>
<div class="window">
    <div class="titlebar">
      <div class="buttons">
        <div class="bclose">
        </div>
        <div class="minimize">
        </div>
        <div class="zoom">
        </div>
      </div>
      urbit - ~/urbit/sampel-palnet
    </div>
    <div class="termdojo">
      <ul>
        
        
        <li></li>
        
        
        <li>~sampel-palnet:dojo>&nbsp;=provider&nbsp;~sampel</li>
        
        
        <li>~sampel-palnet:dojo>&nbsp;=network&nbsp;%main</li>
        
        
        <li>~sampel-palnet:dojo>&nbsp;|start&nbsp;%btc-wallet</li>
        
        
        <li>~sampel-palnet:dojo>&nbsp;|start&nbsp;%btc-provider</li>
        
        
        <li>~sampel-palnet:dojo>&nbsp;:btc-wallet|command&nbsp;[%set-provider&nbsp;provider]</li>
        
        
        <li>~sampel-palnet:dojo>&nbsp;:btc-provider|command&nbsp;[%set-credentials&nbsp;api-url='http://full.node.address.here:50002'&nbsp;network]</li>
        
        
        <li>&nbsp;</li>
        
        
        <li></li>
        
        
        <li></li>
          
      </ul>
    </div>
  </div>

<p><img src="/img/btc/1.png" alt=""></p>
<p>Return to <code>~sampel</code>'s Landscape and note the new bitcoin tile!</p>
<p>Let&rsquo;s test it &ndash; click the tile and enter the provider&rsquo;s <code>@p</code>. Follow the instructions in the previous section to get your xPub address from Bridge or another wallet.</p>
<p>If you want to whitelist your ship&rsquo;s <code>%kids</code> (ie planets your star has spawned or your moons), enter:</p>
<div class="window">
    <div class="titlebar">
      <div class="buttons">
        <div class="bclose">
        </div>
        <div class="minimize">
        </div>
        <div class="zoom">
        </div>
      </div>
      urbit - ~/urbit/sampel-palnet
    </div>
    <div class="termdojo">
      <ul>
        
        
        <li></li>
        
        
        <li>~sampel-palnet:dojo>&nbsp;:btc-provider|command&nbsp;[%add-whitelist&nbsp;%kids&nbsp;~]</li>
        
        
        <li>&nbsp;</li>
        
        
        <li></li>
        
        
        <li></li>
          
      </ul>
    </div>
  </div>

<p>To whitelist a specific ship, enter:</p>
<div class="window">
    <div class="titlebar">
      <div class="buttons">
        <div class="bclose">
        </div>
        <div class="minimize">
        </div>
        <div class="zoom">
        </div>
      </div>
      urbit - ~/urbit/sampel-palnet
    </div>
    <div class="termdojo">
      <ul>
        
        
        <li></li>
        
        
        <li>~sampel-palnet:dojo>&nbsp;:btc-provider|command&nbsp;[%add-whitelist&nbsp;[%users&nbsp;users=(sy&nbsp;~[~wallet-hodler])]]</li>
        
        
        <li>&nbsp;</li>
        
        
        <li></li>
        
        
        <li></li>
          
      </ul>
    </div>
  </div>

<p>&hellip;replacing <code>~wallet-hodler</code> with another <code>@p</code>.</p>
<p>To whitelist all members of a group, enter:</p>
<div class="window">
    <div class="titlebar">
      <div class="buttons">
        <div class="bclose">
        </div>
        <div class="minimize">
        </div>
        <div class="zoom">
        </div>
      </div>
      urbit - ~/urbit/sampel-palnet
    </div>
    <div class="termdojo">
      <ul>
        
        
        <li></li>
        
        
        <li>~sampel-palnet:dojo>&nbsp;:btc-provider|command&nbsp;[%add-whitelist&nbsp;[%groups&nbsp;groups=(sy&nbsp;~[[~sampel&nbsp;%group-name]])]]</li>
        
        
        <li>&nbsp;</li>
        
        
        <li>&nbsp;</li>
        
        
        <li></li>
          
      </ul>
    </div>
  </div>

<p>&hellip;replacing <code>%group-name</code> as well as the host ship.</p>
<p>Once a whitelisted client adds you as a provider, it is printed in the dojo:</p>
<p><img src="/img/btc/2.png" alt=""></p>
<hr>
<p>By the way, I have to brag &ndash; I am pretty sure I set up the first operational provider on the livenet, and facilitated its first transaction; a few weeks in February well-spent!</p>
<p><img src="/img/btc/4.png" alt=""></p>
<hr>
<p><em>This post is also available on Urbit, where you can post comments. Join <a href="web+urbitgraph://group/~matwet/networked-subject/">~matwet/networked-subject</a> and open the Networked Subject notebook.</em></p>
]]></content>
		</item>
		
		<item>
			<title>Building native Windows Urbit binaries</title>
			<link>https://subject.network/posts/urbit-windows-binaries/</link>
			<pubDate>Fri, 23 Apr 2021 18:13:19 -0500</pubDate>
			
			<guid>https://subject.network/posts/urbit-windows-binaries/</guid>
			<description>Last month, a PR was published by locpyl-tidnyd to the Urbit Github, containing instructions and a build environment for the compilation of static, Windows-native Urbit executables(!), for the eventual purpose of an official Windows binary distribution. I am frankly amazed that this is even possible.
As somebody who has encouraged many friends to try out a comet, the biggest hurdle has been convincing them to set up a Linux environment &amp;ndash; the source of two previous tutorials on this blog.</description>
			<content type="html"><![CDATA[<p><img src="/img/winbin/header.gif" alt=""></p>
<p><a href="https://github.com/urbit/urbit/pull/4675">Last month,</a> a PR was published by <code>locpyl-tidnyd</code> to the Urbit Github, containing instructions and a build environment for the compilation of static, Windows-native Urbit executables(!), for the eventual purpose of an official Windows binary distribution. I am frankly amazed that this is even possible.</p>
<p>As somebody who has encouraged many friends to try out a comet, the biggest hurdle has been convincing them to set up a Linux environment &ndash; the source of <a href="http://localhost:1313/posts/urbit-wsl2/">two</a> previous <a href="http://localhost:1313/posts/urbit-windows-docker/">tutorials</a> on this blog. WSL2 is a fabulous tool but still veers toward the geekier side of things, and ordinary people cannot be blamed for wanting a simpler method.</p>
<p>This achievement is pulled off using <a href="https://www.msys2.org/">MSYS2</a>, a fork of <a href="https://www.cygwin.com/">Cygwin</a>, and <a href="https://sourceforge.net/projects/mingw/">MinGW</a>, a Windows port of <code>gcc</code>. The codebase for <code>vere</code> was also ported to <code>mingw</code> by <code>~locpyl-tidnyd</code>. This tutorial will walk you through the steps necessary to build Windows-native binaries, and execute them in an ordinary command prompt.</p>
<p>I include a <a href="https://urbits3.ams3.digitaloceanspaces.com/sitful-hatred/urbit-1.3-win.zip">download link</a> for my compiled binaries in case you have difficulty; however, I <strong>very strongly recommend</strong> that you compile your own, rather than downloading executables from a stranger on the internet! This is a simple process and should only take about ten minutes.</p>
<h2 id="installation">Installation</h2>
<p>Download the <a href="https://www.msys2.org/">latest installer</a> for MSYS2 from the official website, and install it with all default options. After completion, leave the &lsquo;run now&rsquo; option checked off.</p>
<p>A <code>wintty</code> will pop up with a bash shell; let&rsquo;s update all our packages:</p>
<div class="window" width="80%">
    <div class="titlebar">
      <div class="buttons">
        <div class="bclose">
        </div>
        <div class="minimize">
        </div>
        <div class="zoom">
        </div>
      </div>
      MSYS2: 
    </div>
    <div class="termwin">
      <ul>
        
        
        <li></li>
        
        
        <li>$>&nbsp;pacman&nbsp;-Syu</li>
        
        
        <li>&nbsp;</li>
        
        
        <li>&nbsp;</li>
        
        
        <li></li>
          
      </ul>
    </div>
  </div>

<p>Once finished, the window will close. Go ahead and launch <code>MSYS2 MSYS</code> from the start menu, and run another update, then install our toolkit:</p>
<div class="window" width="80%">
    <div class="titlebar">
      <div class="buttons">
        <div class="bclose">
        </div>
        <div class="minimize">
        </div>
        <div class="zoom">
        </div>
      </div>
      MSYS2: 
    </div>
    <div class="termwin">
      <ul>
        
        
        <li></li>
        
        
        <li>$>&nbsp;pacman&nbsp;-Syu</li>
        
        
        <li>$>&nbsp;pacman&nbsp;-S&nbsp;--needed&nbsp;base-devel&nbsp;mingw-w64-x86_64-toolchain</li>
        
        
        <li>&nbsp;</li>
        
        
        <li>&nbsp;</li>
        
        
        <li></li>
          
      </ul>
    </div>
  </div>

<p>Now head over to the <a href="https://github.com/urbit/urbit/pull/4675">linked PR</a> and download the <a href="https://github.com/locpyl-tidnyd/urbit/archive/refs/heads/mingw-port.zip">tarball</a> for the <code>mingw</code> urbit port. Extract the contents, then copy them into your <code>MSYS2</code> home directory:</p>
<pre><code>C:\msys64\home\user.name\home\
</code></pre><p><img src="/img/winbin/6.png" alt=""></p>
<h2 id="compiling">Compiling</h2>
<p>Open your start menu, and pull up <code>MinGW 64-bit</code> &ndash; note that this is <em>not</em> the same as <code>MSYS2</code> despite the similar icons.</p>
<p><img src="/img/winbin/5.png" alt=""></p>
<p>Navigate to your newly copied directory, and run the <code>configure</code> script:</p>
<div class="window" width="80%">
    <div class="titlebar">
      <div class="buttons">
        <div class="bclose">
        </div>
        <div class="minimize">
        </div>
        <div class="zoom">
        </div>
      </div>
      MINGW: 
    </div>
    <div class="termwin">
      <ul>
        
        
        <li></li>
        
        
        <li>$>&nbsp;cd&nbsp;urbit-mingw-port/pkg/urbit</li>
        
        
        <li>$>&nbsp;./configure</li>
        
        
        <li></li>
        
        
        <li>&nbsp;</li>
        
        
        <li></li>
          
      </ul>
    </div>
  </div>

<p>Once this has finished running, build it:</p>
<div class="window" width="80%">
    <div class="titlebar">
      <div class="buttons">
        <div class="bclose">
        </div>
        <div class="minimize">
        </div>
        <div class="zoom">
        </div>
      </div>
      MINGW: 
    </div>
    <div class="termwin">
      <ul>
        
        
        <li></li>
        
        
        <li>$>&nbsp;make&nbsp;build/urbit&nbsp;build/urbit-worker</li>
        
        
        <li></li>
        
        
        <li>&nbsp;</li>
        
        
        <li></li>
          
      </ul>
    </div>
  </div>

<p>Locate and copy the executables out of their directory:</p>
<pre><code>C:\msys64\home\user.name\home\urbit-mingw-port\pkg\urbit\build
</code></pre><h2 id="execution">Execution</h2>
<p>Open an ordinary <code>cmd.exe</code> command prompt, or Windows Terminal if you have it installed &ndash; you do not need elevated privileges, but you may need to allow it through the Windows firewall.</p>
<p>Navigate to the directory where you have copied your executables, and try executing <code>urbit.exe</code> to print the help menu:</p>
<div class="window" width="80%">
    <div class="titlebar">
      <div class="buttons">
        <div class="bclose">
        </div>
        <div class="minimize">
        </div>
        <div class="zoom">
        </div>
      </div>
      cmd.exe: 
    </div>
    <div class="termwin">
      <ul>
        
        
        <li></li>
        
        
        <li>C:\>&nbsp;cd&nbsp;c:\users\user.name\urbit</li>
        
        
        <li>C:\Users\user.name\urbit>&nbsp;.\urbit.exe</li>
        
        
        <li></li>
        
        
        <li>&nbsp;</li>
        
        
        <li></li>
          
      </ul>
    </div>
  </div>

<p>If all is successful so far, you&rsquo;re ready to boot a comet.</p>
<div class="window" width="80%">
    <div class="titlebar">
      <div class="buttons">
        <div class="bclose">
        </div>
        <div class="minimize">
        </div>
        <div class="zoom">
        </div>
      </div>
      cmd.exe: 
    </div>
    <div class="termwin">
      <ul>
        
        
        <li></li>
        
        
        <li>C:\Users\user.name\urbit>&nbsp;.\urbit.exe&nbsp;-c&nbsp;mycomet</li>
        
        
        <li></li>
        
        
        <li>&nbsp;</li>
        
        
        <li></li>
          
      </ul>
    </div>
  </div>

<p><img src="/img/winbin/8.png" alt=""></p>
<p>Let your ship download its source and compile &ndash; this will probably take 15-20 minutes to complete. Once done, and you&rsquo;re in your dojo, request an OTA update, and produce your Landscape access code:</p>
<div class="window">
    <div class="titlebar">
      <div class="buttons">
        <div class="bclose">
        </div>
        <div class="minimize">
        </div>
        <div class="zoom">
        </div>
      </div>
      urbit - ~/urbit/sampel_wanzod
    </div>
    <div class="termdojo">
      <ul>
        
        
        <li></li>
        
        
        <li>~sampel_wanzod:dojo>&nbsp;|ota&nbsp;~wanzod&nbsp;%kids</li>
        
        
        <li>~sampel_wanzod:dojo>&nbsp;+code</li>
        
        
        <li>&nbsp;</li>
        
        
        <li>&nbsp;&nbsp;</li>
        
        
        <li></li>
          
      </ul>
    </div>
  </div>

<p>Navigate to <a href="http://localhost:80">http://localhost:80</a> to access your ship, and paste the password produced by <code>+code</code> to enter Landscape.</p>
<h2 id="addendum">Addendum</h2>
<p>The process of downloading and compiling your ship is significantly slower than on a Linux machine in my experience, even compared to running a ship on WSL2. That said, it was still totally functional if slightly less responsive.</p>
<p>While I have successfully tested and used this Windows build, I cannot guarantee their stability &ndash; these have not been released into production, I assume for this reason. I would not recommend booting a planet with this just yet, but this should be replaced by an official release in the near future.</p>
<hr>
<p><em>This post is also available on Urbit, where you can post comments. Join <a href="web+urbitgraph://group/~matwet/networked-subject/">~matwet/networked-subject</a> and open the Networked Subject notebook.</em></p>
]]></content>
		</item>
		
		<item>
			<title>Ames indirect connection fixes</title>
			<link>https://subject.network/posts/galaxy-routing-nat/</link>
			<pubDate>Tue, 20 Apr 2021 18:00:35 -0500</pubDate>
			
			<guid>https://subject.network/posts/galaxy-routing-nat/</guid>
			<description>Urbit&amp;rsquo;s networking protocol, %ames, uses peer-to-peer connections to let your ship talk to others, with all traffic transported over encrypted UDP. However, in order to allow your ship to discover the IP addresses of ships you want to talk to, you have to query the network &amp;ndash; specifically, your ship asks your star, which asks the galaxies. The answer gets relayed to you, and then you send your packets where they&amp;rsquo;re meant to go.</description>
			<content type="html"><![CDATA[<p><img src="/img/ames.gif" alt=""></p>
<p>Urbit&rsquo;s networking protocol, <code>%ames</code>, uses peer-to-peer connections to let your ship talk to others, with all traffic transported over encrypted UDP. However, in order to allow your ship to discover the IP addresses of ships you want to talk to, you have to query the network &ndash; specifically, your ship asks your star, which asks the galaxies. The answer gets relayed to you, and then you send your packets where they&rsquo;re meant to go.</p>
<p>Sometimes, however, your packets will not get through, or vice versa. After a 30 second timeout, your ship will try routing your connection through your galaxy instead. This helps you get around  firewalls and home routers that won&rsquo;t allow connections through, at the expense of the speed of your messages arriving.</p>
<p>(As an aside, this service will eventually be performed by stars, but is done by galaxies for the time being.)</p>
<p>If you are experiencing significant latency between yourself and another ship, it may be because one of you is having your connection proxied through a galaxy. Besides very slow messages, there&rsquo;s no obvious way to tell whether this is the case, but there are a couple of tricks:</p>
<h2 id="detection">Detection</h2>
<h3 id="one-liner">One-liner</h3>
<blockquote>
<p>The command to use in the Urbit dojo is:</p>
</blockquote>
<div class="window">
    <div class="titlebar">
      <div class="buttons">
        <div class="bclose">
        </div>
        <div class="minimize">
        </div>
        <div class="zoom">
        </div>
      </div>
      urbit - sampel-palnet
    </div>
    <div class="termdojo">
      <ul>
        
        
        <li></li>
        
        
        <li>~sampel-palnet:dojo>&nbsp;=/(ss&nbsp;.^(ship-state:ames&nbsp;ax+/=//=/peers/~zod)&nbsp;?>(?=(%known&nbsp;-.ss)&nbsp;route.ss))</li>
        
        
        <li>~sampel-palnet:dojo></li>
        
        
        <li>&nbsp;</li>
        
        
        <li></li>
        
        
        <li>&nbsp;</li>
        
        
        <li></li>
          
      </ul>
    </div>
  </div>

<blockquote>
<p>Replace ~zod with the actual ship name.</p>
</blockquote>
<blockquote>
<p>You&rsquo;ll see something like this as a response, if your ship is in fact directly linked to the other one (instead of being indirectly routed by a star):</p>
</blockquote>
<div class="window">
    <div class="titlebar">
      <div class="buttons">
        <div class="bclose">
        </div>
        <div class="minimize">
        </div>
        <div class="zoom">
        </div>
      </div>
      urbit - sampel-palnet
    </div>
    <div class="termdojo">
      <ul>
        
        
        <li></li>
        
        
        <li>>&nbsp;=/(ss&nbsp;.^(ship-state:ames&nbsp;ax+/=//=/peers/~zod)&nbsp;?>(?=(%known&nbsp;-.ss)&nbsp;route.ss))</li>
        
        
        <li>[~&nbsp;[direct=%.y&nbsp;lane=[%.y&nbsp;p=~zod]]]</li>
        
        
        <li>&nbsp;</li>
        
        
        <li></li>
          
      </ul>
    </div>
  </div>

<p>(<a href="https://rudd-o.com/linux-and-free-software/how-to-find-out-if-your-urbit-ship-is-directly-or-indirectly-routing-to-another-urbit-ship">Source</a> &ndash; thanks, <code>~posput-borfes</code>!)</p>
<p>If your output instead says <code>direct=%.n</code>, this means your connection is indirect &ndash; i.e., proxied through a galaxy.</p>
<h3 id="debug">Debug</h3>
<p>Alternatively, you can run this in the dojo:</p>
<div class="window">
    <div class="titlebar">
      <div class="buttons">
        <div class="bclose">
        </div>
        <div class="minimize">
        </div>
        <div class="zoom">
        </div>
      </div>
      urbit - sampel-palnet
    </div>
    <div class="termdojo">
      <ul>
        
        
        <li></li>
        
        
        <li>~sampel-palnet:dojo>&nbsp;|start&nbsp;%dbug</li>
        
        
        <li>&nbsp;</li>
        
        
        <li></li>
        
        
        <li></li>
          
      </ul>
    </div>
  </div>

<p>Then switch to Landscape, and go to <code>/~debug</code> (e.g. http://localhost:8080/~debug ), and click on the ames tab. This will show your route for each ship.</p>
<p><img src="/img/debug.png" alt=""></p>
<p>Look for the value next to &lsquo;Route&rsquo; &ndash; &lsquo;Indirect&rsquo; means your connection is proxied.</p>
<p>After you&rsquo;re done, you may want to turn off <code>%dbug</code> &ndash; I found it slowed down my ship noticeably:</p>
<div class="window">
    <div class="titlebar">
      <div class="buttons">
        <div class="bclose">
        </div>
        <div class="minimize">
        </div>
        <div class="zoom">
        </div>
      </div>
      urbit - sampel-palnet
    </div>
    <div class="termdojo">
      <ul>
        
        
        <li></li>
        
        
        <li>~sampel-palnet:dojo>&nbsp;|fade&nbsp;%dbug</li>
        
        
        <li>&nbsp;</li>
        
        
        <li></li>
        
        
        <li></li>
          
      </ul>
    </div>
  </div>

<hr>
<h2 id="fixes">Fixes</h2>
<h3 id="home-router">Home router</h3>
<p>If you find that your ship is routing through your galaxy for all connections to other ships, it&rsquo;s because your ames port is being blocked by your firewall or router.</p>
<p>If you are behind a home router, look up a guide to <a href="https://www.noip.com/support/knowledgebase/general-port-forwarding-guide/">configure port forwarding</a> for your router&rsquo;s model or manufacturer.</p>
<p>You will need to forward your ames port &ndash; by default, this is a random UDP port between 50000 - 59999. You can forward that entire port range to the computer running the ship, or you can restart your urbit with a flag to specify a particular port, and forward that one:</p>
<div class="window" width="80%">
    <div class="titlebar">
      <div class="buttons">
        <div class="bclose">
        </div>
        <div class="minimize">
        </div>
        <div class="zoom">
        </div>
      </div>
      terminal: ~/urbit
    </div>
    <div class="termwin">
      <ul>
        
        
        <li></li>
        
        
        <li>$>&nbsp;urbit&nbsp;-p&nbsp;54321&nbsp;sampel-palnet</li>
        
        
        <li>&nbsp;</li>
        
        
        <li>&nbsp;</li>
        
        
        <li></li>
          
      </ul>
    </div>
  </div>

<p>Keep in mind that if you are forwarding to a specific IP address, that device should have a static private IP &ndash; i.e., if your home deskop runs your urbit and its IP address is 192.168.0.10, you will want to configure it so that it always claims that IP address rather than having a random one assigned via DHCP next time it reboots. Google &lsquo;static ip&rsquo; + your operating system if you aren&rsquo;t sure how.</p>
<p>A simpler fix is to instead boot your ship with <code>urbit-king</code>, (aka King Haskell) an alternative binary. <code>urbit-king</code> includes UPnP support, which will automatically configure port forwarding for compatible routers.</p>
<p>If you want to try it, you may want to take a look at the parameters, as they&rsquo;re slightly different from the <code>urbit</code> binary written in C. To boot your existing pier:</p>
<div class="window" width="80%">
    <div class="titlebar">
      <div class="buttons">
        <div class="bclose">
        </div>
        <div class="minimize">
        </div>
        <div class="zoom">
        </div>
      </div>
      terminal: ~/urbit
    </div>
    <div class="termwin">
      <ul>
        
        
        <li></li>
        
        
        <li>$>&nbsp;urbit-king&nbsp;run&nbsp;/path/to/sampel-palnet</li>
        
        
        <li>&nbsp;</li>
        
        
        <li>&nbsp;</li>
        
        
        <li></li>
          
      </ul>
    </div>
  </div>

<p>(Make sure you&rsquo;ve shut down your ship before booting it!)</p>
<p><code>urbit-king</code> also has native support for disconnecting and reconnecting to your instance without having to use <code>tmux</code>.</p>
<h3 id="vps">VPS</h3>
<p>If you are running your ship on a remote server, there are two possibilities for your traffic&rsquo;s obstruction &ndash; a local firewall on your VPS, or a firewall controlled via the dashboard provided by your provider. This latter type can&rsquo;t be adjusted from inside your VPS &ndash; you&rsquo;ll have to adjust it on your host&rsquo;s web control panel.</p>
<p>Fixing this for a local firewall is simple enough &ndash; just set an iptables rule to allow UDP ingress on that port. For instance, assuming you have bound your urbit to port 54321:</p>
<div class="window" width="80%">
    <div class="titlebar">
      <div class="buttons">
        <div class="bclose">
        </div>
        <div class="minimize">
        </div>
        <div class="zoom">
        </div>
      </div>
      terminal: ~/urbit
    </div>
    <div class="termwin">
      <ul>
        
        
        <li></li>
        
        
        <li>$>&nbsp;iptables&nbsp;-A&nbsp;INPUT&nbsp;-p&nbsp;udp&nbsp;-m&nbsp;udp&nbsp;--dport&nbsp;54321&nbsp;-j&nbsp;ACCEPT</li>
        
        
        <li>&nbsp;</li>
        
        
        <li>&nbsp;</li>
        
        
        <li></li>
          
      </ul>
    </div>
  </div>

<p>The latter type of firewall is a little less uniform, and I can&rsquo;t provide a universal guide here, but you can take a look at the example of Oracle&rsquo;s firewall <a href="https://subject.network/posts/free-cloud-oracle/#configuring-software">here</a>. The main thing to keep in mind is that you want to allow UDP ingress traffic on whatever your ames port is, or the port range it uses.</p>
<hr>
<p><em>This post is also available on Urbit, where you can post comments. Join <a href="web+urbitgraph://group/~matwet/networked-subject/">~matwet/networked-subject</a> and open the Networked Subject notebook.</em></p>
]]></content>
		</item>
		
		<item>
			<title>State of Mars: Spring 2021</title>
			<link>https://subject.network/posts/state-urbit-spring-2021/</link>
			<pubDate>Fri, 09 Apr 2021 18:31:49 -0500</pubDate>
			
			<guid>https://subject.network/posts/state-urbit-spring-2021/</guid>
			<description>Introduction In lieu of a tutorial or interview, I thought it would be useful to write a short summary of some of the developments surrounding Urbit in the last year. 2020-21 has been an eventful period for many reasons, but the pace of development on the Urbit project has been steady, and always in the direction of beauty and utility.
When I polled a chat group about their favorite recent improvements and features, several people mentioned its improved reliability, especially chat.</description>
			<content type="html"><![CDATA[<p><img src="/img/spring21/spring-header.gif" alt=""></p>
<h2 id="introduction">Introduction</h2>
<p>In lieu of a tutorial or interview, I thought it would be useful to write a short summary of some of the developments surrounding Urbit in the last year. 2020-21 has been an eventful period for many reasons, but the pace of development on the Urbit project has been steady, and always in the direction of beauty and utility.</p>
<p>When I polled a chat group about their favorite recent improvements and features, several people mentioned its improved reliability, especially chat. Though I half-fondly recall waiting 5-10 seconds for keystrokes to register into the CLI chat client and posting multiple times on return a few years ago, it is true that the overall stability has improved markedly. I hear about breaches less frequently, and I use my ship throughout the day without experiencing serious problems or errors. The team at Tlon definitely deserves significant credit for wrangling such a novel system not just into working, but being useful.</p>
<p>So, if you are new to Urbit, or haven&rsquo;t checked in on it in a while, here&rsquo;s a survey of how things have changed and are anticipated to change soon.</p>
<h2 id="landscape-developments">Landscape developments</h2>
<p><img src="/img/spring21/landscape.jpg#floatright" alt=""></p>
<p>Urbit has come a long way in since the release of OS1 in April of 2020. OS1 was the first release of most of the major features of Landscape, the web interface for Urbit. If you haven&rsquo;t dug in much, you could be forgiven for thinking that Landscape <em>was</em> Urbit. If you dipped your toes into Landscape or saw somebody using it a few months ago, you will immediately notice the significant UI tweaks and improvements, as well an ever-incrementing level of UI polish.</p>
<p>One of the big changes under the hood has been the integration and extension of <code>%graph-store</code> as an underpinning for the social apps in landscape (you can read more about the design of <code>%graph-store</code> <a href="/posts/graph-store">here</a>). The suite of software running in Landscape has a common underpinning, and all of the data you generate &ndash; your posts, comments, essays, etc &ndash; are stored as interlinked nodes on a personal graph. This is beginning to bear fruit; a recent update contains native Urbit URIs, and the ability to embed graph content across apps (&quot;<a href="https://twitter.com/fIowerstructure/status/1378047187595235333">graph node transclusion</a>&quot;). You can think of this a bit like embedding a tweet in a webpage, but applied to whatever data is contained in your graph or somebody else&rsquo;s; you can even reference nodes which contain their own nested nodes.</p>
<p><img src="/img/spring21/graph-trans.jpg" alt=""></p>
<p>This feature is young and simple, but to me it feels like a real shift in the possibilities of threaded content &ndash; you can, today, create a notebook which contains nested nodes drawn not just from your own posts and messages, but from anybody else&rsquo;s. Recall that graph content is not bound only to chat messages, but rather that graph semantics can be applied to any data generated by your computing. Graph content is also cryptographically signed by your ship&rsquo;s keys and can include executable code; this is a truly new combination of features gesturing toward new kinds of social computing. And this feature isn&rsquo;t even the point of Urbit!</p>
<h2 id="self-hosting-improvements">Self-hosting improvements</h2>
<p>Using Urbit has gotten significantly easier in the last few months. There are many ways to self-host, but I suspect there are two recent innovations that will prove particularly convenient for people wanting to tinker with a ship for the first time. The first is Docker Desktop <a href="/posts/urbit-windows-docker/">on Windows</a>: it is finally possible to run Urbit on Windows without having to do Linux system administration in a command line. Many people are simply allergic to controlling a computer with a CLI &ndash; it can be an overwhelming task to jump headlong into an interface you have limited or no experience with. Fortunately, the ability to manage a ship in a GUI opens the doors to many more people who might otherwise be turned away. Docker Desktop can also manage your updates for you, and sands off a few of the rough edges of the WSL experience. If you have a Windows 10 computer, you can boot a comet today in ten minutes without touching a bash shell.</p>
<p>The second development I want to call attention to is <a href="">Taisho</a>, a minimal Electron interface for launching ships created by <code>~nocsyx-lassul</code> to fulfill a <a href="https://grants.urbit.org/proposals/740109059-cross-platform-desktop-urbit-app">grant</a>.</p>
<p><img src="/img/spring21/taisho.jpg" alt=""></p>
<p>Taisho allows you to download and run a GUI desktop app and boot a ship with the click of a mouse. At the moment it&rsquo;s a proof-of-concept, limited to Mac/Linux and the ability to launch comets, but it will be a fully-featured cross-platform client in the future (including for Windows), eventually intended to be the official client. If you&rsquo;ve never booted a ship before, this is definitely the slickest way to do it.</p>
<p><strong>Update:</strong> <em>Taisho is now known as <strong>Port</strong>, and has been released as the official Urbit client. Windows support soon!</em></p>
<h2 id="hosting">Hosting</h2>
<p>Fully-hosted providers will probably be the way that most ordinary people pilot their ships &ndash; generally speaking, people either do not have a computer that they leave turned on 24/7, they do not use Mac or Linux, or they just don&rsquo;t want to be bothered with managing their own server. If you aren&rsquo;t really into digital sovereignty, there&rsquo;s little reason not to pay somebody do this for you.</p>
<p>Thus far, I am aware of three full hosting providers &ndash; <a href="https://tlon.io/">Tlon</a>, <a href="https://www.geturbitid.com/">Get Urbit ID</a>, and <a href="https://www.escapepod.store/">Escape Pod Store</a>, all of which launched in the last year. Expect more to follow!</p>
<h2 id="naive-rollups">Naive rollups</h2>
<p>The ongoing crypto bull run has had the predictable effect of making interacting with Azimuth contracts very expensive; the cost of issuing a planet on average is about 10x what it was a year ago. Fortunately, an effort is underway to reduce these costs by orders of magnitude.</p>
<p>The solution Tlon has begun work on is called &lsquo;naive rollups&rsquo;. In brief, the way Azimuth works involves running computations on Ethereum and having it store the results for nodes on Urbit to reference as a source of truth. Those computations cost money, so the solution is to perform the computations on Urbit, and merely store the resulting data on-chain in batches.</p>
<p>You can see <code>~wicdev-wisryt</code> discuss the design of this system at length in a <a href="https://www.youtube.com/watch?v=CKuHXrdkIw0">developer call</a>, or read the <a href="https://groups.google.com/a/urbit.org/g/dev/c/p6rP_WsxLS0/m/hQBX0modAwAJ">original RFC</a>.</p>
<p>The short version of this is that in a few months, the transaction fees associated with issuing a planet should be cut by at least 65x. In the longer term, a solution involving zero-knowledge rollups may be expected.</p>
<p><strong>Update:</strong> <em>You can read a more accessible explanation of the rollup solution <a href="https://urbit.org/blog/rollups/">here</a></em>.</p>
<h2 id="apps">Apps</h2>
<p>The ecosystem of apps being developed for Urbit has picked up pace; you can see an index of projects on the <a href="https://github.com/urbit/awesome-urbit">awesome-urbit</a> Github collection. Here, I will feature two highlights:</p>
<h3 id="--urbit-chess">- Urbit Chess</h3>
<p><img src="/img/spring21/chess.jpg" alt=""></p>
<p>While this isn&rsquo;t the <a href="https://github.com/urbit/chess">first time</a> chess has been implemented on Urbit, <a href="https://sr.ht/~ray/urbit-chess/">this version</a> is significantly more sophisticated, and can be installed by remotely mounting a desk, effectively letting you install via one-liner. This version also allows you to save and export games, and <code>~rolsut-rospub</code> also has plans to implement ELO ratings.</p>
<h3 id="--srrs">- srrs</h3>
<p><img src="/img/spring21/srrs.gif" alt=""></p>
<ul>
<li><em>image credit <a href="https://github.com/ryjm/srrs">srrs GH</a></em></li>
</ul>
<p><code>~littel-wolfur</code> has been working on <a href="https://github.com/ryjm/srrs">this app</a> for quite a while, and it shows &ndash; the level of polish on this spaced-repetition app is obvious. If you&rsquo;ve ever used Anki to learn a foreign language or subject, you know that it is a particularly effective mode of study.</p>
<p><code>srrs</code> allows you to export decks, import existing Anki decks, and subscribe to decks on other ships. It even includes an command-line interface.</p>
<h2 id="bitcoin">Bitcoin</h2>
<p><img src="/img/spring21/btc.jpg" alt=""></p>
<ul>
<li><em>image <a href="https://twitter.com/fIowerstructure/status/1379914238811119618">credit</a> <code>~fabled-faster</code></em></li>
</ul>
<p>Urbit&rsquo;s Bitcoin integration is <a href="https://www.meetup.com/urbit-sf/events/276741426/">just around the corner</a>, with an official release of April 27 &ndash; a day I&rsquo;ve been excited about <a href="/posts/bitcoin-with-timluc-miptev/">for</a> a <a href="/posts/pi-fullnode-urbit/">while</a>.</p>
<p>Much has <a href="https://urbit.org/blog/urbit-and-bitcoin/">been written</a> about the philosophical alignment of Bitcoin and Urbit &ndash; &lsquo;sound money for sound computing&rsquo; and &lsquo;civilization-complete&rsquo; spring to mind as slogans &ndash; but the day is finally upon us. A robust, distributed social platform with first-class decentralized payment support opens a world of possibility. Besides a convenient and secure social layer for simple cash transactions, there are a lot of business models built around distributing digital content for payment.</p>
<p>Next up is <a href="https://gist.github.com/timlucmiptev/53ef1d290e55ea2fa25d9df681c32695">Lightning network integration</a>, in order to facilitate fast, small payments of the kind that would be more suited to access to things like friend-to-friend payments, content subscriptions and media. If you think you have the chops, reach out to <code>~timluc-miptev</code>.</p>
<p><strong>Update:</strong> *Bitcoin support was officially released in May 2021. Read more about using it <a href="/posts/btc-wallet-config">here</a>.</p>
<h2 id="webrtc">WebRTC</h2>
<p><img src="/img/spring21/webrtc.jpg#floatright" alt=""></p>
<p>The next big feature to be expected later this year is <a href="https://grants.urbit.org/proposals/21131866-webrtc-gall-agent-and-external-app">WebRTC</a> video and audio chat. WebRTC is an existing collection of methods for peer-to-peer streaming multimedia &ndash; you may have used it before in something like Discord&rsquo;s audio channels.</p>
<p>One of the convenient parts of WebRTC is that a lot of the hard work (e.g. interfacing with hardware) is done by the browser, in line with existing standards. This means that the work needed to implement it on Urbit is mostly a matter of writing software to coordinate peers with each other and perform NAT traversal (STUN/TURN/ICE). This plays to the strengths of Urbit&rsquo;s design as an overlay OS, and meshes nicely with the existing suite of Landscape agents.</p>
<p>Urbit&rsquo;s WebRTC implementation is being developed by <code>~ritpub-sipsyl</code> to fulfill a grant proposal.</p>
<p>(<em>image credit <code>~fabled-faster</code></em>)</p>
<hr>
<p>To end with, I wanted to link a <a href="https://groups.google.com/a/urbit.org/g/dev/c/bdlPPnaccMc/m/icOJCcIwBwAJ">recent discussion</a> on the <code>urbit-dev</code> mailing list (if you&rsquo;re interested in closely following this project, there is no better way). The OP rightly points out that there seem to be many urbits &ndash; the original project, the one that exists, and the one that will exist &ndash; and that this can get in the way of understanding what it <em>is</em>. A thoughtful and gracious conversation follows, touching on many different perspectives on the topic. Recommended for weekend reading.</p>
<hr>
<p><em>This post is also available on Urbit, where you can post comments. Join <a href="web+urbitgraph://group/~matwet/networked-subject/">~matwet/networked-subject</a> and open the Networked Subject notebook.</em></p>
]]></content>
		</item>
		
		<item>
			<title>Easy Urbit on Windows with Docker Desktop</title>
			<link>https://subject.network/posts/urbit-windows-docker/</link>
			<pubDate>Sun, 07 Mar 2021 13:10:01 -0600</pubDate>
			
			<guid>https://subject.network/posts/urbit-windows-docker/</guid>
			<description>Introduction We&amp;rsquo;ve previously covered a method for running Urbit on a Windows PC, but it could be a little onerous for a novice. Specifically, it still involved a decent amount of command line Linux administration. Fortunately, it turns out there is an easier way to do things; recently, ~botter-nidnul wrote up a guide to running Urbit inside a container with Docker Desktop, and with his blessing I am going to elaborate on it with step-by-step instructions.</description>
			<content type="html"><![CDATA[<p><img src="/img/win-docker/docker-header.gif" alt=""></p>
<h2 id="introduction">Introduction</h2>
<p>We&rsquo;ve <a href="/posts/urbit-wsl2/">previously</a> covered a method for running Urbit on a Windows PC, but it could be a little onerous for a novice. Specifically, it still involved a decent amount of command line Linux administration. Fortunately, it turns out there is an easier way to do things; recently, <code>~botter-nidnul</code> <a href="https://gist.github.com/botter-nidnul/bc55769afe006de6f93b27390e5d1267">wrote up a guide</a> to running Urbit inside a container with Docker Desktop, and with his blessing I am going to elaborate on it with step-by-step instructions.</p>
<p>Docker is a bit like running a virtual machine &ndash; for our purposes, just think of it as a tiny OS inside your OS that exists to run one application (here, also an OS). These are called containers, and they have a few advantages over traditional VMs &ndash; notably, they&rsquo;re very easy to copy to and from other machines, and you can modify their configuration as much as you want without screwing up the host device. If you break something and can&rsquo;t fix it, you can just delete the container and reinstall it. It&rsquo;s pretty handy for running web services, and now you can run a ship inside of one without too much setup.</p>
<p>Docker makes use of WSL2, and will be prompted to have it installed before you can use Docker. If you don&rsquo;t already have it, follow the <a href="/posts/urbit-wsl2/#updating">directions</a> under the subheaders <em>Updating</em>, <em>Enabling WSL</em>, and <em>Installation</em> on our previous tutorial. You will also need to run Docker as a user with administrator privileges on your device.</p>
<h2 id="installation">Installation</h2>
<p>In order to get Docker, you&rsquo;ll need to install the <code>winget</code> Windows tool. It requires the <a href="https://www.microsoft.com/en-us/p/app-installer/9nblggh4nns1">App Installer</a> package in the Windows Store.</p>
<p>After that is installed, head over to Microsoft&rsquo;s <a href="https://github.com/microsoft/winget-cli/releases">Github</a> and click the download link for the file ending in <code>.appxbundle</code>. This will install <code>winget</code>.</p>
<p>Now open up a command prompt and run the following command:</p>
<div class="window" width="80%">
    <div class="titlebar">
      <div class="buttons">
        <div class="bclose">
        </div>
        <div class="minimize">
        </div>
        <div class="zoom">
        </div>
      </div>
      cmd.exe: 
    </div>
    <div class="termwin">
      <ul>
        
        
        <li></li>
        
        
        <li>C:\>&nbsp;winget&nbsp;install&nbsp;docker</li>
        
        
        <li>&nbsp;</li>
        
        
        <li></li>
        
        
        <li></li>
          
      </ul>
    </div>
  </div>

<p><em>[Note: you don&rsquo;t need to include the <code>C:\&gt;</code> part &ndash; we will use this to indicate a Windows command line.]</em></p>
<p>Back at the command line, you should see this spin for a minute or two while it installs.</p>
<p><img src="/img/win-docker/winget.png" alt=""></p>
<p>Once it&rsquo;s completed, restart your computer. When you&rsquo;re back, open up your start menu and you should see a new entry for Docker Desktop:</p>
<p><img src="/img/win-docker/docker-start.png" alt=""></p>
<p>Go ahead and open it. Now, return to a command line:</p>
<div class="window" width="80%">
    <div class="titlebar">
      <div class="buttons">
        <div class="bclose">
        </div>
        <div class="minimize">
        </div>
        <div class="zoom">
        </div>
      </div>
      cmd.exe: 
    </div>
    <div class="termwin">
      <ul>
        
        
        <li></li>
        
        
        <li>C:\>&nbsp;docker&nbsp;volume&nbsp;create&nbsp;urbit</li>
        
        
        <li>&nbsp;</li>
        
        
        <li></li>
        
        
        <li></li>
          
      </ul>
    </div>
  </div>

<p>Now open up a folder, and navigate to this path by pasting the address into the bar:</p>
<p><code>\\wsl$\docker-desktop-data\version-pack-data\community\docker\volumes\urbit\_data</code></p>
<p>Now create an empty file named with the extension <code>.comet</code> &ndash; for instance, <code>mycomet.comet</code>. This will tell Docker create a comet with the name <code>mycomet</code>.</p>
<p>The easiest way to create a blank file is to right click an empty spot in the folder, select &lsquo;New&rsquo;, &lsquo;text file&rsquo;, and rename the file it creates to get rid of the <code>.txt</code> extension. You will need to enable visible file extensions if you haven&rsquo;t already:</p>
<p><img src="/img/win-docker/show-ext.png" alt=""></p>
<p>if you already have a planet and want to boot it for the first time, you can paste the keyfile from Bridge in here instead. If you want to move an existing ship, shut your ship down and copy the pier directory into this folder instead. Either way, I recommend booting a comet first, to make sure everything works right.</p>
<p>Before we boot, let&rsquo;s forward the port it&rsquo;s going to use. This will allow your ship to have direct connections with other ships, instead of routing the connections through other nodes.</p>
<p>The Docker image uses UDP 34343 by default &ndash; go ahead and forward that port on your router to the device running your ship (make sure it&rsquo;s UDP!). There&rsquo;s no single standard way to forward ports on different kinds of routers, but you can find generic instructions <a href="https://www.noip.com/support/knowledgebase/general-port-forwarding-guide/">here</a> if you have trouble.</p>
<h2 id="booting-up">Booting up</h2>
<p>Open another command prompt and paste the following command into it:</p>
<div class="window" width="80%">
    <div class="titlebar">
      <div class="buttons">
        <div class="bclose">
        </div>
        <div class="minimize">
        </div>
        <div class="zoom">
        </div>
      </div>
      cmd.exe: 
    </div>
    <div class="termwin">
      <ul>
        
        
        <li></li>
        
        
        <li>C:\>&nbsp;docker&nbsp;run&nbsp;-p&nbsp;80:80&nbsp;-p&nbsp;34343:34343/udp&nbsp;-it&nbsp;--restart&nbsp;always&nbsp;--mount&nbsp;type=volume,source=urbit,destination=/urbit&nbsp;--name&nbsp;urbit&nbsp;tloncorp/urbit</li>
        
        
        <li>&nbsp;</li>
        
        
        <li></li>
        
        
        <li></li>
          
      </ul>
    </div>
  </div>

<p>You should see the urbit process start up and mine an identity, then download and compile its source code.</p>
<p><img src="/img/win-docker/cmd-urbit.png" alt=""></p>
<p>That&rsquo;s it! You&rsquo;ve booted you ship and are ready to explore the network.</p>
<p>Type <code>+code</code> into the urbit command line, and copy the four word password it generates by highlighting and right clicking.</p>
<p>Open your web browser and navigate to <code>http://localhost</code>:</p>
<p><img src="/img/win-docker/browser.png" alt=""></p>
<p>Log in by pasting the password.</p>
<p>If you&rsquo;re brand new to the network, here are a couple of good groups for beginners to join:</p>
<table>
<thead>
<tr>
<th>Address</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="web+urbitgraph://group/~bitbet-bolbel/urbit-community/">~bitbet-bolbel/urbit-community</a></td>
<td>The biggest group on the network, filled with cool resources</td>
</tr>
<tr>
<td><a href="web+urbitgraph://group/~bollug-worlus/urbit-index/">~bollug-worlus/urbit-index</a></td>
<td>Contains a notebook called &lsquo;Directory&rsquo; with a list of public groups you can join</td>
</tr>
<tr>
<td><a href="web+urbitgraph://group/~matwet/networked-subject/">~matwet/networked-subject</a></td>
<td>The group associated with this blog &ndash; feel free to say hi, ask questions or give feedback</td>
</tr>
</tbody>
</table>
<p>Big thanks again to <code>~botter-nidnul</code> for the <a href="https://gist.github.com/botter-nidnul/bc55769afe006de6f93b27390e5d1267">original tutorial</a> and his help and feedback with drafting this!</p>
<h2 id="misc--troubleshooting">Misc &amp; troubleshooting</h2>
<ul>
<li>
<p>You can detach from the command line running your ship by pressing <code>ctrl-p</code>, <code>ctrl-q</code> &ndash; this lets you close the command prompt without exiting the process. You can reattach to it with <code>docker attach urbit</code>.</p>
</li>
<li>
<p>You can tell Docker to automatically run on startup by going to the configuration menu:</p>
</li>
</ul>
<p><img src="/img/win-docker/startup.png" alt=""></p>
<ul>
<li>You can install a container for Watchtower that will automatically update your containers for you with this command:</li>
</ul>
<div class="window" width="80%">
    <div class="titlebar">
      <div class="buttons">
        <div class="bclose">
        </div>
        <div class="minimize">
        </div>
        <div class="zoom">
        </div>
      </div>
      cmd.exe: 
    </div>
    <div class="termwin">
      <ul>
        
        
        <li></li>
        
        
        <li>C:\>&nbsp;docker&nbsp;run&nbsp;-d&nbsp;--restart&nbsp;always&nbsp;--name&nbsp;watchtower&nbsp;-v&nbsp;/var/run/docker.sock:/var/run/docker.sock&nbsp;containrrr/watchtower</li>
        
        
        <li></li>
        
        
        <li></li>
        
        
        <li></li>
          
      </ul>
    </div>
  </div>

<ul>
<li>You can turn your container on and off inside the Docker Desktop app:</li>
</ul>
<p><img src="/img/win-docker/container.png" alt=""></p>
<hr>
<ul>
<li>If your urbit won&rsquo;t restart, check out <a href="https://gist.github.com/botter-nidnul/bc55769afe006de6f93b27390e5d1267#possible-errors">~botter&rsquo;s</a> solution for deleting the <code>.vere.lock</code> file inside your <code>\urbit\_data</code> folder.</li>
</ul>
<hr>
<p><em>This post is also available on Urbit, where you can post comments. Join <a href="web+urbitgraph://group/~matwet/networked-subject/">~matwet/networked-subject</a> and open the Networked Subject notebook.</em></p>
]]></content>
		</item>
		
		<item>
			<title>Preparing for Urbit-BTC integration with a Pi full node</title>
			<link>https://subject.network/posts/pi-fullnode-urbit/</link>
			<pubDate>Sat, 27 Feb 2021 17:55:01 -0600</pubDate>
			
			<guid>https://subject.network/posts/pi-fullnode-urbit/</guid>
			<description>Note: Urbit&amp;rsquo;s Bitcoin wallet was launched in May 2021. You can learn how to use it here
Introduction As you may have heard, Urbit is due to receive support for Bitcoin in th near future. Thanks to the efforts of ~timluc-miptev in fulfilling a bounty for an Urbit-native bitcoin wallet and RPC support &amp;ndash; a suite called btc-agents &amp;ndash; you will be able to send and receive bitcoin with other pilots on the network, by connecting your ship to a provider, which itself is connected to a bitcoin full node running the Electrs rustlang Electrum Server implementation.</description>
			<content type="html"><![CDATA[<p><img src="/img/btc-header.jpg" alt=""></p>
<p><strong>Note</strong>: <em>Urbit&rsquo;s Bitcoin wallet was launched in May 2021. You can learn how to use it <a href="https://subject.network/posts/btc-wallet-config/">here</a></em></p>
<h2 id="introduction">Introduction</h2>
<p>As you <a href="/posts/bitcoin-with-timluc-miptev/">may have heard</a>, Urbit is due to receive support for Bitcoin in th near future. Thanks to the efforts of <code>~timluc-miptev</code> in <a href="https://github.com/timlucmiptev/btc-agents">fulfilling</a> a bounty for an Urbit-native bitcoin wallet and RPC support &ndash; a suite called <code>btc-agents</code> &ndash; you will be able to send and receive bitcoin with other pilots on the network, by connecting your ship to a provider, which itself is connected to a bitcoin full node running the <a href="https://github.com/romanz/electrs">Electrs</a> rustlang Electrum Server implementation.</p>
<p>Be sure to check out the previous interview linked above for context and details about these tools. For a quick overview of what you can expect, here are the requirements for the project from the <a href="https://grants.urbit.org/bounties/2056919898-bitcoin-full-node-provider-and-wallet">bounty</a> proposal:</p>
<blockquote>
<ul>
<li>Ships can send payment in Bitcoin to other ships.</li>
<li>Ships can send payment in Bitcoin to addresses.</li>
<li>Ships can connect to full nodes that they run on their own.</li>
<li>Ships can connect to full nodes operated by other ships.</li>
<li>Private keys are never entrusted to any other entity.</li>
<li>Ships can view the transaction history for any Bitcoin account they own.</li>
<li>Ships can view the balance of any Bitcoin account they own.</li>
</ul>
</blockquote>
<p>After interviewing <code>~timluc</code> about his work and being inspired by the efforts of <code>~nalytc-wornes</code> and the smol computing community at <a href="web+urbitgraph://group/~dasfeb/smol-computers/">~dasfeb/smol-computers</a>, I decided to expend some time and resources on putting together the requisite software and documenting the processes (and my missteps along the way) for the benefit of others who&rsquo;d like to follow suit. Be assured, this is totally possible with a small, cheap computer and a few days of fiddling over SSH (though it took me the better part of a month to get everything working). Also note: I did not use an RPi4, but you could probably follow most of these directions to do so.</p>
<p>The promise of bitcoin support on urbit is meshing the financial freedom of cryptocurrency with the true ownership of digital identity provided by urbit. The utility of programmable money is made more real by connecting BTC to the social layer of urbit address space; this is the prospect I find most exciting. Smart contracts may have gotten there first, but urbit allows for decentralized financial <a href="https://www.ribbonfarm.com/2010/10/27/warrens-plazas-and-the-edge-of-legibility/">warrens</a> &ndash; private, personally computed conditions and rules for interacting with blockchains, which aren&rsquo;t exposed to the world in the same way as an ETH contract.</p>
<p>Before we begin, a reminder: Bitcoin support has not yet been released! This is preparation for the day it happens. Your ability to issue commands will be via command line. You won&rsquo;t be able to control your full node via the Landscape UI just yet &ndash; this is all dojo, baby &ndash; but when the day comes, you&rsquo;ll be ready to roll. Alternatively, if you pilot a ship under <code>~matwet</code>, you can look forward to service from this full node in the future!</p>
<p>(Many thanks once again to <code>~timluc-miptev</code> for his patient assistance in getting things working on my end.)</p>
<h2 id="hardware">Hardware</h2>
<p><img src="/img/m4v2.jpg" alt=""></p>
<p>Thanks to the suggestion of <code>~naltyc-wornes</code>, I decided to opt for a <a href="https://www.friendlyarm.com/index.php?route=product/product&amp;product_id=268">NanoPi M4V2</a> to run my full node. This little guy is a bit beefier than an RPi, which comes in handy when you&rsquo;re doing something as CPU-intensive as block verification:</p>
<p><img src="/img/m4v2-specs.png" alt=""></p>
<p>Since this is a tiny computer, you would be right to assume that the processor is ARM. The Cortex A72 supports ARMv8, but for whatever reason I believe the OS image I used ended up only supporting ARMv7 &ndash; I unwittingly used a 32-bit OS image, which may be the reason. This did not really get in the way, but if I were doing it over, I would probably go with 64-bit.</p>
<p>The FriendlyARM page linked above includes a few optional peripherals; I got the metal case with SSD hat, as well as the power adapter. The SSD hat is critical &ndash; you will also need a 1TB M.2 SSD to store the currently ~330GB Bitcoin blockchain. Go ahead and grab a MicroSD card and reader for the boot disk as well if you don&rsquo;t already have one.</p>
<p>In addition to the above, I also purchased a 6 foot USB-C cable rated for 5A, and a pivoting camera mount &ndash; the metal case for the M4V2 includes a 1/4&rdquo; screw hole that allows you to mount it. This became more important than I expected, because it turns out that the fan on the NanoPi case is extremely loud! This can be addressed by turning it on its side &ndash; not only does heat dissipate faster, but the mechanical noise of the fan is diminished substantially. In the end, I clamped the Pi to my desk and stood it up behind my monitor.</p>
<p>For a quick breakdown on expenses:</p>
<table>
<thead>
<tr>
<th>Item</th>
<th>Cost</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://www.friendlyarm.com/index.php?route=product/product&amp;product_id=268">NanoPi M4V2</a></td>
<td>$80</td>
</tr>
<tr>
<td>Metal case + SSD hat <a href="https://www.friendlyarm.com/index.php?route=product/product&amp;product_id=268">(add-on)</a></td>
<td>$28</td>
</tr>
<tr>
<td>5V 4A power supply <a href="https://www.friendlyarm.com/index.php?route=product/product&amp;product_id=268">(add on)</a></td>
<td>$9</td>
</tr>
<tr>
<td><a href="https://www.amazon.com/Blue-SN550-1TB-NVMe-Internal/dp/B07YFFX5MD/">1TB WD Blue M.2 SSD</a></td>
<td>$104</td>
</tr>
<tr>
<td><a href="https://www.amazon.com/SanDisk-2-Pack-microSDHC-Memory-2x32GB/dp/B087JCL881/">32GB MicroSD</a></td>
<td>$12</td>
</tr>
<tr>
<td><a href="https://www.amazon.com/gp/product/B08S7BF3CG/">6Ft 5A USB-C (2x)</a></td>
<td>$15</td>
</tr>
<tr>
<td><a href="https://www.amazon.com/gp/product/B07T7KHRV7/">Pivoting camera mount w/ clamp</a></td>
<td>$14</td>
</tr>
<tr>
<td><strong>Total</strong> (not incl. shipping)</td>
<td><strong>$262</strong></td>
</tr>
</tbody>
</table>
<p>Please note that this doesn&rsquo;t need to be quite this expensive &ndash;  you really only need the Pi, power supply, SSD, SSD hat, and SD card, and you may have some of those already lying around. Here is where I also need to thank my lovely girlfriend for buying the NanoPi for me as a birthday gift &ndash; she has always been patiently supportive of me and my weird hobbies she doesn&rsquo;t care about.</p>
<p>In terms of assembly, this was not terribly difficult, though I probably should have looked at the directions since I had to take it apart twice to fix the things I did wrong &ndash; specifically:</p>
<ol>
<li>
<p>I did not realize that the little square sticker-looking thing was heat paste, and was supposed to be placed in the small square indentation above the processor&rsquo;s resting spot</p>
</li>
<li>
<p>I screwed the main board down with regular tiny screws, instead of the included spacers; the tiny screws were for mounting the SSD hat to the spacers</p>
</li>
<li>
<p>I did not initially attach the the wifi antennae to the board &ndash; this is probably easier if you do it before screwing it down. You will need to attach the tiny IPX connectors to the board by pressing them straight down on the designated spots until they click.</p>
</li>
</ol>
<p>One bit that made me nervous was (re)seating the SSD hat &ndash; it requires a bit of effort to push it down firmly enough onto the pins, to the point that I was worried about bending them. This didn&rsquo;t happen despite removing and reseating it a couple of times, though, and I definitely found it easier to do with the board screwed down to the case.</p>
<p>Eventually everything was put together and in working order:</p>
<p><img src="/img/fullnode-desk.jpg" alt=""></p>
<p>I still have this thing on wifi &ndash; I should probably plug it in for the sake of latency, but that feels a little less cool.</p>
<h2 id="the-stack">The stack</h2>
<p>Let&rsquo;s have an overview of the pieces of this system:</p>
<ul>
<li>
<p>There are <a href="https://drive.google.com/drive/folders/1nFyaZ8mnfjuoXtK6gzpxVhyrdyqKtJfC">several OS images</a> available &ndash; I ended up using Lubuntu 16.04, after experimenting briefly with the other available Linux distros. As I mentioned previously, this ended up being a 32-bit image &ndash; this didn&rsquo;t end up preventing me from getting anything working, but it does prevent you from running Urbit on the same device, or allocating more than the provided 4GB of memory.</p>
</li>
<li>
<p><code>bitcoind</code> is the Bitcoin Core daemon, which syncs and checks the blockchain, and performs transactions for you. Running a <code>bitcoind</code> full node makes you an independent node on Bitcoin&rsquo;s network &ndash; you will not need to connect to somebody else&rsquo;s server in order to interact with the network, but rather simply announce your operations to the rest of the network as a peer.</p>
</li>
<li>
<p><code>electrs</code> is an implementation of <a href="https://github.com/spesmilo/electrumx">Electrum Server</a> in the Rust language &ndash; Rust is a relatively new language used for software demanding high performance and strong safety, and is meant to stand in the place of languages like C. The original Electrum and its successor are written in Python, which has significantly higher resource overhead and slower performance. For our purposes, it is a necessary mediator between <code>bitcoind</code> and Urbit&rsquo;s <code>btc-provider</code> application.</p>
</li>
<li>
<p><code>nodejs</code> is a popular Javascript framework commonly used for web development. We are going to be using it as a simple reverse proxy to act as an API for <code>electrs</code>.</p>
</li>
<li>
<p><code>btc-agents</code> is a suite of backend software for Urbit&rsquo;s Bitcoin support. It contains <code>btc-wallet</code>, which manages your Bitcoin wallets, and <code>btc-provider</code>, which communicates with a full node via a ship (yours or someone else&rsquo;s).</p>
</li>
</ul>
<p>The first three should all be running on the same device, in our case the pi &ndash; the last can run on whatever device your ship is on.</p>
<h2 id="plugging-things-in">Plugging things in</h2>
<p>You&rsquo;ll need to flash the SD card with your OS image of choice; I like using <a href="https://www.balena.io/etcher/">balenaEtcher</a> for this purpose, because it&rsquo;s a simple tool that will perform error checking once it&rsquo;s finished copying.</p>
<p>Next, hook up your pi to an ethernet cable and plug it in! You can optionally use a keyboard and monitor, but I just did everything over SSH. Check your router&rsquo;s local network or do a ping scan to determine the IP address assigned to your pi, then connect over SSH with the username <code>pi</code>, password <code>pi</code>.</p>
<h3 id="ssh-config">SSH config</h3>
<p>Once you&rsquo;re connected or plugged in, first things first, let&rsquo;s change that default password!</p>
<div class="window" width="80%">
    <div class="titlebar">
      <div class="buttons">
        <div class="bclose">
        </div>
        <div class="minimize">
        </div>
        <div class="zoom">
        </div>
      </div>
      terminal: ~
    </div>
    <div class="termwin">
      <ul>
        
        
        <li></li>
        
        
        <li>$>&nbsp;passwd</li>
        
        
        <li>&nbsp;</li>
        
        
        <li></li>
        
        
        <li></li>
          
      </ul>
    </div>
  </div>

<p>Give yourself something decent &ndash; this is potentially a high-value device!</p>
<p>Let&rsquo;s change the root password while we&rsquo;re at it (the default is <code>fa</code>):</p>
<div class="window" width="80%">
    <div class="titlebar">
      <div class="buttons">
        <div class="bclose">
        </div>
        <div class="minimize">
        </div>
        <div class="zoom">
        </div>
      </div>
      terminal: ~
    </div>
    <div class="termwin">
      <ul>
        
        
        <li></li>
        
        
        <li>$>&nbsp;sudo&nbsp;passwd&nbsp;root</li>
        
        
        <li>&nbsp;</li>
        
        
        <li></li>
        
        
        <li></li>
          
      </ul>
    </div>
  </div>

<p>Now let&rsquo;s configure SSH pubkey authentication. If you don&rsquo;t have one already, go ahead and <a href="https://www.digitalocean.com/docs/droplets/how-to/add-ssh-keys/create-with-openssh/">generate</a> an SSH key, then on your <strong>local</strong> device like your desktop, run:</p>
<div class="window" width="80%">
    <div class="titlebar">
      <div class="buttons">
        <div class="bclose">
        </div>
        <div class="minimize">
        </div>
        <div class="zoom">
        </div>
      </div>
      terminal: ~
    </div>
    <div class="termwin">
      <ul>
        
        
        <li></li>
        
        
        <li>$>&nbsp;ssh-copy-id&nbsp;pi@nanopi.ip.address.here</li>
        
        
        <li>&nbsp;</li>
        
        
        <li></li>
        
        
        <li></li>
          
      </ul>
    </div>
  </div>

<p>Now, on your pi, run the following:</p>
<div class="window" width="80%">
    <div class="titlebar">
      <div class="buttons">
        <div class="bclose">
        </div>
        <div class="minimize">
        </div>
        <div class="zoom">
        </div>
      </div>
      terminal: ~
    </div>
    <div class="termwin">
      <ul>
        
        
        <li></li>
        
        
        <li>$>&nbsp;sudo&nbsp;nano&nbsp;/etc/ssh/sshd_config</li>
        
        
        <li>&nbsp;</li>
        
        
        <li></li>
        
        
        <li></li>
          
      </ul>
    </div>
  </div>

<p>This will drop you into a text editor with the configuration file for your SSH server opened; find the line that says <code>PasswordAuthentication</code> and change it to <code>no</code>, and find the line that says <code>PubkeyAuthentication</code> and make sure it says <code>yes</code>.</p>
<p>Press <code>ctrl-o</code>, <code>ctrl-x</code> to save and exit. Enter the following at the command line to restart the SSH daemon:</p>
<div class="window" width="80%">
    <div class="titlebar">
      <div class="buttons">
        <div class="bclose">
        </div>
        <div class="minimize">
        </div>
        <div class="zoom">
        </div>
      </div>
      terminal: ~
    </div>
    <div class="termwin">
      <ul>
        
        
        <li></li>
        
        
        <li>$>&nbsp;sudo&nbsp;systemctl&nbsp;restart&nbsp;ssh</li>
        
        
        <li>&nbsp;</li>
        
        
        <li></li>
        
        
        <li></li>
          
      </ul>
    </div>
  </div>

<p>Get back on your other computer, and try connecting via SSH again:</p>
<div class="window" width="80%">
    <div class="titlebar">
      <div class="buttons">
        <div class="bclose">
        </div>
        <div class="minimize">
        </div>
        <div class="zoom">
        </div>
      </div>
      terminal: ~
    </div>
    <div class="termwin">
      <ul>
        
        
        <li></li>
        
        
        <li>$>&nbsp;ssh&nbsp;pi@nanopi.ip.address.here</li>
        
        
        <li>&nbsp;</li>
        
        
        <li></li>
        
        
        <li></li>
          
      </ul>
    </div>
  </div>

<p>You should be dropped right into a terminal without being prompted for the password. Nobody can connect to this pi without your keypair, so make sure to keep it safe.</p>
<p>Let&rsquo;s give our pi a cute name while we&rsquo;re here:</p>
<div class="window" width="80%">
    <div class="titlebar">
      <div class="buttons">
        <div class="bclose">
        </div>
        <div class="minimize">
        </div>
        <div class="zoom">
        </div>
      </div>
      terminal: ~
    </div>
    <div class="termwin">
      <ul>
        
        
        <li></li>
        
        
        <li>$>&nbsp;sudo&nbsp;hostname&nbsp;shrine</li>
        
        
        <li>&nbsp;</li>
        
        
        <li></li>
        
        
        <li></li>
          
      </ul>
    </div>
  </div>

<p>Obviously this can be whatever you want.</p>
<h3 id="port-forwarding">Port forwarding</h3>
<p><code>bitcoind</code> uses TCP port 8332 to communicate with the rest of the network by default &ndash; you will need to forward that port to your pi on your router. This process is specific to your router&rsquo;s model or manufacturer, but it&rsquo;s not very hard &ndash; you can find instructions <a href="https://www.noip.com/support/knowledgebase/general-port-forwarding-guide/">here</a>.</p>
<h3 id="mounting-your-ssd">Mounting your SSD</h3>
<p>If your SSD is already hooked up, you will first need to partition, format, and mount it. Don&rsquo;t worry if you&rsquo;ve never done this before, because it&rsquo;s not difficult. Find the device ID using the following command:</p>
<div class="window" width="80%">
    <div class="titlebar">
      <div class="buttons">
        <div class="bclose">
        </div>
        <div class="minimize">
        </div>
        <div class="zoom">
        </div>
      </div>
      terminal: ~
    </div>
    <div class="termwin">
      <ul>
        
        
        <li></li>
        
        
        <li>$>&nbsp;sudo&nbsp;blkid</li>
        
        
        <li>&nbsp;</li>
        
        
        <li></li>
        
        
        <li></li>
          
      </ul>
    </div>
  </div>

<p>This will list available devices, along with associated attributes. Look for the entry that is a 1TB drive &ndash; in my case, the device was named <code>nvme0n1</code>. Let&rsquo;s go ahead and create a partition:</p>
<div class="window" width="80%">
    <div class="titlebar">
      <div class="buttons">
        <div class="bclose">
        </div>
        <div class="minimize">
        </div>
        <div class="zoom">
        </div>
      </div>
      terminal: ~
    </div>
    <div class="termwin">
      <ul>
        
        
        <li></li>
        
        
        <li>$>&nbsp;sudo&nbsp;fdisk&nbsp;/dev/nvme0n1</li>
        
        
        <li>&nbsp;</li>
        
        
        <li></li>
        
        
        <li></li>
          
      </ul>
    </div>
  </div>

<p>You will be prompted with a menu of options: press <code>p</code> to create a primary partition, then press <code>1</code> to give it a number. Once completed, enter:</p>
<div class="window" width="80%">
    <div class="titlebar">
      <div class="buttons">
        <div class="bclose">
        </div>
        <div class="minimize">
        </div>
        <div class="zoom">
        </div>
      </div>
      terminal: ~
    </div>
    <div class="termwin">
      <ul>
        
        
        <li></li>
        
        
        <li>$>&nbsp;sudo&nbsp;blkid&nbsp;-f</li>
        
        
        <li>&nbsp;</li>
        
        
        <li></li>
        
        
        <li></li>
          
      </ul>
    </div>
  </div>

<p>To view the name of the name partition &ndash; in my case, <code>/dev/nvme0n1p1</code>. Now, let&rsquo;s format the new partition in EXT4 and mount it with the label <code>bitcoin</code>:</p>
<div class="window" width="80%">
    <div class="titlebar">
      <div class="buttons">
        <div class="bclose">
        </div>
        <div class="minimize">
        </div>
        <div class="zoom">
        </div>
      </div>
      terminal: ~
    </div>
    <div class="termwin">
      <ul>
        
        
        <li></li>
        
        
        <li>$>&nbsp;sudo&nbsp;mkfs&nbsp;-t&nbsp;ext4&nbsp;/dev/nvme0n1p1</li>
        
        
        <li>$>&nbsp;sudo&nbsp;mount&nbsp;/dev/nvme0n1p1&nbsp;/mnt/bitcoin</li>
        
        
        <li>&nbsp;</li>
        
        
        <li></li>
        
        
        <li></li>
          
      </ul>
    </div>
  </div>

<p>You&rsquo;re now able to <code>cd</code> into your SSD just like any other directory.</p>
<p>Let&rsquo;s make our pi automatically mount the partition on startup by editing the <code>fstab</code> file.</p>
<div class="window" width="80%">
    <div class="titlebar">
      <div class="buttons">
        <div class="bclose">
        </div>
        <div class="minimize">
        </div>
        <div class="zoom">
        </div>
      </div>
      terminal: ~
    </div>
    <div class="termwin">
      <ul>
        
        
        <li></li>
        
        
        <li>$>&nbsp;sudo&nbsp;nano&nbsp;/etc/fstab</li>
        
        
        <li>&nbsp;</li>
        
        
        <li></li>
        
        
        <li></li>
          
      </ul>
    </div>
  </div>

<p>Enter a new line at the end, and use the following:</p>
<pre><code>/dev/nvme0n1p1 /mnt/bitcoin ext4 defaults,auto,users,rw,nofail 0 0
</code></pre><p>Reboot your pi to test it; you should be able to immediately interact with <code>/mnt/bitcoin</code> once you&rsquo;re back in a terminal.</p>
<h3 id="bitcoind">bitcoind</h3>
<p>Next up, let&rsquo;s get the requisite software installed or downloaded. Let&rsquo;s grab <code>bitcoin</code> first:</p>
<div class="window" width="80%">
    <div class="titlebar">
      <div class="buttons">
        <div class="bclose">
        </div>
        <div class="minimize">
        </div>
        <div class="zoom">
        </div>
      </div>
      terminal: ~
    </div>
    <div class="termwin">
      <ul>
        
        
        <li></li>
        
        
        <li>$>&nbsp;sudo&nbsp;apt&nbsp;install&nbsp;curl</li>
        
        
        <li>$>&nbsp;curl&nbsp;https://bitcoin.org/bin/bitcoin-core-0.21.0/bitcoin-0.21.0-arm-linux-gnueabihf.tar.gz&nbsp;|&nbsp;tar&nbsp;xvz</li>
        
        
        <li>&nbsp;</li>
        
        
        <li></li>
        
        
        <li></li>
          
      </ul>
    </div>
  </div>

<p>(Note that this URL is for 32-bit ARM binaries &ndash; 64-bit binary download links are available <a href="https://bitcoin.org/en/download">here</a>.)</p>
<p>Let&rsquo;s copy the contents into <code>/usr/local/bin</code> for ease of access:</p>
<div class="window" width="80%">
    <div class="titlebar">
      <div class="buttons">
        <div class="bclose">
        </div>
        <div class="minimize">
        </div>
        <div class="zoom">
        </div>
      </div>
      terminal: ~
    </div>
    <div class="termwin">
      <ul>
        
        
        <li></li>
        
        
        <li>$>&nbsp;sudo&nbsp;cp&nbsp;-a&nbsp;bitcoin-0.21.0/bin/.&nbsp;/usr/local/bin</li>
        
        
        <li>&nbsp;</li>
        
        
        <li></li>
        
        
        <li></li>
          
      </ul>
    </div>
  </div>

<p>This will come in handy so we don&rsquo;t have to type the full path to the binaries in the future. Test it out:</p>
<div class="window" width="80%">
    <div class="titlebar">
      <div class="buttons">
        <div class="bclose">
        </div>
        <div class="minimize">
        </div>
        <div class="zoom">
        </div>
      </div>
      terminal: ~
    </div>
    <div class="termwin">
      <ul>
        
        
        <li></li>
        
        
        <li>$>&nbsp;bitcoind</li>
        
        
        <li>&nbsp;</li>
        
        
        <li></li>
        
        
        <li></li>
          
      </ul>
    </div>
  </div>

<p>This should print the help menu for the <code>bitcoind</code> binary.</p>
<p>Let&rsquo;s go ahead and get started on syncing the blockchain &ndash; this will take a <em>long</em> time, at least a day &ndash; you will have to download 300GB+ of data and build an index. We&rsquo;ll do this in a tmux window so we can leave it in on the background while we work:</p>
<div class="window" width="80%">
    <div class="titlebar">
      <div class="buttons">
        <div class="bclose">
        </div>
        <div class="minimize">
        </div>
        <div class="zoom">
        </div>
      </div>
      terminal: ~
    </div>
    <div class="termwin">
      <ul>
        
        
        <li></li>
        
        
        <li>$>&nbsp;sudo&nbsp;apt&nbsp;install&nbsp;tmux</li>
        
        
        <li>$>&nbsp;tmux&nbsp;new&nbsp;-s&nbsp;btc</li>
        
        
        <li>$>&nbsp;mkdir&nbsp;/mnt/bitcoin/BTC</li>
        
        
        <li>$>&nbsp;bitcoind&nbsp;-datadir=/mnt/bitcoin/BTC&nbsp;-blockfilterindex&nbsp;-txindex&nbsp;-server</li>
        
        
        <li>&nbsp;</li>
        
        
        <li></li>
        
        
        <li></li>
          
      </ul>
    </div>
  </div>

<p>Press <code>ctrl-b</code>, <code>d</code> to detach from your tmux window. You can reattach with:</p>
<div class="window" width="80%">
    <div class="titlebar">
      <div class="buttons">
        <div class="bclose">
        </div>
        <div class="minimize">
        </div>
        <div class="zoom">
        </div>
      </div>
      terminal: ~
    </div>
    <div class="termwin">
      <ul>
        
        
        <li></li>
        
        
        <li>$>&nbsp;tmux&nbsp;a&nbsp;-t&nbsp;btc</li>
        
        
        <li>&nbsp;</li>
        
        
        <li></li>
        
        
        <li></li>
          
      </ul>
    </div>
  </div>

<p>You can check on its progress periodically with this command:</p>
<div class="window" width="80%">
    <div class="titlebar">
      <div class="buttons">
        <div class="bclose">
        </div>
        <div class="minimize">
        </div>
        <div class="zoom">
        </div>
      </div>
      terminal: ~
    </div>
    <div class="termwin">
      <ul>
        
        
        <li></li>
        
        
        <li>$>&nbsp;bitcoin-cli&nbsp;-datadir=/mnt/bitcoin/BTC&nbsp;getblockcount</li>
        
        
        <li>&nbsp;</li>
        
        
        <li></li>
        
        
        <li></li>
          
      </ul>
    </div>
  </div>

<p>Compare the number it prints to the &lsquo;Height&rsquo; on <a href="https://www.blockchain.com/btc/blocks">this</a> web page &ndash; this is the current block height of the BTC blockchain. Once the two numbers are equal, you are fully synced.</p>
<h3 id="rust--electrs">Rust &amp; electrs</h3>
<p>Next up is Rust:</p>
<div class="window" width="80%">
    <div class="titlebar">
      <div class="buttons">
        <div class="bclose">
        </div>
        <div class="minimize">
        </div>
        <div class="zoom">
        </div>
      </div>
      terminal: ~
    </div>
    <div class="termwin">
      <ul>
        
        
        <li></li>
        
        
        <li>$>&nbsp;curl&nbsp;--proto&nbsp;'=https'&nbsp;--tlsv1.2&nbsp;-sSf&nbsp;https://sh.rustup.rs&nbsp;|&nbsp;sh</li>
        
        
        <li>&nbsp;</li>
        
        
        <li></li>
        
        
        <li></li>
          
      </ul>
    </div>
  </div>

<p>This will run the installer script for Rust &ndash; <strong>don&rsquo;t</strong> slam through the defaults, we need to specify the architecture. Press &lsquo;2&rsquo; at the first prompt, then enter the host triple <code>armv7-unknown-linux-gnueabihf</code>, and choose <code>stable</code> &amp; <code>default</code>.</p>
<p>Now let&rsquo;s download <code>electrs</code> and compile it:</p>
<div class="window" width="80%">
    <div class="titlebar">
      <div class="buttons">
        <div class="bclose">
        </div>
        <div class="minimize">
        </div>
        <div class="zoom">
        </div>
      </div>
      terminal: ~
    </div>
    <div class="termwin">
      <ul>
        
        
        <li></li>
        
        
        <li>$>&nbsp;sudo&nbsp;apt&nbsp;install&nbsp;git&nbsp;cargo</li>
        
        
        <li>$>&nbsp;source&nbsp;$HOME/.cargo/env</li>
        
        
        <li>$>&nbsp;git&nbsp;clone&nbsp;https://github.com/romanz/electrs</li>
        
        
        <li>$>&nbsp;cd&nbsp;electrs</li>
        
        
        <li>$>&nbsp;sudo&nbsp;apt&nbsp;update&nbsp;&&&nbsp;sudo&nbsp;apt&nbsp;install&nbsp;clang&nbsp;cmake&nbsp;build-essential&nbsp;</li>
        
        
        <li>$>&nbsp;cargo&nbsp;build&nbsp;--locked&nbsp;--release</li>
        
        
        <li>&nbsp;</li>
        
        
        <li></li>
        
        
        <li></li>
          
      </ul>
    </div>
  </div>

<p>If all goes well, you should have some binaries waiting for you. Test it out:</p>
<div class="window" width="80%">
    <div class="titlebar">
      <div class="buttons">
        <div class="bclose">
        </div>
        <div class="minimize">
        </div>
        <div class="zoom">
        </div>
      </div>
      terminal: ~
    </div>
    <div class="termwin">
      <ul>
        
        
        <li></li>
        
        
        <li>$>&nbsp;./target/release/electrs&nbsp;--help</li>
        
        
        <li>&nbsp;</li>
        
        
        <li></li>
        
        
        <li></li>
          
      </ul>
    </div>
  </div>

<p>This should print the help menu for <code>electrs</code>.</p>
<h3 id="node">Node</h3>
<p>Finally, <code>nodejs</code> and <code>npm</code> &ndash; we&rsquo;re going to install it from the Node site instead of the repos, because they tend to be a bit out of date. Go find the latest ARMv7 link <a href="https://nodejs.org/en/download/">here</a>.</p>
<div class="window" width="80%">
    <div class="titlebar">
      <div class="buttons">
        <div class="bclose">
        </div>
        <div class="minimize">
        </div>
        <div class="zoom">
        </div>
      </div>
      terminal: ~
    </div>
    <div class="termwin">
      <ul>
        
        
        <li></li>
        
        
        <li>$>&nbsp;sudo&nbsp;apt&nbsp;install&nbsp;wget</li>
        
        
        <li>$>&nbsp;wget&nbsp;-c&nbsp;https://nodejs.org/dist/v14.16.0/node-v14.16.0-linux-armv7l.tar.xz</li>
        
        
        <li>$>&nbsp;tar&nbsp;xvf&nbsp;node-v14.16.0-linux-armv7l.tar.xz</li>
        
        
        <li>$>&nbsp;cd&nbsp;node-v14.16.0-linux-armv7l</li>
        
        
        <li>$>&nbsp;sudo&nbsp;cp&nbsp;-R&nbsp;*&nbsp;/usr/local/</li>
        
        
        <li>$></li>
        
        
        <li>&nbsp;</li>
        
        
        <li></li>
        
        
        <li></li>
          
      </ul>
    </div>
  </div>

<p>You can test to make sure it&rsquo;s installed:</p>
<div class="window" width="80%">
    <div class="titlebar">
      <div class="buttons">
        <div class="bclose">
        </div>
        <div class="minimize">
        </div>
        <div class="zoom">
        </div>
      </div>
      terminal: ~
    </div>
    <div class="termwin">
      <ul>
        
        
        <li></li>
        
        
        <li>$>&nbsp;npm&nbsp;-v</li>
        
        
        <li>&nbsp;</li>
        
        
        <li></li>
        
        
        <li></li>
          
      </ul>
    </div>
  </div>

<p>This will print the <code>npm</code> version number.</p>
<h3 id="rpc-utils">RPC utils</h3>
<p><code>~timluc-miptev</code> has put together some instructions and scripts that would have saved me a <em>lot</em> of time had I seen them before spending a week piecing things together myself; go ahead and clone his repo and check out the <a href="https://github.com/timlucmiptev/urbit-bitcoin-rpc">readme</a>:</p>
<div class="window" width="80%">
    <div class="titlebar">
      <div class="buttons">
        <div class="bclose">
        </div>
        <div class="minimize">
        </div>
        <div class="zoom">
        </div>
      </div>
      terminal: ~
    </div>
    <div class="termwin">
      <ul>
        
        
        <li></li>
        
        
        <li>$>&nbsp;git&nbsp;clone&nbsp;https://github.com/timlucmiptev/urbit-bitcoin-rpc</li>
        
        
        <li>$>&nbsp;cd&nbsp;urbit-bitcoin-rpc</li>
        
        
        <li>$>&nbsp;cp&nbsp;bitcoin.conf&nbsp;/mnt/bitcoin/BTC/bitcoin.conf</li>
        
        
        <li>&nbsp;</li>
        
        
        <li></li>
        
        
        <li></li>
          
      </ul>
    </div>
  </div>

<p>Now let&rsquo;s edit the script used to start this chain of software:</p>
<div class="window" width="80%">
    <div class="titlebar">
      <div class="buttons">
        <div class="bclose">
        </div>
        <div class="minimize">
        </div>
        <div class="zoom">
        </div>
      </div>
      terminal: ~
    </div>
    <div class="termwin">
      <ul>
        
        
        <li></li>
        
        
        <li>$>&nbsp;nano&nbsp;mainnet-start.sh</li>
        
        
        <li>&nbsp;</li>
        
        
        <li></li>
        
        
        <li></li>
          
      </ul>
    </div>
  </div>

<p>Edit the first non-commented-out line, so that it says:</p>
<pre><code>DRIVE=/mnt/bitcoin
</code></pre><p>Setting this variable will tell the rest of the script where to find your bitcoin data.</p>
<h2 id="spinning-up">Spinning up</h2>
<p>Now that everything is installed and in place, all you need to do is run the <code>mainnet-start</code> script. First, kill your existing <code>bitcoind</code> process by opening your tmux window:</p>
<div class="window" width="80%">
    <div class="titlebar">
      <div class="buttons">
        <div class="bclose">
        </div>
        <div class="minimize">
        </div>
        <div class="zoom">
        </div>
      </div>
      terminal: ~
    </div>
    <div class="termwin">
      <ul>
        
        
        <li></li>
        
        
        <li>$>&nbsp;tmux&nbsp;a&nbsp;-t&nbsp;btc</li>
        
        
        <li>&nbsp;</li>
        
        
        <li></li>
        
        
        <li></li>
          
      </ul>
    </div>
  </div>

<p>&hellip;and pressing <code>ctrl-c</code>. It will take a few moments to shut down. Enter <code>exit</code> to close the window.</p>
<p>Now execute the startup script:</p>
<div class="window" width="80%">
    <div class="titlebar">
      <div class="buttons">
        <div class="bclose">
        </div>
        <div class="minimize">
        </div>
        <div class="zoom">
        </div>
      </div>
      terminal: ~
    </div>
    <div class="termwin">
      <ul>
        
        
        <li></li>
        
        
        <li>$>&nbsp;cd&nbsp;~/urbit-bitcoin-rpc</li>
        
        
        <li>$>&nbsp;npm&nbsp;install&nbsp;express</li>
        
        
        <li>$>&nbsp;./mainnet-start.sh</li>
        
        
        <li>&nbsp;</li>
        
        
        <li></li>
        
        
        <li></li>
          
      </ul>
    </div>
  </div>

<p>You will see some debug output churn for a while &ndash; once you see yellow text that reads <code>Electrum RPC server running on 127.0.0.1:50001</code>, that means you&rsquo;re good to go:</p>
<p><img src="/img/electrs-complete.jpg" alt=""></p>
<p>You can test <code>electrs</code> and the <code>node</code> proxy by curling a wallet query:</p>
<div class="window" width="80%">
    <div class="titlebar">
      <div class="buttons">
        <div class="bclose">
        </div>
        <div class="minimize">
        </div>
        <div class="zoom">
        </div>
      </div>
      terminal: ~
    </div>
    <div class="termwin">
      <ul>
        
        
        <li></li>
        
        
        <li>$>&nbsp;curl&nbsp;http://localhost:50002/addresses/info/bc1qm7cegwfd0pvv9ypvz5nhstage00xkxevtrpshc</li>
        
        
        <li>&nbsp;</li>
        
        
        <li></li>
        
        
        <li></li>
          
      </ul>
    </div>
  </div>

<p>This should print some JSON with info about the address in the URL.</p>
<h2 id="urbit-installation">Urbit installation</h2>
<p>Final steps! Let&rsquo;s spin up a fakezod, clone <code>~timluc</code>'s repo and do this:</p>
<div class="window" width="80%">
    <div class="titlebar">
      <div class="buttons">
        <div class="bclose">
        </div>
        <div class="minimize">
        </div>
        <div class="zoom">
        </div>
      </div>
      terminal: ~
    </div>
    <div class="termwin">
      <ul>
        
        
        <li></li>
        
        
        <li>$>&nbsp;urbit&nbsp;-F&nbsp;zod</li>
        
        
        <li>&nbsp;</li>
        
        
        <li></li>
        
        
        <li></li>
          
      </ul>
    </div>
  </div>

<p>Once booted, mount clay:</p>
<div class="window">
    <div class="titlebar">
      <div class="buttons">
        <div class="bclose">
        </div>
        <div class="minimize">
        </div>
        <div class="zoom">
        </div>
      </div>
      urbit - sampel-palnet
    </div>
    <div class="termdojo">
      <ul>
        
        
        <li></li>
        
        
        <li>~sampel-palnet:dojo>&nbsp;|mount&nbsp;%</li>
        
        
        <li>&nbsp;</li>
        
        
        <li></li>
        
        
        <li></li>
          
      </ul>
    </div>
  </div>

<p>Open another terminal now:</p>
<div class="window" width="80%">
    <div class="titlebar">
      <div class="buttons">
        <div class="bclose">
        </div>
        <div class="minimize">
        </div>
        <div class="zoom">
        </div>
      </div>
      terminal: ~
    </div>
    <div class="termwin">
      <ul>
        
        
        <li></li>
        
        
        <li>$>&nbsp;git&nbsp;clone&nbsp;https://github.com/timlucmiptev/btc-agents</li>
        
        
        <li>$>&nbsp;cd&nbsp;btc-agents</li>
        
        
        <li>$>&nbsp;./install.sh&nbsp;/home/[yourname]/zod</li>
        
        
        <li>&nbsp;</li>
        
        
        <li></li>
        
        
        <li></li>
          
      </ul>
    </div>
  </div>

<p>Now let&rsquo;s let our ship know about the new files:</p>
<div class="window">
    <div class="titlebar">
      <div class="buttons">
        <div class="bclose">
        </div>
        <div class="minimize">
        </div>
        <div class="zoom">
        </div>
      </div>
      urbit - sampel-palnet
    </div>
    <div class="termdojo">
      <ul>
        
        
        <li></li>
        
        
        <li>~sampel-palnet:dojo>&nbsp;|commit&nbsp;%home</li>
        
        
        <li>&nbsp;</li>
        
        
        <li></li>
        
        
        <li></li>
          
      </ul>
    </div>
  </div>

<p>You should see the dojo print all the new file names. Continuing:</p>
<div class="window">
    <div class="titlebar">
      <div class="buttons">
        <div class="bclose">
        </div>
        <div class="minimize">
        </div>
        <div class="zoom">
        </div>
      </div>
      urbit - sampel-palnet
    </div>
    <div class="termdojo">
      <ul>
        
        
        <li></li>
        
        
        <li>~sampel-palnet:dojo>&nbsp;=provider&nbsp;~zod</li>
        
        
        <li>~sampel-palnet:dojo>&nbsp;=network&nbsp;%main</li>
        
        
        <li>~sampel-palnet:dojo>&nbsp;|start&nbsp;%btc-wallet</li>
        
        
        <li>~sampel-palnet:dojo>&nbsp;|start&nbsp;%btc-provider</li>
        
        
        <li>~sampel-palnet:dojo>&nbsp;:btc-wallet|command&nbsp;[%set-provider&nbsp;provider]</li>
        
        
        <li>~sampel-palnet:dojo>&nbsp;:btc-provider|command&nbsp;[%set-credentials&nbsp;api-url='http://nanopi.ip.address.here:50002'&nbsp;network]</li>
        
        
        <li>&nbsp;</li>
        
        
        <li></li>
        
        
        <li></li>
          
      </ul>
    </div>
  </div>

<p>You should start seeing a spinning <code>http</code> indicator at the prompt, and eventually yellow text announcing new blocks!</p>
<p>Let&rsquo;s keep using the test commands from the readme:</p>
<div class="window">
    <div class="titlebar">
      <div class="buttons">
        <div class="bclose">
        </div>
        <div class="minimize">
        </div>
        <div class="zoom">
        </div>
      </div>
      urbit - sampel-palnet
    </div>
    <div class="termdojo">
      <ul>
        
        
        <li></li>
        
        
        <li>~sampel-palnet:dojo>&nbsp;=fprint&nbsp;[%4&nbsp;0xbeef.dead]</li>
        
        
        <li>dojo>&nbsp;=xpubmain&nbsp;'zpub6rFR7y4Q2AijBEqTUquhVz398htDFrtymD9xYYfG1m4wAcvPhXNfE3EfH1r1ADqtfSdVCToUG868RvUUkgDKf31mGDtKsAYz2oz2AGutZYs'</li>
        
        
        <li>dojo>&nbsp;:btc-wallet|command&nbsp;[%add-wallet&nbsp;xpubmain&nbsp;fprint&nbsp;~&nbsp;[~&nbsp;8]&nbsp;[~&nbsp;1]]</li>
        
        
        <li>dojo>&nbsp;.^((unit&nbsp;@ud)&nbsp;%gx&nbsp;/=btc-wallet=/balance/[xpubmain]/noun)</li>
        
        
        <li>&nbsp;</li>
        
        
        <li></li>
        
        
        <li></li>
          
      </ul>
    </div>
  </div>

<p>This should print out the balance of the test wallet (which is 0).</p>
<p><img src="/img/btc-complete.png" alt=""></p>
<p>You&rsquo;ve made it! In the future, you should only need to update the existing software on this pi to make it a provider for your ship.</p>
<p>Recall that this is still pre-release software! You won&rsquo;t be able to control your wallets from within Landscape yet. You can modify the above commands, or check out the <a href="https://github.com/timlucmiptev/btc-agents/tree/master/sur">source code</a> to get a better idea of what you can do from the dojo.</p>
<h2 id="conclusion">Conclusion</h2>
<p>If you lose power or restart your pi, you can restart the full node stack by starting the <code>mainnet-start.sh</code> script. I tried putzing around with systemd modules but just ended up breaking stuff; these will probably be part of a future iteration anyway.</p>
<p>In all, this process took me about three weeks to complete (mostly dragged out by tinkering on weekends and a couple of mishaps that required re-indexing). Knowing what I know now, it would probably take a couple of days to start over from scratch, mostly taken up by downloading and indexing 300+ GB of blockchain &ndash; if you already have a copy, this shouldn&rsquo;t take more than an afternoon. Hopefully my stumbles will help you avoid my mistakes.</p>
<h2 id="external-links">External links</h2>
<ul>
<li>
<p><a href="https://grants.urbit.org/bounties/2056919898-bitcoin-full-node-provider-and-wallet">Bitcoin Full Node Provider and Wallet bounty</a></p>
</li>
<li>
<p><a href="https://github.com/timlucmiptev/btc-agents">~timluc-miptev&rsquo;s btc-agents repo</a></p>
</li>
<li>
<p><a href="https://github.com/timlucmiptev/urbit-bitcoin-rpc">btc-agents dependencies and scripts repo</a></p>
</li>
<li>
<p><a href="https://github.com/romanz/electrs">Electrs repo</a></p>
</li>
<li>
<p><a href="http://wiki.friendlyarm.com/wiki/index.php/NanoPi_M4V2">M4V2 documentation wiki</a></p>
</li>
<li>
<p><a href="https://github.com/kdmukai/raspi4_bitcoin_node_tutorial">RPi4 full node tutorial</a></p>
</li>
</ul>
<hr>
<p><em>This post is also available on Urbit, where you can post comments. Join <a href="web+urbitgraph://group/~matwet/networked-subject/">~matwet/networked-subject</a> and open the Networked Subject notebook.</em></p>
]]></content>
		</item>
		
		<item>
			<title>Easy Urbit TLS with Caddy</title>
			<link>https://subject.network/posts/caddyserver-urbit-tls/</link>
			<pubDate>Tue, 26 Jan 2021 19:22:55 -0600</pubDate>
			
			<guid>https://subject.network/posts/caddyserver-urbit-tls/</guid>
			<description>One of the first tutorials written for this site was a rundown on setting up an https reverse proxy for your Urbit using Nginx and Letsencrypt. Nginx and LE are fantastic pieces of software, but steps involved may seem a little intimidating if you&amp;rsquo;ve never set up a web server before.
In the last couple of weeks, a few people around the network (thanks ~silsyn-wathep!) have suggested using Caddy (alt. Caddyserver), a very lightweight and fast HTTP server suite.</description>
			<content type="html"><![CDATA[<p><img src="/img/caddyheader.gif" alt=""></p>
<p>One of the first tutorials written for this site was a <a href="/posts/urbit-nginx-letsencrypt/">rundown</a> on setting up an https reverse proxy for your Urbit using Nginx and Letsencrypt. Nginx and LE are fantastic pieces of software, but steps involved may seem a little intimidating if you&rsquo;ve never set up a web server before.</p>
<p>In the last couple of weeks, a few people around the network (thanks <code>~silsyn-wathep</code>!) have suggested using <a href="https://caddyserver.com/">Caddy</a> (alt. Caddyserver), a very lightweight and fast HTTP server suite. A big bonus with Caddy is that it handles all the TLS configuration in the background &ndash; you don&rsquo;t have to set up Letsencrypt manually.</p>
<p>I&rsquo;ve been trying it out, and I love it; it&rsquo;s a huge timesaver when I&rsquo;m throwing together a ship on a server. I would strongly recommend it, and will probably move towards using it exclusively in the future. This process should only take you about fifteen minutes total, and once you&rsquo;ve done it once, even less than that in the future.</p>
<p>This tutorial assumes you are using Ubuntu. If you are using another distro or OS, the instructions should be the same, minus the installation of Caddy. You can consult the official installation documentation <a href="https://caddyserver.com/docs/install">here</a>.</p>
<h2 id="preparation">Preparation</h2>
<p>In order to make use of TLS, you will need a domain name to point at your server. Go to your registrar or host and create an <code>A</code> record pointing at the IP address of the server or PC you want to use &ndash; for example, create an <code>A</code> record for <code>sampel-palnet.mydomain.io</code>, which directs to <code>1.2.3.4</code>. This should propagate quickly if the primary domain is not brand-new.</p>
<p>If you are using a home PC like me, go ahead and set up <a href="https://www.noip.com/support/knowledgebase/general-port-forwarding-guide/">port forwarding</a> rules for ports 80 and 443. You will need to set your router to forward those ports to the computer hosting your ship &ndash; assign a static private IP to that computer as well if you haven&rsquo;t already.</p>
<p>If you are using a hosted server, like <a href="/posts/urbit-nginx-letsencrypt/">DigitalOcean</a> or <a href="/posts/free-cloud-oracle/">Oracle Cloud</a>, make sure your firewall has ingress rules for ports 80 and 443.</p>
<p>Go ahead and <a href="https://urbit.org/using/install/">launch your ship</a> if you haven&rsquo;t already. Do not use the <code>setcap</code> command that gives it low port privileges &ndash; we want it to bind to port 8080 by default. Navigate to <code>your.ip.address.here:8080</code> in your browser and make sure you can reach your ship.</p>
<h2 id="installation">Installation</h2>
<p>Let&rsquo;s proceed; you will need to add the Caddy repos to your computer so you can install it and update it automatically in the future. Enter the following commands &ndash; the first installs requisite software if you don&rsquo;t have it already, the second imports the key for the software repository, and the third adds the repository itself to your repo list.</p>
<div class="window" width="80%">
    <div class="titlebar">
      <div class="buttons">
        <div class="bclose">
        </div>
        <div class="minimize">
        </div>
        <div class="zoom">
        </div>
      </div>
      terminal: ~/urbit
    </div>
    <div class="termwin">
      <ul>
        
        
        <li></li>
        
        
        <li>$>&nbsp;sudo&nbsp;apt&nbsp;install&nbsp;-y&nbsp;debian-keyring&nbsp;debian-archive-keyring&nbsp;apt-transport-https</li>
        
        
        <li>$>&nbsp;curl&nbsp;-1sLf&nbsp;'https://dl.cloudsmith.io/public/caddy/stable/cfg/gpg/gpg.155B6D79CA56EA34.key'&nbsp;|&nbsp;sudo&nbsp;apt-key&nbsp;add&nbsp;-</li>
        
        
        <li>$>&nbsp;curl&nbsp;-1sLf&nbsp;'https://dl.cloudsmith.io/public/caddy/stable/cfg/setup/config.deb.txt?distro=debian&version=any-version'&nbsp;|&nbsp;sudo&nbsp;tee&nbsp;-a&nbsp;/etc/apt/sources.list.d/caddy-stable.list</li>
        
        
        <li>&nbsp;</li>
        
        
        <li>&nbsp;</li>
        
        
        <li></li>
          
      </ul>
    </div>
  </div>

<p>Now let&rsquo;s install Caddy and give it port 80 privileges:</p>
<div class="window" width="80%">
    <div class="titlebar">
      <div class="buttons">
        <div class="bclose">
        </div>
        <div class="minimize">
        </div>
        <div class="zoom">
        </div>
      </div>
      terminal: ~/urbit
    </div>
    <div class="termwin">
      <ul>
        
        
        <li></li>
        
        
        <li>$>&nbsp;sudo&nbsp;apt&nbsp;update&nbsp;&&&nbsp;sudo&nbsp;apt&nbsp;install&nbsp;caddy</li>
        
        
        <li>$>&nbsp;sudo&nbsp;setcap&nbsp;'cap_net_bind_service=+ep'&nbsp;/usr/bin/caddy</li>
        
        
        <li>&nbsp;</li>
        
        
        <li>&nbsp;</li>
        
        
        <li></li>
          
      </ul>
    </div>
  </div>

<h2 id="configuration">Configuration</h2>
<p>Configuration is where Caddy really shines; if you&rsquo;ve seen the walls of text in the Nginx tutorial, this will be a breath of fresh air.</p>
<p>Nagivate to your home directory and create a text file called <code>Caddyfile</code>:</p>
<div class="window" width="80%">
    <div class="titlebar">
      <div class="buttons">
        <div class="bclose">
        </div>
        <div class="minimize">
        </div>
        <div class="zoom">
        </div>
      </div>
      terminal: ~/urbit
    </div>
    <div class="termwin">
      <ul>
        
        
        <li></li>
        
        
        <li>$>&nbsp;cd</li>
        
        
        <li>$>&nbsp;nano&nbsp;Caddyfile</li>
        
        
        <li>&nbsp;</li>
        
        
        <li>&nbsp;</li>
        
        
        <li></li>
          
      </ul>
    </div>
  </div>

<p>In <code>nano</code>, enter the following two lines, adjusting for your desired domain:</p>
<pre><code>sampel-palnet.mydomain.io
reverse_proxy 127.0.0.1:8080
</code></pre><p>That&rsquo;s literally all you have to do &ndash; how cool is that? Press <code>ctrl-o</code>, <code>ctrl-x</code> to save and exit.</p>
<h2 id="execution">Execution</h2>
<p>Now let&rsquo;s run the server and make sure it works. There are two commands that will launch Caddy &ndash; <code>caddy run</code> will launch it in the foreground. We will do this for the first go-round:</p>
<div class="window" width="80%">
    <div class="titlebar">
      <div class="buttons">
        <div class="bclose">
        </div>
        <div class="minimize">
        </div>
        <div class="zoom">
        </div>
      </div>
      terminal: ~/urbit
    </div>
    <div class="termwin">
      <ul>
        
        
        <li></li>
        
        
        <li>$>&nbsp;caddy&nbsp;run</li>
        
        
        <li>&nbsp;</li>
        
        
        <li>&nbsp;</li>
        
        
        <li></li>
          
      </ul>
    </div>
  </div>

<p>Caddy should automatically generate TLS certificates using Letsencrypt, and once it has successfully tested the connection, it will be up and running!</p>
<p>Press <code>ctrl-c</code> to stop the Caddy process. Let&rsquo;s run it again, this time in the background:</p>
<div class="window" width="80%">
    <div class="titlebar">
      <div class="buttons">
        <div class="bclose">
        </div>
        <div class="minimize">
        </div>
        <div class="zoom">
        </div>
      </div>
      terminal: ~/urbit
    </div>
    <div class="termwin">
      <ul>
        
        
        <li></li>
        
        
        <li>$>&nbsp;caddy&nbsp;start&nbsp;--config&nbsp;~/Caddyfile</li>
        
        
        <li>&nbsp;</li>
        
        
        <li>&nbsp;</li>
        
        
        <li></li>
          
      </ul>
    </div>
  </div>

<p>If you restart Caddy in the future, you will need to use this command to point Caddy at the configuration file you generated. You can turn off Caddy at any time with <code>caddy stop</code>.</p>
<p>If you&rsquo;re comfortable with it, you can also add a <code>systemd</code> service to <a href="https://github.com/caddyserver/dist/tree/master/init">automatically run Caddy</a>. Make sure the user running the service can read your <code>Caddyfile</code>!</p>
<p>One last note &ndash; if you&rsquo;re using Cloudflare, make sure you set your TLS on Cloudflare to &ldquo;Full (strict)&rdquo;, or your site will not be connectable. This is an issue with Caddy that manifests as &ldquo;too many redirect&rdquo; errors, but it&rsquo;s a simple fix.</p>
<hr>
<p><em>This post is also available on Urbit, where you can post comments. Join <a href="web+urbitgraph://group/~matwet/networked-subject/">~matwet/networked-subject</a> and open the Networked Subject notebook.</em></p>
]]></content>
		</item>
		
		<item>
			<title>A conversation about Tacen with ~mister-todteg</title>
			<link>https://subject.network/posts/tacen-mister-todteg/</link>
			<pubDate>Sun, 24 Jan 2021 11:35:41 -0600</pubDate>
			
			<guid>https://subject.network/posts/tacen-mister-todteg/</guid>
			<description>A sentiment you&amp;rsquo;ll frequently come across is that the community on Urbit is very high-quality, and it&amp;rsquo;s a great place to meet friendly and interesting people. ~mister-todteg is an example of both &amp;ndash; his company Tacen is developing a semi-decentralized noncustodial crypto exchange platform, and he was kind enough to spend a couple of days telling me about it over chat. In this interview we chat about him, the details of his company, his personal history with Urbit, and his vision for the possibility of future integration between the two.</description>
			<content type="html"><![CDATA[<p><img src="/img/tacen-header.png" alt=""></p>
<p>A sentiment you&rsquo;ll frequently come across is that the community on Urbit is very high-quality, and it&rsquo;s a great place to meet friendly and interesting people. <code>~mister-todteg</code> is an example of both &ndash; his company <a href="https://tacen.com/">Tacen</a> is developing a semi-decentralized noncustodial crypto exchange platform, and he was kind enough to spend a couple of days telling me about it over chat. In this interview we chat about him, the details of his company, his personal history with Urbit, and his vision for the possibility of future integration between the two.</p>
<p>You can find ~mister around the network, or in one of his public groups: <code>~mister-todteg/tacen</code>, for info and discussion about his company, or <code>~mister-todteg/melody-mars</code>, a group for sharing pre-1990 pop music from Europe and Asia.</p>
<hr>
<p><img src="/sigils/sitful-chat.svg#floatsigil" alt="">: Thank you for doing this with me; so, you&rsquo;re ~mister-todteg, and we&rsquo;re here mostly to talk about your startup, a decentralized cryptocurrency exchange. I&rsquo;m sure a lot of people reading this have seen you around the network &ndash; how do you introduce yourself at parties, what was your story before your current venture, and what&rsquo;s your story with urbit?</p>
<blockquote>
<p><img src="/sigils/mister-todteg.svg#floatsigil" alt="">: Thank you for having me! Well, I don&rsquo;t get invited to parties, but if I do crash one, I tell them I worked in defense sector for 9.5 years. Usually people have either curious face or they cringe. I always get a kick out of that.</p>
</blockquote>
<blockquote>
<p>Went to Georgia Tech and studied Aerospace Engineering. It was pre-9/11 so class was small - around 100 or so that year. I played a lot of MMO but worked my ass off to finish school. Didn&rsquo;t really know what to do so got into PhD program, only to find out that it would take 5 years. So I got my masters degree, thanked the adviser, and left. Wrote software - like pilot in the loop simulation, and later real time physics sim of rotor blades and calculation of aeroelastic effects on fuselage and such. I once sat through 18 hour meeting with DARPA folks. Quite an underwhelming experience.</p>
</blockquote>
<h2 id="i-think-that-there-will-be-other-broadly-accepted-models-that-will-gravitate-towards-owning-your-data-auto-audit-any-application-you-run">&lsquo;I think that there will be other broadly accepted models that will gravitate towards owning your data, auto-audit any application you run.&rsquo;</h2>
<blockquote>
<p>After that, I joined an ecommerce startup, writing webapps and doing data mining stuff. Which was a lot of fun. Did that work in a startup incubator. Startup was funded by Marissa Mayer and ex-Googlers, so I got invited to Mayer&rsquo;s Halloween Party.</p>
</blockquote>
<blockquote>
<p>After the ecommerce startup folded I went to SmartThings, wrote a lot of software for them, travelled to India and Korea for work. Managed teams overseas. Can&rsquo;t go into too much recent history stuff unfortunately, but Samsung&rsquo;s Suwon HQ is quite something. Then when I just about had enough with Samsung, I left and traded crypto full time for a while; this was around 2017-2018 period.</p>
</blockquote>
<blockquote>
<p>I did OK, not fabulously well, just OK. Trading semi-professionally is very lonely. At some point I figured I should get back to writing software, so joined a crypto-fiat wallet app company Metal Pay, first as Blockchain Engineer, then later built a lot of traditional backend infra as Director of Engineering there. Working with stuff like&hellip; flow of funds, AML reporting and anti-fraud systems, plain old REST API services, archival data backend, user-retention and promo system, compliance backend, market integration&hellip; I think I wrote about 1/3 of the deployed microservices there.</p>
</blockquote>
<blockquote>
<p>I was commuting to San Francisco every day, sometimes via BART, sometimes via Caltrain, and other times I just drove, so I stayed at work late too. At one point I took customer support roles during holiday season (promo and such require a lot of handholding). So I was personally getting burned out so I left and took about a month off, just trading full time again. That was around June 2019. Did OK, nothing to write home about. I was staying up so late that days merged into nights. Blinders in my room never changed its positions.</p>
</blockquote>
<blockquote>
<p>I told myself I should do something a bit more productive so I started to write everything I hated about user experience in various crypto exchanges; one of them was KYC, and second was outage of websites everytime there was a spike in the interest. And then during a flight to somewhere I wrote out how I would design the system, centered around privacy, and then it dawned on me that I read a May 2019 guidence from FinCEN that basically said that properly decentralized DEXes are probably exempt from AML recordkeeping requirements. So I quickly wrote down how something like that could work and be compliant with US laws, incorporated, and started writing software. That was around July.</p>
</blockquote>
<blockquote>
<p>As you know I said 2019, so it&rsquo;s been year and a half since I started the company, so I had to sell off a lot of assets - lawyers cost a lot! Definitely had ups and downs during last year and a half, but we&rsquo;re at a final stages here for getting something out the door fast.</p>
</blockquote>
<blockquote>
<p>Ok, urbit story: First time I heard about Urbit was by chance I saw Clark Hat&rsquo;s <a href="https://www.popehat.com/2013/12/06/nock-hoon-etc-for-non-vulcans-why-urbit-matters/">review</a> of urbit, then saw Andrea O&rsquo;Sullivan&rsquo;s <a href="https://reason.com/2016/06/21/can-urbit-transform-the-internet/">article</a>. Around that time I saw that horse-computer dude (Gulliver&rsquo;s travel horse people name) Hhhhhmnnnn or something, I saw his article <a href="https://ngnghm.github.io/blog/2016/06/11/chapter-10-houyhnhnms-vs-martians/">Martian vs Human</a> computing or something. I might not be recalling this correctly.</p>
</blockquote>
<blockquote>
<p>I was really intrigued, I mean at that point I had written software for 15 years or so, so I had my share of horror stories about consistency, lack of idempotency, and indeterminant nature of computing. Wrote enough CRUD apps to fill my grave with the printouts of the codes. So when I read about what urbit was trying to do I was really excited &ndash; here was a new computing platform that was trying to make my life easier. This was something that tried to provide primitives for writing distributed applications. I am not a comp sci grad, so I made all kinds of age-appropriate mistakes, so by when I first heard about urbit I was hooked.</p>
</blockquote>
<blockquote>
<p>Then I heard Curtis was cancelled at Strangeloop. I kinda knew his controversial positions lol but honestly I just wanted to hear him speak about new OS. So when I heard he was going to LambdaConf, I booked a flight and saw him. I think I was already running a planet I got at that point, so it was quite a good feeling.</p>
</blockquote>
<blockquote>
<p>have a photo I took - one sec:</p>
</blockquote>
<p><a href="/img/cgy.jpg"><img src="/img/cgy.jpg" alt=""></a></p>
<ul>
<li><em>c/o ~mister-todteg</em></li>
</ul>
<blockquote>
<p>I kept on using it, and I gotta say it recaptured level of excitement I had when I used to use BBSes on 2400 baud modem. Ok, this is becoming a rant &ndash; quite a big problem of mine. In any case, I went to almost all early urbit meetups in SF, just kinda hung out there, asked obnoxious questions like&hellip; can you stream video via urbit? How would you make a FPGA implementation of urbit kernel? Since there is no HAL, how would you do sound? Could you do graphics acceleration maybe by writing a jet? But then it wouldn&rsquo;t be a jet, since you need corroboration with hoon. That sort of questions.</p>
</blockquote>
<blockquote>
<p>I mean even despite it, (and I was really just asking beyond what urbit&rsquo;s core mission is at that point) there was one thing that I focused on as value prop: Deterministic Computing.</p>
</blockquote>
<blockquote>
<p>So I&rsquo;m sure your readership is knowledgeable enough to know that JAVA&rsquo;s original big selling point was write once run it everywhere. I think the simplest way to describe deterministic computing would be&hellip; write once run it forever. I hate maintaining software, and I&rsquo;m sure most do too. I mean it&rsquo;s unavoidable, but many of the maintainability issues, beyond just updating libraries or compilers or what have you, is userspace app issue, it&rsquo;s just no longer compatible with underlying system.</p>
</blockquote>
<blockquote>
<p>I might be talking out of my butt here, but I ran into, when I was writing embedded software for busybox stuff (poorly), I had several failure to replicate issues. I don&rsquo;t remember exact problem, but I remember it being due to what compiler flag I used.</p>
</blockquote>
<blockquote>
<p>Anyways, feel free to jump in</p>
</blockquote>
<h2 id="exchange-operators-can-block-deposit-withdraw-freeze-or-even-run-away-with-your-money">&lsquo;Exchange operators can block deposit, withdraw, freeze, or even run away with your money.&rsquo;</h2>
<p><img src="/sigils/sitful-chat.svg#floatsigil" alt="">: No, this is great, this is about you. I think a lot of us have a story about how we got really excited and sucked in after we figure out what urbit is about, I like hearing other peoples&rsquo;.</p>
<blockquote>
<p><img src="/sigils/mister-todteg.svg#floatsigil" alt="">: haha thanks for indulging me. I feel that having people read about this is very flattering.</p>
</blockquote>
<blockquote>
<p>So my work experience, which isn&rsquo;t that exciting tbh, informed me that urbit was onto something. I have been engaging with urbit community for a while, and I talked about iot application, need for simple apps so that people can de-google their lives, and so on. Where my own startup and urbit starts to intermingle is when I started to hire engineers.</p>
</blockquote>
<blockquote>
<p>So the team at my startup&hellip; we have 15 people now, and now 8 out of them (I think) are urbit users. So other than Tlon, we&rsquo;re probably the first company to have majority urbit users as team. So you might ask&hellip; is Tacen integrating urbit into its system&hellip;</p>
</blockquote>
<blockquote>
<p>Ok, I should start with what Tacen does first:</p>
</blockquote>
<p><img src="/sigils/sitful-chat.svg#floatsigil" alt="">: Yeah, can you give an overview of what Tacen is, how it works, and what it aims to be?</p>
<blockquote>
<p><img src="/sigils/mister-todteg.svg#floatsigil" alt="">: So when you&rsquo;re working with a centralized exchange, you have two problems - custody and permission.</p>
</blockquote>
<blockquote>
<p>Custody - someone else has your money, and</p>
</blockquote>
<blockquote>
<p>Permission - you need their permission to withdraw</p>
</blockquote>
<blockquote>
<p>This poses a big issue - I think this is exactly how one would classify agent-principal problem. Exchange operators can block deposit, withdraw, freeze, or even run away with your money. So I think since 2016, crypto industry as a whole had $2 bil stolen from exchange hacks, and exit scams aren&rsquo;t even being taken into account. So it&rsquo;s a big problem.</p>
</blockquote>
<blockquote>
<p>Second problem with centralized exchange is KYC. They have your PII - personally identifiable information. I had to set up KYC/AML system in my previous work, so I can tell you some of the preparatory info I have about PII blackmarket. If I remember the study correctly, you can buy someone&rsquo;s identity with 6 pieces of PII for roughly $20-$30, usually enough to do total account takeover in less secure service. You can get 9 piece PII for roughly $55, which includes things like SSN, last known address, passport number, and with that you could probably do account takeover of bank acct with some work. So PII out there is cheap, and fintech startups with all that PII data archived, when they go out of business&hellip; well, let&rsquo;s just say that some devops engineer might just take a archival copy and sell it somewhere when the startup goes out of business. It&rsquo;s highly criminal and unethical.</p>
</blockquote>
<blockquote>
<p>So you have customer data, which is now your (business) responsibility to keep it safe, but no one really knows what the lifecycle of these things are. Separate problem, going back to principal-agent issue, is that exchange operators can&rsquo;t be trusted. When they have high volume of money coming into the wallets they control, they can easily be tempted to run away with clients&rsquo; money.</p>
</blockquote>
<blockquote>
<p>So they have your data and your money. You are completely at their mercy.</p>
</blockquote>
<p><img src="/sigils/sitful-chat.svg#floatsigil" alt="">: So Tacen is not an exchange in the traditional sense, and doesn&rsquo;t require a central service or trusting a third party for transactions &ndash; what technology is it built on?</p>
<blockquote>
<p><img src="/sigils/mister-todteg.svg#floatsigil" alt="">: So tacen is a hybrid exchange, we have order matching done at centralized server, but the settlement is done peer-to-peer. Reason why I opted for that design is because DEX, while great, are inevitably slow. Blockchains are great at solving concurrency problem, at least practically solving it. They resolve disparate transactions, and order them in serial fashion, basically taking advantage of statistics to line the transactions to prevent double spending; but it isn&rsquo;t good at speed, so we centralize that part.</p>
</blockquote>
<h2 id="there-is-no-effective-control-from-us-we-cant-withdraw-command-to-send-fund-or-do-anything-with-traders-own-escrow">&lsquo;&hellip;there is no effective control from us. We can&rsquo;t withdraw, command to send fund, or do anything with trader&rsquo;s own escrow.&rsquo;</h2>
<blockquote>
<p>Backend is traditional - backend services are written in Nim, a nice programming language with great meta-programming support; settlement layer requires smart contracts, for now we are developing for chains supporting solidity; front end is a traditional webapp, with heavy web3 library integration - a dApp.</p>
</blockquote>
<blockquote>
<p>Might be wondering - well, after all that talk about centralization being bad, why do that? So two fold - one is trader expectation, and second is time value of money.</p>
</blockquote>
<blockquote>
<p>Traders&rsquo; expectation is one of quick order entry and modification, roughly 90% of all orders are cancelled - perhaps they are automated mostly. When order modification takes longer time seconds and even minutes, the spread (price difference between highest bid and lowest ask) is going to be higher than system that can respond faster &ndash; reason for it is that there is risk associated with time. I think best DEX out there can do 2 updates to the orderbook in a second. NASDAQ, Arca, and so on can do in 18 microseconds (not just update, but entire SIP processing). So quite a difference.</p>
</blockquote>
<blockquote>
<p>Question then is&hellip; how does one prevent gaming of the system? I mean you should&rsquo;t trust central venues. I think the satisfactory solution I came up with is one that relies on several things:</p>
</blockquote>
<p><img src="/sigils/sitful-chat.svg#floatsigil" alt="">: So striking a balance between autonomy and efficiency, sort of the classical cleft between decentralized and centralized systems</p>
<blockquote>
<p><img src="/sigils/mister-todteg.svg#floatsigil" alt="">: Yep. I mean settlement is and should be done on-chain, and exchanges should not be involved.</p>
</blockquote>
<blockquote>
<p>So the solution I came up with for reducing trust requirement for central matching engine is:</p>
</blockquote>
<blockquote>
<ul>
<li>Rapid witnessing of peer order submissions</li>
</ul>
</blockquote>
<blockquote>
<ul>
<li>Signed payloads for all order events</li>
</ul>
</blockquote>
<blockquote>
<ul>
<li>Signed execution of trade by the exchange</li>
</ul>
</blockquote>
<blockquote>
<ul>
<li>Separation of data locality to outside of the exchange company</li>
</ul>
</blockquote>
<blockquote>
<p>So 1: you could imagine a hypothetical situation where you have a car accident (hopefully no one was hurt) and bunch of people come by and take their own pictures from all kinds of different angle immediately,and then posts them everywhere; that is a pretty good indication that the event did happen - witnessing by independent parties. We can go into sybil attack issues, but that&rsquo;s the first cut at an answer.</p>
</blockquote>
<blockquote>
<p>All orders submitted should be signed by the person who owns that wallet - this is the easy part. When the orders are matched on the orderbook management, the exchange signs it. So an executed trade has three signatures.</p>
</blockquote>
<blockquote>
<p>Executed trades, just like order modification, gets rebroadcasted to participants, and some of them are what we call Settlement Data Oracle. SDOs are going to be open sourced software that market participants run that will record market activity, and when settlement is requested, many of these will come together in a quorum to provide counterparty obligations to traders who are involved. Clearly the technical and governance challenges are to make sure collusion is not an issue.</p>
</blockquote>
<blockquote>
<p>What this model allows is cross chain settlement, so you could imagine trading RBTC for ETH &ndash; (RBTC) being RSK&rsquo;s pegged BTC. DEXes currently do not have that capability because DEXes run on a chain, or if they do have cross-chain capability, they need third interoperability chain to mediate; huge complexity cost.</p>
</blockquote>
<h2 id="so-you-might-ask-is-tacen-integrating-urbit-into-its-system">&lsquo;So you might ask&hellip; is Tacen integrating urbit into its system&hellip;&rsquo;</h2>
<p><img src="/sigils/sitful-chat.svg#floatsigil" alt="">: I&rsquo;m curious about how the SDOs work &ndash; so are these oracles participating by staking, or is there some kind of reputation system, or what?</p>
<blockquote>
<p><img src="/sigils/mister-todteg.svg#floatsigil" alt="">: Participating SDOs will need to set aside some fund to cover settlement risk, since it requires a degree of coordination, while expected risk is low, we would still want data providers to have insurance fund set aside for parties affected. There could be some staking, but that detail is something we&rsquo;re working through at the moment. There could be a governance token that sets quorum requirements for data, as well as other platform wide decisions.</p>
</blockquote>
<blockquote>
<p>SDOs will also be subject to data audits, we plan on automating the process, with peer audits being conducted. At the very minimum we would need, even before post-trade audits, a consistent record across quorum when settlment is requested.</p>
</blockquote>
<blockquote>
<p>We have system in the works for ensuring honest SDOs survive over longer period of time, which is tricky, but we&rsquo;re still working on some part of it. Default failure mode for settlement is depositor getting the money back. Even before that though I think I should point out that traders create their own contract through function call on a contract factory. That way we ensure consistent rule across the board.</p>
</blockquote>
<blockquote>
<p>The contracts, I mean the escrows, are non-upgradable, and we intend on getting it audited to demonstrate that there is no effective control from us. We can&rsquo;t withdraw, command to send fund, or do anything with trader&rsquo;s own escrow.</p>
</blockquote>
<p><img src="/sigils/sitful-chat.svg#floatsigil" alt="">: You mentioned earlier that at least half of your employees are on urbit, and I think it&rsquo;s easy to see some philosophical and technical dovetailing between these two projects. Do you have any plans or ideas for any integrations with urbit?</p>
<blockquote>
<p><img src="/sigils/mister-todteg.svg#floatsigil" alt="">: Yep! One thing that is unique about Tacen is that we are not a protocol play. It&rsquo;s funny when one say this but many of the blockchain projects out there are reinventing the wheel.</p>
</blockquote>
<blockquote>
<p>We want to use proven backend for some of our components. So one could imagine a future where your urbit planet can become a SDO; I mean urbit is already has built in database, distributed messaging primitives, idempotent msg channels, and RPC clients to ETH and BTC. That is a no brainer integration. Imagine if Tacen&rsquo;s planet would broadcast to subscribed SDOs on planets, planets record, and at the same time listen to the constituent blockchains, same thing that currently what we&rsquo;re coding does, except perhaps we write less code and with more reliability. Throughput is a issue, but we can work on that.</p>
</blockquote>
<blockquote>
<p>Another exciting integration opportunity is connecting to your own planet&rsquo;s webapp that is basically a front end, and you connect and trade via exchange backend Tacen or any other exchanges provide; you host your own exchange app (at least start with front end).</p>
</blockquote>
<h2 id="imagine-if-tacens-planet-would-broadcast-to-subscribed-sdos-on-planets-planets-record-and-at-the-same-time-listen-to-the-constituent-blockchains">&lsquo;Imagine if Tacen&rsquo;s planet would broadcast to subscribed SDOs on planets, planets record, and at the same time listen to the constituent blockchains&rsquo;</h2>
<p><img src="/sigils/sitful-chat.svg#floatsigil" alt="">: That&rsquo;s a really cool prospect, it&rsquo;s exciting to watch all of this technology of personal autonomy assembling in front of us. So what does the horizon look like right now? I see on that site that you&rsquo;re aiming for a release later this year.</p>
<blockquote>
<p><img src="/sigils/mister-todteg.svg#floatsigil" alt="">: I think renewed focus on distributed apps, and owning your own data will change how applications are architected. What I&rsquo;m trying to do is to separate out the data from function, and so far it&rsquo;s looking good.</p>
</blockquote>
<blockquote>
<p>I think that there will be other broadly accepted models that will gravitate towards owning your data, auto-audit any application you run. Perhaps even the future of corporate model will center around providing maximum value, rather than monetizing customer data or try to profit from &ldquo;hacking&rdquo; their customer behaviors. I personally see this as American as one could get. Business should be solely focused on maximum value for their customers, rather than be distracted with customer behavior.</p>
</blockquote>
<blockquote>
<p>As for Tacen&hellip; we&rsquo;re slated to do close alpha test soon (around late April) and launch open beta around Sept-Nov time period. We have the first cut at a working settlement flow, tested it against ETH, RSK, ETC, and other blockchains supporting solidity (easier us to develop for now). We did a cross-chain settlement test a few months ago and that works as intended
Backend is coming along nicely too</p>
</blockquote>
<blockquote>
<p>Front end is serviceable, we&rsquo;ll get better at it as well. Only thing that&rsquo;s not fixed yet is the order summary text there lol &ndash; placeholder for now.</p>
</blockquote>
<p><a href="/img/tacen.png"><img src="/img/tacen.png" alt=""></a></p>
<ul>
<li><em>c/o ~mister-todteg</em></li>
</ul>
<p><img src="/sigils/sitful-chat.svg#floatsigil" alt="">: What are your expectations or worries about the regulatory environment? I&rsquo;d imagine that plays a pretty big part in how you build these systems</p>
<blockquote>
<p><img src="/sigils/mister-todteg.svg#floatsigil" alt="">: Well, I think like weather, regulatory environment is unpredictable. There are factions within those regulatory bodies with wildly different interpretations about the law. What I do think is that laws themselves are unlikely to change drastically, meaning most of the laws impacting AML compliance are relatively static, but the interpretation and enforcement policy will change towards more control.</p>
</blockquote>
<blockquote>
<p>What I think is that while many companies like Tacen strive for full compliance, there is a limit to what companies can do. For an example, companies can&rsquo;t do Beneficial Owners check for each entities at infinite depth. There is limit to how much check can companies do to prevent prohibited persons from trading crypto. However, there are many innovative ways to ensure maintaining privacy and compliance.</p>
</blockquote>
<blockquote>
<p>For an example, while an exchange will not engage in financial surveillance, it can perform sufficient due diligence from publicly available info. Many do this with IP addresses, geo fencing, and other heuristics to make risk based assessment whether to allow service usage. What we&rsquo;re doing with Tacen is that we&rsquo;re trying to design a system that is fully in compliance, and to forecast where the interpretation of the laws will lead - in particular Securities Act of 1933, Securities Exchange Act of 1934, Bank Secrecy Act of 1970, and Title III of US PATRIOT Act of 2001.</p>
</blockquote>
<blockquote>
<p>An example of this work is how we are designing the escrow contracts and where the locus of control exists for the purposes of peer settlement. By excluding the exchange from that process, we remain compliant. Forecast from compliance side of angle is the potential interpretation of financial obligation state propagation as being tentamount to money transmission. We avoid that altogether. Unfortunately I can&rsquo;t go into too much details on this, as your readers might get some kind of migraine.</p>
</blockquote>
<p><img src="/sigils/sitful-chat.svg#floatsigil" alt="">: How about a last personal question to finish off &ndash; you run a private group for firearms discussion and enthusiasts; what&rsquo;s your favorite gun you own and why?</p>
<blockquote>
<p><img src="/sigils/mister-todteg.svg#floatsigil" alt="">: Haha I own several guns - an AR, a pistol, a shotgun, and more&hellip; It&rsquo;s hard to choose, but my favorite is Ruger 10/22 Takedown. It&rsquo;s a neat little gun, fun to shoot and my friends love it too.</p>
</blockquote>
<blockquote>
<p>It has virtually no recoil, and ammo&rsquo;s relatively cheap. Great gun to introduce people to firearms.</p>
</blockquote>
<blockquote>
<p>Thanks again for having me. This was fun!</p>
</blockquote>
<hr>
<p>Big thanks once again to ~mister. You can read more about Tacen at the <a href="https://tacen.com/">official website</a>, join the <a href="https://t.me/tacen_app">Telegram group</a>, or the Urbit group at <code>~mister-todteg/tacen</code>.</p>
<hr>
<p><em>This post is also available on Urbit, where you can post comments. Join <a href="web+urbitgraph://group/~matwet/networked-subject/">~matwet/networked-subject</a> and open the Networked Subject notebook.</em></p>
]]></content>
		</item>
		
		<item>
			<title>Self-hosting MinIO S3 for Urbit</title>
			<link>https://subject.network/posts/free-urbit-s3-minio/</link>
			<pubDate>Thu, 14 Jan 2021 17:32:26 -0600</pubDate>
			
			<guid>https://subject.network/posts/free-urbit-s3-minio/</guid>
			<description>Background This tutorial will walk you through the process of configuring MinIO on your server, which will allow you to host images and content for your ship, but without relying on or paying for a third party host.
S3 is a service offered by Amazon&amp;rsquo;s web service division that allows you to cheaply host data that you can programatically access with other applications. S3 is wildly popular, and as a result has an API that is widely supported by a lot of software.</description>
			<content type="html"><![CDATA[<p><img src="/img/minio/minio-urbit.png" alt=""></p>
<h2 id="background">Background</h2>
<p>This tutorial will walk you through the process of configuring MinIO on your server, which will allow you to host images and content for your ship, but without relying on or paying for a third party host.</p>
<p>S3 is a service offered by Amazon&rsquo;s web service division that allows you to cheaply host data that you can programatically access with other applications. S3 is wildly popular, and as a result has an API that is widely supported by a lot of software. Other companies also offer services that can use the same API as Amazon&rsquo;s service.</p>
<p>Urbit has support for S3-compatible APIs &ndash; we <a href="/posts/configuring-s3-urbit/">previously covered</a> how to use DigitalOcean&rsquo;s S3 service, Spaces. Think of this as sticking a big external hard drive onto your ship, that allows you to upload images and data from inside of Landscape, the web UI.</p>
<p>MinIO is a highly performant, S3-compatible object storage application, with both client and server binaries. Most importantly, it&rsquo;s open source software that you can run yourself on the server hosting your ship, and you don&rsquo;t have to pay additional fees to DO or Amazon. This tutorial will assume you are using Ubuntu, but the instructions should not deviate much across OSes.</p>
<p>An important qualification: S3 requires a subdomain that matches your bucket name, and Urbit&rsquo;s implementation requires https, so you will need to have a domain to generate certificates for &ndash; fortunately, if you&rsquo;re using a planet, you can use a free arvo.network subdomain. If you have your own domain, I believe you can substitute &lsquo;sampel-palnet&rsquo; throughout this tutorial with a subdomain of your choice, though I wasn&rsquo;t able to fully test this due to my particular setup.</p>
<p>All credit is due <a href="/posts/free-cloud-oracle/">once again</a> to <code>~socsel-pacted</code> for the heads-up, and for figuring this out!</p>
<p><em>Edit:</em> You can find alternate instructions by <code>~tomnyr-tirsyr</code> <a href="https://www.notion.so/MinIO-S3-Urbit-a18a584293b3459e8785339e60145b11">here</a>.</p>
<h2 id="server-prep">Server prep</h2>
<p>As I mentioned, you&rsquo;ll need to have your planet set up with a domain for https &ndash; if you haven&rsquo;t already done so, you can register your ship&rsquo;s IP on arvo.network with the following command in dojo (replacing 1.2.3.4 with your IP &ndash; make sure you have a period in front of it):</p>
<div class="window">
    <div class="titlebar">
      <div class="buttons">
        <div class="bclose">
        </div>
        <div class="minimize">
        </div>
        <div class="zoom">
        </div>
      </div>
      urbit - sampel-palnet
    </div>
    <div class="termdojo">
      <ul>
        
        
        <li></li>
        
        
        <li>~sampel-palnet:dojo>&nbsp;-dns-address&nbsp;&dns-address&nbsp;[%if&nbsp;.1.2.3.4]</li>
        
        
        <li>&nbsp;</li>
        
        
        <li>&nbsp;&nbsp;</li>
        
        
        <li></li>
          
      </ul>
    </div>
  </div>

<p>(In this and all tutorials, <code>dojo&gt;</code> indicates your urbit&rsquo;s command line, and <code>$&gt;</code> denotes your computer or server&rsquo;s).</p>
<p>Unfortunately, it may take a few days for this to go into effect if you don&rsquo;t already have this set up &ndash; registering these subdomains is a manual process as far as I know, running the command just registers a request. You&rsquo;ll be able to tell it has worked when navigating to <code>sampel-palnet.arvo.network</code> (with your planet name) pulls up your ship.</p>
<p>While we&rsquo;re setting up, make sure port 9000 is accessible. On your server, you can run:</p>
<div class="window" width="80%">
    <div class="titlebar">
      <div class="buttons">
        <div class="bclose">
        </div>
        <div class="minimize">
        </div>
        <div class="zoom">
        </div>
      </div>
      terminal: ~
    </div>
    <div class="termwin">
      <ul>
        
        
        <li></li>
        
        
        <li>$>&nbsp;sudo&nbsp;ufw&nbsp;allow&nbsp;9000/tcp</li>
        
        
        <li>&nbsp;</li>
        
        
        <li></li>
        
        
        <li></li>
          
      </ul>
    </div>
  </div>

<p>If you&rsquo;re using an Oracle VPS, create a TCP <a href="/posts/free-cloud-oracle/#configuring-software">ingress rule</a> that allows port 9000.</p>
<h2 id="installation--tls">Installation &amp; TLS</h2>
<p>Once you&rsquo;ve gotten everything prepared, let&rsquo;s run certbot to generate a TLS certificate. First, shut down your urbit or any running web server to free up port 80, then install and run <code>certbot</code>:</p>
<div class="window" width="80%">
    <div class="titlebar">
      <div class="buttons">
        <div class="bclose">
        </div>
        <div class="minimize">
        </div>
        <div class="zoom">
        </div>
      </div>
      terminal: ~
    </div>
    <div class="termwin">
      <ul>
        
        
        <li></li>
        
        
        <li>$>&nbsp;sudo&nbsp;apt&nbsp;install&nbsp;certbot</li>
        
        
        <li>$>&nbsp;sudo&nbsp;certbot&nbsp;certonly&nbsp;--standalone</li>
        
        
        <li>&nbsp;</li>
        
        
        <li></li>
        
        
        <li></li>
          
      </ul>
    </div>
  </div>

<p>Follow the instructions to generate your certificates; when prompted, enter <code>sampel-palnet.arvo.network</code>, substituting your ship&rsquo;s name. Once completed, you can find them in <code>/etc/letsencrypt/live/sampel-palnet.arvo.network</code>.</p>
<p>Now, let&rsquo;s download and run Minio so we can manipulate its configuration:</p>
<div class="window" width="80%">
    <div class="titlebar">
      <div class="buttons">
        <div class="bclose">
        </div>
        <div class="minimize">
        </div>
        <div class="zoom">
        </div>
      </div>
      terminal: ~
    </div>
    <div class="termwin">
      <ul>
        
        
        <li></li>
        
        
        <li>$>&nbsp;cd</li>
        
        
        <li>$>&nbsp;wget&nbsp;https://dl.min.io/server/minio/release/linux-amd64/minio</li>
        
        
        <li>$>&nbsp;chmod&nbsp;+x&nbsp;minio</li>
        
        
        <li>$>&nbsp;./minio</li>
        
        
        <li>&nbsp;</li>
        
        
        <li></li>
        
        
        <li></li>
          
      </ul>
    </div>
  </div>

<p>This should print the help menu. Now we can copy our certificates into the appropriate folders:</p>
<div class="window" width="80%">
    <div class="titlebar">
      <div class="buttons">
        <div class="bclose">
        </div>
        <div class="minimize">
        </div>
        <div class="zoom">
        </div>
      </div>
      terminal: ~
    </div>
    <div class="termwin">
      <ul>
        
        
        <li></li>
        
        
        <li>$>&nbsp;mkdir&nbsp;~/.minio&nbsp;&&&nbsp;mkdir&nbsp;~/.minio/certs</li>
        
        
        <li>$>&nbsp;sudo&nbsp;cp&nbsp;/etc/letsencrypt/live/sampel-palnet.arvo.network/fullchain.pem&nbsp;~/.minio/certs/public.crt</li>
        
        
        <li>$>&nbsp;sudo&nbsp;cp&nbsp;/etc/letsencrypt/live/sampel-palnet.arvo.network/privkey.pem&nbsp;~/.minio/certs/private.key</li>
        
        
        <li>$>&nbsp;sudo&nbsp;chown&nbsp;user:user&nbsp;.minio/certs/public.crt</li>
        
        
        <li>$>&nbsp;sudo&nbsp;chown&nbsp;user:user&nbsp;.minio/certs/private.key</li>
        
        
        <li>&nbsp;</li>
        
        
        <li></li>
        
        
        <li></li>
          
      </ul>
    </div>
  </div>

<p>(replace <code>user:user</code> with your username on this device &ndash; i.e. <code>jsmith:jsmith</code>).</p>
<p>Now let&rsquo;s set environment variables for Minio&rsquo;s access and secret keys (basically username/password). First, let&rsquo;s generate a nice strong password:</p>
<div class="window" width="80%">
    <div class="titlebar">
      <div class="buttons">
        <div class="bclose">
        </div>
        <div class="minimize">
        </div>
        <div class="zoom">
        </div>
      </div>
      terminal: ~
    </div>
    <div class="termwin">
      <ul>
        
        
        <li></li>
        
        
        <li>$>&nbsp;openssl&nbsp;rand&nbsp;-base64&nbsp;18</li>
        
        
        <li>&nbsp;</li>
        
        
        <li></li>
        
        
        <li></li>
          
      </ul>
    </div>
  </div>

<p>This will spit out a long random string. Copy it and paste it in the first following command, and set the second one to whatever you&rsquo;d like:</p>
<div class="window" width="80%">
    <div class="titlebar">
      <div class="buttons">
        <div class="bclose">
        </div>
        <div class="minimize">
        </div>
        <div class="zoom">
        </div>
      </div>
      terminal: ~
    </div>
    <div class="termwin">
      <ul>
        
        
        <li></li>
        
        
        <li>$>&nbsp;export&nbsp;MINIO_SECRET_KEY=yourlongrandomstringhere</li>
        
        
        <li>$>&nbsp;export&nbsp;MINIO_ACCESS_KEY=loginname</li>
        
        
        <li>&nbsp;</li>
        
        
        <li></li>
        
        
        <li></li>
          
      </ul>
    </div>
  </div>

<p>Similarly, let&rsquo;s go ahead and set the root login the same way:</p>
<div class="window" width="80%">
    <div class="titlebar">
      <div class="buttons">
        <div class="bclose">
        </div>
        <div class="minimize">
        </div>
        <div class="zoom">
        </div>
      </div>
      terminal: ~
    </div>
    <div class="termwin">
      <ul>
        
        
        <li></li>
        
        
        <li>$>&nbsp;export&nbsp;MINIO_ROOT_USER=your_root_username&nbsp;</li>
        
        
        <li>$>&nbsp;export&nbsp;MINIO_ROOT_PASSWORD=anotherstrongpassword&nbsp;</li>
        
        
        <li>&nbsp;</li>
        
        
        <li></li>
        
        
        <li></li>
          
      </ul>
    </div>
  </div>

<p>Think of this as writing down your credentials on a post-it note for your programs to look at. Now let&rsquo;s make a folder for our minio to put data in:</p>
<div class="window" width="80%">
    <div class="titlebar">
      <div class="buttons">
        <div class="bclose">
        </div>
        <div class="minimize">
        </div>
        <div class="zoom">
        </div>
      </div>
      terminal: ~
    </div>
    <div class="termwin">
      <ul>
        
        
        <li></li>
        
        
        <li>$>&nbsp;mkdir&nbsp;minio-data/sampel-palnet</li>
        
        
        <li>$>&nbsp;./minio&nbsp;server&nbsp;minio-data/sampel-palnet</li>
        
        
        <li>&nbsp;</li>
        
        
        <li></li>
        
        
        <li></li>
          
      </ul>
    </div>
  </div>

<p>And finally, launch minio (after spawning a tmux window to hide it in):</p>
<div class="window" width="80%">
    <div class="titlebar">
      <div class="buttons">
        <div class="bclose">
        </div>
        <div class="minimize">
        </div>
        <div class="zoom">
        </div>
      </div>
      terminal: ~
    </div>
    <div class="termwin">
      <ul>
        
        
        <li></li>
        
        
        <li>$>&nbsp;tmux&nbsp;new&nbsp;-s&nbsp;minio</li>
        
        
        <li>$>&nbsp;./minio&nbsp;server&nbsp;~/minio-data/sampel-palnet</li>
        
        
        <li>&nbsp;</li>
        
        
        <li></li>
        
        
        <li></li>
          
      </ul>
    </div>
  </div>

<p>[You may recall this trick for hiding your urbit&rsquo;s command line &ndash; you can hide this window by pressing <code>ctrl-b</code> followed by <code>d</code>; this will leave it running in the background. You can bring it back to the fore by entering: <code>$&gt; tmux a -t minio</code>]</p>
<p>If it worked, you should see something like this:</p>
<p><img src="/img/minio/minio2.png" alt=""></p>
<p>Note the certificate information at the bottom; this means it is serving over https.</p>
<h3 id="bucket-configuration">Bucket configuration</h3>
<p>Let&rsquo;s open up the control panel:</p>
<p><code>https://sampel-palnet.arvo.network:9000</code></p>
<p>Login with the access and secret keys you set previously. Once logged in, click the <code>+</code> icon at the bottom right to create a new bucket. The bucket name has to be the same as your subdomain (i.e, <code>sampel-palnet</code>):</p>
<p><img src="/img/minio/minio3.png" alt=""></p>
<p>Now, in the left sidebar, click the icon on the right to edit the access policy. Enter <code>*</code> in the text field and select &lsquo;read &amp; write&rsquo;.</p>
<p><img src="/img/minio/minio4.jpg" alt=""></p>
<p><img src="/img/minio/minio8.jpeg" alt=""></p>
<h2 id="urbit-configuration">Urbit configuration</h2>
<p>Finally, lets return to our ship. Go to Landscape and click your name at the top right, then go to &lsquo;ship settings&rsquo; in the left sidebar. Scroll down to &lsquo;S3 credentials&rsquo;.</p>
<p><img src="/img/minio/minio6.png" alt=""></p>
<p>Enter <code>arvo.network:9000</code> as your endpoint (<em>not</em> your subdomain), and enter the credentials we set earlier. Beneath, under &lsquo;S3 buckets&rsquo;, enter <code>sampel-palnet</code> &ndash; if you are using a personal domain rather than arvo.network, note that this must match the subdomain.</p>
<p><img src="/img/minio/minio7.jpeg" alt=""></p>
<p>Click save, go to <code>Options -&gt; Activate</code> next to the name of the bucket, and you have completed this tutorial! Head over to a chat and look in the text field you type into &ndash; there should be a paperclip icon on the right. Click it to add attachments.</p>
<hr>
<p>I hope you found this useful; thanks again to <code>~socsel</code> for the assistance. If you run into any difficulties, feel free to reach out in the chat room at <code>~matwet/networked-subject</code>.</p>
<hr>
<p><em>This post is also available on Urbit, where you can post comments. Join <a href="web+urbitgraph://group/~matwet/networked-subject/">~matwet/networked-subject</a> and open the Networked Subject notebook.</em></p>
]]></content>
		</item>
		
		<item>
			<title>Free Urbit hosting with Oracle Cloud</title>
			<link>https://subject.network/posts/free-cloud-oracle/</link>
			<pubDate>Fri, 18 Dec 2020 17:57:59 -0600</pubDate>
			
			<guid>https://subject.network/posts/free-cloud-oracle/</guid>
			<description>Background The two main options for running your Urbit are either to host it on a PC you have at home, or to host it in the cloud in a datacenter. The latter option is appealing thanks to high availability and good connection speed, along with the fact that most people don&amp;rsquo;t have a Linux or Mac computer at home that is always on. A server usually costs a little bit of money, though &amp;ndash; typically on the order of 5-10USD/month.</description>
			<content type="html"><![CDATA[<p><img src="/img/oracle-cover.png" alt=""></p>
<h2 id="background">Background</h2>
<p>The two main options for running your Urbit are either to host it on a PC you have at home, or to host it in the cloud in a datacenter. The latter option is appealing thanks to high availability and good connection speed, along with the fact that most people don&rsquo;t have a Linux or Mac computer at home that is always on. A server usually costs a little bit of money, though &ndash; typically on the order of 5-10USD/month.</p>
<p>This evening a comet in the <code>urbit-community</code> watercooler chat let everyone know that they had successfully used the Oracle Cloud VM free tier to host an Urbit without fees. This means we can get the advantages of a hosted ship without the costs associated with most providers. Boot a comet on here, and you&rsquo;ve got a totally free cloud-hosted introduction to Urbit! After testing it, I can say that the performance of the VM is more than enough to handle an Urbit.</p>
<p>(Thanks, <code>~ricmed-tagmed-donlep-hodtec--dabreb-laclep-talpex-wanzod</code> for the information, and <code>~socsel-pacted</code> for the help!)</p>
<p>I decided to go through the process of setting up a comet and document the steps for the convenience of anybody who wishes to follow suit. This process will probably take about 30 minutes from registration to having a booted ship. This process is a little more complicated than other hosts I&rsquo;ve used, like <a href="https://m.do.co/c/4da920651e1a">DigitalOcean</a> (referral link).</p>
<p>You should know going in that upon registration, you will be required to provide a phone number and credit card for validation. That said, Oracle makes it pretty clear what is free and what is not, and you should not be able to trivially stumble into charging your card as far as I can tell. Just follow these directions closely.</p>
<p>Please keep in mind that while this is called &lsquo;free forever&rsquo;, you are relying on the generosity and discretion of a corporation with no formal business relationship to you. That shouldn&rsquo;t stop you from giving this a spin, though.</p>
<p>The &lsquo;always free tier&rsquo; of services includes the following:</p>
<blockquote>
<ul>
<li>Two virtual machines with 1/8 OPCU and 1 GB memory each.</li>
<li>2 databases total, each with 1 OCPU and 20 GB storage (but you&rsquo;ll need to learn to be an Oracle DBA :-)</li>
<li>volumes with 100GB total, 10GB object, 10GB archive</li>
<li>Load Balancer, 1 instance, 10 Mbps bandwidth.</li>
<li>Monitoring, 500 million ingestion datapoints, 1 billion retrieval datapoints.</li>
<li>Notifications, 1 million delivery options per month, 1,000 emails sent per month.</li>
<li>Outbound Data Transfer, 10 TB per month.</li>
<li>Is Oracle Cloud Free Tier available in all countries? Yes, Oracle Cloud Free Tier is currently available worldwide.</li>
</ul>
</blockquote>
<p>(<a href="https://www.lowendtalk.com/discussion/160260/oracle-cloud-free-tier">h/t</a>)</p>
<p>Since Oracle offers a free-tier S3-compatible storage API, I will update this tutorial with additional directions if it turns out to be compatible with Urbit&rsquo;s S3 integration.</p>
<hr>
<h2 id="creating-an-account--instance">Creating an account &amp; instance</h2>
<p>First, navigate to <a href="https://www.oracle.com/cloud/compute/virtual-machines/">this</a> link, and click the &lsquo;Try Oracle Cloud free tier&rsquo; button at the top right to proceed through the registration.</p>
<p>Once you have registered and validated your email, phone, and CC, you&rsquo;ll get dropped into the dashboard. Click &lsquo;Create a VM instance&rsquo;:</p>
<p><img src="/img/oracle/tut1.png" alt=""></p>
<p>Feel free to give it whatever name you&rsquo;d like. Click the &lsquo;Edit&rsquo; link in the &lsquo;Configure placement and hardware&rsquo; option box to change the image you&rsquo;re using to Ubuntu &ndash; the version should not make a difference, but in this tutorial I used 20.04 standard.</p>
<p><img src="/img/oracle/tut2.png" alt=""></p>
<p><img src="/img/oracle/tut4.png" alt=""></p>
<p>Make sure that your &lsquo;shape&rsquo; retains the default setting (VM.Standard.E2.1.Micro)! This is the &lsquo;free&rsquo; option.</p>
<p><img src="/img/oracle/tut3.png" alt=""></p>
<p>You will be given the option of using your own SSH keys if you&rsquo;d like, but for the purposes of this tutorial, I will assume you do not have one or know how to create one. No problem, just keep &lsquo;Generate SSH key pair&rsquo; selected, and download your private key.</p>
<p><img src="/img/oracle/tut6.png" alt=""></p>
<p>You can keep default options for the rest of this page. At the very bottom, click the &lsquo;Create&rsquo; button (<strong>not</strong> the &lsquo;Create as Stack&rsquo; button).</p>
<p><img src="/img/oracle/tut7.png" alt=""></p>
<p>On the dashboard for your VM, take note of the public IP address. This is what we will use to connect to our server.</p>
<p>Congrats, you&rsquo;ve spun up a Linux server! Now we&rsquo;ll walk through connecting to it and configuring it to install Urbit.</p>
<hr>
<h2 id="connecting">Connecting</h2>
<p>Here we will begin a little command-fu. Don&rsquo;t worry if you&rsquo;ve never used a command line before, because you can just copy-paste each line individually.
(<em>Note that in the following commands, you do not need to type <code>$&gt; </code> &ndash; it is only there to indicate a new command line.</em>)</p>
<h3 id="connecting-from-a-linux-wsl-or-mac-pc">Connecting from a Linux, WSL or Mac PC</h3>
<p>First, let&rsquo;s copy our new SSH private key to the proper directory and change its permissions, then connect with it. You will need to edit the path in the first command to point at wherever your keyfile saved. For the third command, edit it to contain the IP address you saw in your VM dashboard a moment ago.</p>
<div class="window" width="80%">
    <div class="titlebar">
      <div class="buttons">
        <div class="bclose">
        </div>
        <div class="minimize">
        </div>
        <div class="zoom">
        </div>
      </div>
      terminal: ~
    </div>
    <div class="termwin">
      <ul>
        
        
        <li></li>
        
        
        <li>$>&nbsp;mkdir&nbsp;~/.ssh</li>
        
        
        <li>$>&nbsp;mv&nbsp;~/Downloads/ssh-key-2020-12-19.key&nbsp;~/.ssh/oracle.key</li>
        
        
        <li>$>&nbsp;sudo&nbsp;chmod&nbsp;600&nbsp;~/oracle.key</li>
        
        
        <li>$>&nbsp;ssh&nbsp;-i&nbsp;~/.ssh/oracle.key&nbsp;ubuntu@your.ip.address.here</li>
        
        
        <li>&nbsp;</li>
        
        
        <li></li>
        
        
        <li></li>
          
      </ul>
    </div>
  </div>

<p>Note that the default user is <code>ubuntu</code> &ndash; if you did not select the same image at VM creation, this may be different.</p>
<p>Once you&rsquo;ve entered the final command, you will be connected to your server and have control of a remote computer!</p>
<h3 id="connecting-from-a-windows-pc">Connecting from a Windows PC</h3>
<p>If you are using a Windows computer, connecting via SSH will require a little bit of extra work. If you already have <a href="/posts/urbit-wsl2/">WSL</a> installed on your PC, you can use your Linux shell to SSH with the instructions above. If you don&rsquo;t, it is probably quicker to simply connect using PuTTY.</p>
<p>You can follow the directions <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/putty.html">here</a> to convert your <code>.pem</code> key to a format that PuTTY can use. After you&rsquo;ve imported the private key, simply connect to your VM&rsquo;s IP address using that key.</p>
<hr>
<h2 id="configuring-software">Configuring software</h2>
<p>Oracle Cloud Ubuntu instances are totally locked down by default. We&rsquo;ll need to allow port traffic through on port 80 for the instance, then disable the firewall rules.</p>
<p>Go back to the instance details page for your VM and select the subnet link:</p>
<p><img src="/img/oracle/tut11.png" alt=""></p>
<p>Click the default security list:</p>
<p><img src="/img/oracle/tut12.png" alt=""></p>
<p>Add an ingress rule identical to the following one:</p>
<p><img src="/img/oracle/tut13.png" alt=""></p>
<p><img src="/img/oracle/tut14.png" alt=""></p>
<p>This will allow all traffic on port 80 to reach your Urbit. Go ahead and make another one identical to the one you just created, replacing 80 with 8080, just in case your ship doesn&rsquo;t bind to 80 when you boot.</p>
<p>One more ingress rule: we will create a stateless rule to allow traffic on the UDP port that Ames will use. Make another rule like this, where &lsquo;51234&rsquo; is any port between 50000-59999:</p>
<p><img src="/img/oracle/tut17.png" alt=""></p>
<p>(h/t <code>~rigred-losrev</code>)</p>
<p>Now return to your command line to disable <code>iptables</code> firewall rules on your server:</p>
<div class="window" width="80%">
    <div class="titlebar">
      <div class="buttons">
        <div class="bclose">
        </div>
        <div class="minimize">
        </div>
        <div class="zoom">
        </div>
      </div>
      terminal: ~
    </div>
    <div class="termwin">
      <ul>
        
        
        <li></li>
        
        
        <li>$>&nbsp;sudo&nbsp;iptables&nbsp;-P&nbsp;INPUT&nbsp;ACCEPT</li>
        
        
        <li>$>&nbsp;sudo&nbsp;iptables&nbsp;-P&nbsp;OUTPUT&nbsp;ACCEPT</li>
        
        
        <li>$>&nbsp;sudo&nbsp;iptables&nbsp;-P&nbsp;FORWARD&nbsp;ACCEPT</li>
        
        
        <li>$>&nbsp;sudo&nbsp;iptables&nbsp;-F</li>
        
        
        <li>$>&nbsp;sudo&nbsp;iptables&nbsp;--flush</li>
        
        
        <li>&nbsp;</li>
        
        
        <li></li>
        
        
        <li></li>
          
      </ul>
    </div>
  </div>

<p>Urbit requires 2GB of memory available to boot, and this VM only has 1GB. No worries though, we can trick Urbit with a page file! This is simply allocating disk space as overflow memory. Unless you are doing something really heavy duty, your ship will only use a fraction of this.</p>
<div class="window" width="80%">
    <div class="titlebar">
      <div class="buttons">
        <div class="bclose">
        </div>
        <div class="minimize">
        </div>
        <div class="zoom">
        </div>
      </div>
      terminal: ~
    </div>
    <div class="termwin">
      <ul>
        
        
        <li></li>
        
        
        <li>$>&nbsp;sudo&nbsp;fallocate&nbsp;-l&nbsp;2G&nbsp;/swapfile</li>
        
        
        <li>$>&nbsp;sudo&nbsp;chmod&nbsp;600&nbsp;/swapfile</li>
        
        
        <li>$>&nbsp;sudo&nbsp;mkswap&nbsp;/swapfile</li>
        
        
        <li>$>&nbsp;sudo&nbsp;swapon&nbsp;/swapfile</li>
        
        
        <li>$>&nbsp;echo&nbsp;'/swapfile&nbsp;none&nbsp;swap&nbsp;sw&nbsp;0&nbsp;0'&nbsp;|&nbsp;sudo&nbsp;tee&nbsp;-a&nbsp;/etc/fstab</li>
        
        
        <li>&nbsp;</li>
        
        
        <li></li>
        
        
        <li></li>
          
      </ul>
    </div>
  </div>

<p>Next lets install tmux and create a new session for our urbit. Tmux will allow you to create windows you can detach from inside of your terminal, so you don&rsquo;t have to kill your urbit process to do other things on the server:</p>
<div class="window" width="80%">
    <div class="titlebar">
      <div class="buttons">
        <div class="bclose">
        </div>
        <div class="minimize">
        </div>
        <div class="zoom">
        </div>
      </div>
      terminal: ~
    </div>
    <div class="termwin">
      <ul>
        
        
        <li></li>
        
        
        <li>$>&nbsp;sudo&nbsp;apt&nbsp;install&nbsp;tmux</li>
        
        
        <li>$>&nbsp;tmux&nbsp;new&nbsp;-s&nbsp;urbit</li>
        
        
        <li>&nbsp;</li>
        
        
        <li></li>
        
        
        <li></li>
          
      </ul>
    </div>
  </div>

<p>When you need to escape your urbit command line, press: <code>ctrl-b</code>, followed by <code>d</code> &ndash; the first one tells tmux to listen for a command, and the second tells it to detach.</p>
<p>If you want to reattach to your urbit&rsquo;s command line, enter the following:</p>
<div class="window" width="80%">
    <div class="titlebar">
      <div class="buttons">
        <div class="bclose">
        </div>
        <div class="minimize">
        </div>
        <div class="zoom">
        </div>
      </div>
      terminal: ~
    </div>
    <div class="termwin">
      <ul>
        
        
        <li></li>
        
        
        <li>$>&nbsp;tmux&nbsp;a&nbsp;-t&nbsp;urbit</li>
        
        
        <li>&nbsp;</li>
        
        
        <li></li>
        
        
        <li></li>
          
      </ul>
    </div>
  </div>

<hr>
<h2 id="installing-urbit">Installing Urbit</h2>
<p>Now for the good stuff &ndash; let&rsquo;s download and install Urbit on this server.</p>
<div class="window" width="80%">
    <div class="titlebar">
      <div class="buttons">
        <div class="bclose">
        </div>
        <div class="minimize">
        </div>
        <div class="zoom">
        </div>
      </div>
      terminal: ~
    </div>
    <div class="termwin">
      <ul>
        
        
        <li></li>
        
        
        <li>$>&nbsp;cd&nbsp;&&&nbsp;mkdir&nbsp;urbit&nbsp;</li>
        
        
        <li>$>&nbsp;cd&nbsp;urbit</li>
        
        
        <li>$>&nbsp;wget&nbsp;--content-disposition&nbsp;https://urbit.org/install/linux64/latest</li>
        
        
        <li>$>&nbsp;tar&nbsp;zxvf&nbsp;./linux64.tgz&nbsp;--strip=1</li>
        
        
        <li>$>&nbsp;sudo&nbsp;apt-get&nbsp;install&nbsp;libcap2-bin</li>
        
        
        <li>$>&nbsp;sudo&nbsp;setcap&nbsp;'cap_net_bind_service=+ep'&nbsp;~/urbit/urbit</li>
        
        
        <li>$>&nbsp;./urbit&nbsp;-p&nbsp;51234&nbsp;-c&nbsp;mycomet</li>
        
        
        <li>&nbsp;</li>
        
        
        <li></li>
        
        
        <li></li>
          
      </ul>
    </div>
  </div>

<p>These commands do the following:</p>
<ul>
<li>Make an urbit folder in your home directory and enter it</li>
<li>Download the latest Linux Urbit binary and extract it</li>
<li>Give the urbit binary permission to use port 80</li>
<li>Launch a new comet in a folder named mycomet on the port you opened up on the firewall</li>
</ul>
<p>If you&rsquo;ve done everything correctly, you will see your comet mine an identity and download and compile its source code. This process took about 3 minutes for me, but it may be longer &ndash; identity mining is not predictable. When you boot this comet in the future, it should only take a few seconds.</p>
<p><img src="/img/oracle/tut10.png" alt=""></p>
<p>What a nice feeling, after all that prep it&rsquo;s up and running! Enter <code>+code</code> in your Urbit terminal to get a login code like the one above.</p>
<p>Now, use your web browser to navigate to the IP address of your server, which you took note of earlier. It should present you with a login screen &ndash; enter the password that <code>+code</code> generated to log in.</p>
<p><img src="/img/oracle/tut15.png" alt=""></p>
<hr>
<h2 id="moving-an-existing-pier-to-the-cloud">Moving an existing pier to the cloud</h2>
<p>If you already have a ship hosted on your PC, it&rsquo;s very simple to transfer to another computer &ndash; you only have to copy the folder (&lsquo;pier&rsquo;) over.</p>
<p>First, go ahead and get the binaries downloaded on your VM if you haven&rsquo;t already done so:</p>
<div class="window" width="80%">
    <div class="titlebar">
      <div class="buttons">
        <div class="bclose">
        </div>
        <div class="minimize">
        </div>
        <div class="zoom">
        </div>
      </div>
      terminal: ~
    </div>
    <div class="termwin">
      <ul>
        
        
        <li></li>
        
        
        <li>$>&nbsp;cd&nbsp;&&&nbsp;mkdir&nbsp;urbit&nbsp;</li>
        
        
        <li>$>&nbsp;cd&nbsp;urbit</li>
        
        
        <li>$>&nbsp;wget&nbsp;--content-disposition&nbsp;https://urbit.org/install/linux64/latest</li>
        
        
        <li>$>&nbsp;tar&nbsp;zxvf&nbsp;./linux64.tgz&nbsp;--strip=1</li>
        
        
        <li>$>&nbsp;sudo&nbsp;apt-get&nbsp;install&nbsp;libcap2-bin</li>
        
        
        <li>$>&nbsp;sudo&nbsp;setcap&nbsp;'cap_net_bind_service=+ep'&nbsp;~/urbit/urbit</li>
        
        
        <li>&nbsp;</li>
        
        
        <li></li>
        
        
        <li></li>
          
      </ul>
    </div>
  </div>

<p>Before copying your old pier, <strong>make sure your urbit is not running on your computer</strong>. You can exit with <code>ctrl-d</code> or <code>ctrl-z</code> in the dojo. Never try to run your urbit in two places at once, or it can de-sync from the network.</p>
<p>Next, run this monster of a one-liner on your local computer, after editing in the path to your local pier and IP address of the server:</p>
<div class="window" width="80%">
    <div class="titlebar">
      <div class="buttons">
        <div class="bclose">
        </div>
        <div class="minimize">
        </div>
        <div class="zoom">
        </div>
      </div>
      terminal: ~
    </div>
    <div class="termwin">
      <ul>
        
        
        <li></li>
        
        
        <li>$>&nbsp;rsync&nbsp;--progress&nbsp;-avz&nbsp;-e&nbsp;"ssh&nbsp;-i&nbsp;~/.ssh/oracle.key"&nbsp;/path/to/local_pier/&nbsp;ubuntu@server.ip.address.here:~/urbit/</li>
        
        
        <li>&nbsp;</li>
        
        
        <li></li>
        
        
        <li></li>
          
      </ul>
    </div>
  </div>

<p>Now you just need to connect to your VM and run the Urbit binary, pointing at your newly copied pier:</p>
<div class="window" width="80%">
    <div class="titlebar">
      <div class="buttons">
        <div class="bclose">
        </div>
        <div class="minimize">
        </div>
        <div class="zoom">
        </div>
      </div>
      terminal: ~
    </div>
    <div class="termwin">
      <ul>
        
        
        <li></li>
        
        
        <li>$>&nbsp;ssh&nbsp;-i&nbsp;~/.ssh/oracle.key&nbsp;ubuntu@your.ip.address.here</li>
        
        
        <li>$>&nbsp;tmux&nbsp;new&nbsp;-s&nbsp;urbit</li>
        
        
        <li>$>&nbsp;./urbit/urbit&nbsp;-p&nbsp;51234&nbsp;urbit/your_pier_here</li>
        
        
        <li>&nbsp;</li>
        
        
        <li></li>
        
        
        <li></li>
          
      </ul>
    </div>
  </div>

<p>Where &lsquo;51234&rsquo; is whatever UDP port you created an ingress rule for earlier.</p>
<p>(On Windows/PuTTY, just repeat the previous process to connect to your server, and enter commands 2 &amp; 3)</p>
<p>And that&rsquo;s it!</p>
<hr>
<h2 id="ship-operation">Ship operation</h2>
<p>Congratulations on successfully configuring a Linux server and booting an Urbit ship! You can use this comet like any other ship. Go ahead and run the following in your urbit&rsquo;s dojo to receive the latest OTA update (comets do not get them automatically):</p>
<div class="window">
    <div class="titlebar">
      <div class="buttons">
        <div class="bclose">
        </div>
        <div class="minimize">
        </div>
        <div class="zoom">
        </div>
      </div>
      urbit - sampel-palnet
    </div>
    <div class="termdojo">
      <ul>
        
        
        <li></li>
        
        
        <li>~sampel-palnet:dojo>&nbsp;|ota&nbsp;~wanzod&nbsp;%kids</li>
        
        
        <li>&nbsp;</li>
        
        
        <li></li>
        
        
        <li></li>
          
      </ul>
    </div>
  </div>

<p>Give it 5 minutes or so to download and compile.</p>
<p>From here, your journey is a self-guided one. You can join groups and explore the network. Go ahead and join <code>~bitbet-bolbel/urbit-community</code> and check out the chats and notebooks for addresses and descriptions of other groups you can join. Feel free to also join <code>~matwet/networked-subject</code> to say hi and check out the meme channel, or give feedback on this or any tutorial.</p>
<p><img src="/img/oracle/tut16.png" alt=""></p>
<p>Welcome to Mars.</p>
<p><img src="/img/martian.jpg" alt=""></p>
<hr>
<h3 id="reference--troubleshooting">Reference &amp; Troubleshooting</h3>
<p>If your ship does not load in your browser, double check the following: the port number your urbit is serving on (should be 80 or 8080 if nothing else is running on this VM &ndash; check the first couple of lines in your dojo output after boot); the VM ingress rules outlined above; the <code>iptables</code> configuration described previously.</p>
<p>To end your urbit process, press <code>ctrl-d</code> at the dojo.</p>
<p>To detach from your urbit tmux session, press <code>ctrl-b</code>, <code>d</code>.</p>
<p>Enter <code>exit</code> at the command line to fully exit your SSH session after you&rsquo;ve detached from your tmux session.</p>
<p>To reconnect to your urbit&rsquo;s command line, enter the following from your local command line, editing in your own IP address:</p>
<div class="window" width="80%">
    <div class="titlebar">
      <div class="buttons">
        <div class="bclose">
        </div>
        <div class="minimize">
        </div>
        <div class="zoom">
        </div>
      </div>
      terminal: ~
    </div>
    <div class="termwin">
      <ul>
        
        
        <li></li>
        
        
        <li>$>&nbsp;ssh&nbsp;-i&nbsp;~/.ssh/oracle.key&nbsp;ubuntu@your.ip.address.here</li>
        
        
        <li>$>&nbsp;tmux&nbsp;a&nbsp;-t&nbsp;urbit</li>
        
        
        <li>&nbsp;</li>
        
        
        <li></li>
        
        
        <li></li>
          
      </ul>
    </div>
  </div>

<p>See more official instructions for using your urbit <a href="https://urbit.org/using/operations/using-your-ship/">here</a>.</p>
<hr>
<p><em>This post is also available on Urbit, where you can post comments. Join <a href="web+urbitgraph://group/~matwet/networked-subject/">~matwet/networked-subject</a> and open the Networked Subject notebook.</em></p>
]]></content>
		</item>
		
		<item>
			<title>Bitcoin on Urbit With ~timluc-miptev</title>
			<link>https://subject.network/posts/bitcoin-with-timluc-miptev/</link>
			<pubDate>Thu, 17 Dec 2020 14:28:28 -0600</pubDate>
			
			<guid>https://subject.network/posts/bitcoin-with-timluc-miptev/</guid>
			<description>Note: Urbit&amp;rsquo;s Bitcoin wallet was launched in May 2021. You can learn how to use it here.
Recently it was announced that an Urbit grant bounty was completed, for software that would act as an Urbit-native bitcoin wallet and a bridge to mediate between a ship and an external BTC full node. ~timluc-miptev, the developer who fulfilled the grant, was generous enough to spend some time with me for an interview, conducted over the course of a couple of days in a chat channel.</description>
			<content type="html"><![CDATA[<p><img src="/img/bitcoin-cli.png" alt=""></p>
<p><strong>Note</strong>: <em>Urbit&rsquo;s Bitcoin wallet was launched in May 2021. You can learn how to use it <a href="/posts/btc-wallet-config/">here</a></em>.</p>
<p>Recently it was announced that an Urbit <a href="https://grants.urbit.org/bounties/2056919898-bitcoin-full-node-provider-and-wallet">grant bounty</a> was completed, for software that would act as an Urbit-native bitcoin wallet and a bridge to mediate between a ship and an external BTC full node.  <a href="https://twitter.com/basile_sportif">~timluc-miptev</a>, the developer who <a href="https://github.com/timlucmiptev/btc-agents">fulfilled the grant</a>, was generous enough to spend some time with me for an interview, conducted over the course of a couple of days in a chat channel.</p>
<p>If you&rsquo;d like to hear more about this project from <code>~timluc</code>, be sure to check out his <a href="https://www.youtube.com/watch?v=LaWNHMmxQag">Developer Call</a> and recent feature on <a href="https://soundcloud.com/user-628294386/episode-4-bitcoin-urbit-with-timluc-miptev">The Stack</a>, a new Urbit-centric podcast. Check out their episode about <a href="https://soundcloud.com/user-628294386/episode-5-buy-urbitcoin-with-christian-langalis">the future of Bitcoin and Urbit</a> 	with <code>~pindet-timmut</code> as well.</p>
<hr>
<p><img src="/sigils/sitful-chat.svg#floatsigil" alt="">: First, a little about yourself: what&rsquo;s your background, your day job, your interests, and how did you get interested in Bitcoin and Urbit?</p>
<blockquote>
<p><img src="/sigils/timluc-chat.svg#floatsigil" alt="">: I got interested in Bitcoin in the summer of 2013 right before it went really crazy, but then didn&rsquo;t buy until the absolute top later that year, and not in large quantity. After that I mostly stayed out until 2016, and then got really heavily into Eth, which leads me into my Urbit interest.</p>
</blockquote>
<blockquote>
<p>I was way more interested in Eth than BTC in 2016-2018, mostly because a) I didn&rsquo;t understand BTC&rsquo;s monetary properties at all and b) I thought Eth would scale, at least in layer 2.</p>
</blockquote>
<blockquote>
<p>I found Urbit in early 2017, because I had read He Who Shall Not Be Named&rsquo;s blog and was wondering what he was up to. My initial reaction was &ldquo;oh this is pretty cool&rdquo; and my second reaction was &ldquo;you can probably just build this all on Eth, so I&rsquo;ll work on that angle.&rdquo;</p>
</blockquote>
<blockquote>
<p>As 2019 came around, it became more and more clear that Ethereum and applications on top of it had fundamental problems, and I disconnected from the space somewhat.</p>
</blockquote>
<blockquote>
<p>I revisited Urbit in late 2019, and it was at the &ldquo;barely useable but with some people on it&rdquo; phase. I got pretty into it and learned Hoon, but it wasn&rsquo;t immediately obvious how to use it, and I had some other commitments.</p>
</blockquote>
<blockquote>
<p>I finally dove in all the way in May 2020, when I learned Nock and <a href="https://blog.timlucmiptev.space/part1.html">wrote the Nock guide</a>. At that point I realized: &ldquo;oh wow, there&rsquo;s a lot of really low-hanging fruit here, and if I don&rsquo;t pick it, it&rsquo;s just gonna hang there forever.&rdquo; That&rsquo;s informed my perspective since: Urbit is great, it&rsquo;s improving rapidly, and if you think something obvious should be done you need to just do it.</p>
</blockquote>
<h2 id="think-urbit-substack----we-are-probably-3-8-months-away-from-a-very-very-good-and-useable-version-of-that-existing">❛Think Urbit Substack &ndash; we are probably 3-8 months away from a very very good and useable version of that existing.❜</h2>
<p><img src="/sigils/sitful-chat.svg#floatsigil" alt="">: Great answers; so, the reason for this interview is the project you&rsquo;ve been working on, Bitcoin support for Urbit. could you give a 1000-foot view of what exactly this project does?</p>
<blockquote>
<p><img src="/sigils/timluc-chat.svg#floatsigil" alt="">: Sure &ndash; the initial version of the project has two major goals:</p>
</blockquote>
<blockquote>
<ol>
<li>Abstract away underlying BTC details so that you can say &ldquo;send X amount of BTC to Y Urbit ship&rdquo;, and have it &ldquo;just work&rdquo;, without having to manage addresses at all.</li>
<li>During the process of (1), have your ship attach metadata to those payments that can be used by other Urbit apps. In the example above, if <code>~timluc-miptev</code> sends 0.001 BTC to <code>~sitful-hatred</code>, <code>~sitful-hatred</code>'s ship will record that the generated transaction on the BTC blockchain was initiated by <code>~timluc</code>.</li>
</ol>
</blockquote>
<blockquote>
<p>So now, <code>~sitful</code>'s ship has an receipt stored, saying that <code>~timluc</code>
sent 0.001 BTC on X date, and another app on <code>~sitful</code>'s ship could query that receipt store, and say &ldquo;send a group invite to My Cool Group to everyone who has paid me 0.001 BTC&rdquo;. Obviously more will need to be layered on in terms of grouping invoices etc, but it&rsquo;s pretty easy to see how this expands quickly and injects some really interesting information into Urbit.</p>
</blockquote>
<blockquote>
<p>So backing up one step to a simplified statement of the two initial goals:</p>
</blockquote>
<blockquote>
<ol>
<li>allow BTC payment between ships without worrying about underlying BTC details</li>
<li>generate receipts of BTC payments that other Urbit apps can use to give content access</li>
</ol>
</blockquote>
<p><img src="/sigils/sitful-chat.svg#floatsigil" alt="">: This sounds a lot like the services provided by several multi-billion dollar businesses. What are some of the immediate and second-order effects that it makes possible? What are the cool things that you want to see happen with it?</p>
<blockquote>
<p><img src="/sigils/timluc-chat.svg#floatsigil" alt="">: Right, so wrt those multi-billion dollar businesses: if Urbit gets a decent-sized userbase, and we can integrate Lightning, this absolutely heads down that road. I&rsquo;m extremely optimistic on both counts.</p>
</blockquote>
<blockquote>
<p>Immediate effects: can pay other Urbit ships easily and manage the information about who has paid you. The second-order effects should be a rapid growth in content-offering services on Urbit. Think Urbit Substack &ndash; we are probably 3-8 months away from a very very good and useable version of that existing.</p>
</blockquote>
<blockquote>
<p>Also member groups and forums should happen quite quickly as a result.</p>
</blockquote>
<blockquote>
<p>The next-order effects after that probably look like mini-Urbit virtual economies and communities forming. Urbit users can already provide a wide range of services to each other, and have significant outside income in general, and so I&rsquo;d expect to see that start to circulate internally a lot more.</p>
</blockquote>
<blockquote>
<p>Looking back at my answers, I think your implicit question is something like: &ldquo;what is different about this as opposed to existing BTC/Lightning capabilities outside of Urbit?&rdquo;</p>
</blockquote>
<blockquote>
<p>The answer is that Urbit&rsquo;s huge win is making your id+data programmable, and this adds &ldquo;money&rdquo; to that programmable id+data bundle, which is a ridiculously powerful upgrade.</p>
</blockquote>
<blockquote>
<p>Urbit without money is still pretty cool, and BTC without Urbit is still pretty damn useful/critical, but the two combined are &ldquo;civilization-complete&rdquo; (h/t <code>~naltyc-wornes</code>)</p>
</blockquote>
<h2 id="obviously-that-can-be-considered-mostly-a-failed-experiment-now-on-eth-but-its-happening-on-urbit-every-day">❛Obviously that can be considered mostly a failed experiment now on Eth&hellip; but it&rsquo;s happening on Urbit every day.❜</h2>
<p><img src="/sigils/sitful-chat.svg#floatsigil" alt="">: I love that &lsquo;civilization-complete&rsquo; phrase too. I&rsquo;ve also seen you use the term &lsquo;primitives&rsquo; in relation to this stuff, which I think is suggestive of how this can work as a basic building block for sophisticated possibilities. If I recall correctly, you&rsquo;ve mentioned elsewhere that you see this as kind of an alternative to previous efforts to build Eth layer 2 solutions that ran into intractable problems. What makes Urbit easier to work with for those purposes?</p>
<blockquote>
<p><img src="/sigils/timluc-chat.svg#floatsigil" alt="">: Let me start with &ldquo;primitives&rdquo;, since it&rsquo;s an over-used word that also gets thrown around a lot wrt the hilarious (and kinda fun) ponzis on DeFi. For me it means that I try to keep my focus on the 2 really simple goals I outlined above, and I don&rsquo;t consider the project complete until they are really clean, simple, and robust. As you note, the sophisticated possibilities emerge quite rapidly from that point.</p>
</blockquote>
<blockquote>
<p>In terms of Eth/Layer 2&hellip; as I mentioned, I got into Eth originally because I thought it could fulfill the promise of programmatic identity that could then participate in lots of different operations. One of the use cases that I really, really wanted to hit was offloading the networking/reputation-building that was typically done in cities to virtual worlds. Obviously that can be considered mostly a failed experiment now on Eth&hellip;.but it&rsquo;s happening on Urbit every day.</p>
</blockquote>
<blockquote>
<p>I didn&rsquo;t understand why Urbit was better until someone asked me to explain, clearly, why you couldn&rsquo;t just build an Urbit-like overlay in JS or whatever. As I worked it out and thought about why I liked programming on Urbit, I realized that it was because any project on these lines (letting multiple users interact on the Internet) ends up falling squarely into one of 3 buckets.</p>
</blockquote>
<blockquote>
<ol>
<li>Unix</li>
<li>&ldquo;Lines in a database&rdquo;&ndash;all the user interactions are managed by one central app that has simplistic possibilities (FB, Twitter, Insta)</li>
<li>your own OS</li>
</ol>
</blockquote>
<blockquote>
<p>Most projects realize they&rsquo;re going to have to do 3, and 3 is really hard, so they end up doing 1 or 2.</p>
</blockquote>
<blockquote>
<p>What makes Urbit easier to work with is simple: it stares 3 straight in the eye and goes for it.</p>
</blockquote>
<p><img src="/sigils/sitful-chat.svg#floatsigil" alt="">: Stepping back a little bit, lets talk some about how this is actually implemented. This software gives a ship the ability to interact with the BTC blockchain by allowing a ship to talk to a full node, right? what external software is required, and what is the setup/configuration process like?</p>
<blockquote>
<p><img src="/sigils/timluc-chat.svg#floatsigil" alt="">: So for the full answer, I&rsquo;d recommend the developer call:</p>
</blockquote>

<div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
  <iframe src="https://www.youtube.com/embed/LaWNHMmxQag" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video"></iframe>
</div>

<blockquote>
<p>But at a high level, it&rsquo;s fairly easy to explain.</p>
</blockquote>
<blockquote>
<p>Any Urbit ship can run a Urbit program called btc-provider, which lets you configure a full node to talk to. This is simply a matter of giving the URL of that full node and auth credentials. The most common case would be running the node locally.</p>
</blockquote>
<blockquote>
<p>Then that <code>btc-provider</code> program can act as a proxy for any Urbit ships that want to query the BTC blockchain. The program has some simple whitelisting commands: it stores a list of ships that are allowed to query through it.</p>
</blockquote>
<blockquote>
<p>There are currently 3 external software requirements for anyone who wants to run a full node and make it accessible through <code>btc-provider</code>:</p>
</blockquote>
<blockquote>
<ul>
<li>Fully sync&rsquo;d Bitcoin core (~350GB)</li>
<li><code>Electrs</code> for address indexing (BTC core doesn&rsquo;t have fast lookups of &ldquo;tell me the full history for X address&rdquo;)</li>
<li>A simple JS HTTP proxy that <code>btc-provider</code> calls out to, which makes calls to BTC core and <code>Electrs</code>, packages up their results, and sends back to the Urbit app.</li>
</ul>
</blockquote>
<blockquote>
<p>It&rsquo;s not the hardest install process, but core takes awhile to sync.</p>
</blockquote>
<blockquote>
<p>Install/setup looks like:</p>
</blockquote>
<blockquote>
<ol>
<li>Have Mac/Linux</li>
<li>Install <code>bitcoind</code></li>
<li>Sync the blockchain</li>
<li>Install Rust and then <a href="https://github.com/romanz/electrs">Electrs</a> (fairly easy)</li>
<li>Have Node installed</li>
<li>Run a script to start all 3 at once locally</li>
<li>Install <code>btc-provider</code> on your Urbit, and run a command like <code>:btc-provider|command [%set-credentials api-url='http://localhost:50002']</code></li>
</ol>
</blockquote>
<blockquote>
<p>At that point your ship is ready to accept BTC queries from the wallets on ships you&rsquo;ve whitelisted, including your own.</p>
</blockquote>
<h2 id="if-anyone-is-interested-there-is-plenty-to-be-done">❛If anyone is interested, there is plenty to be done.❜</h2>
<p><img src="/sigils/sitful-chat.svg#floatsigil" alt="">: If booting a ship can be a learning experience for most people, I&rsquo;d imagine even fewer would be running their own full node. Do you expect this would mostly be service operated by stars/galaxies for their children, digital sovereignty enthusiasts aside? And how difficult or practical do you think a lightweight node vane or Gall app may be?</p>
<blockquote>
<p><img src="/sigils/timluc-chat.svg#floatsigil" alt="">: Short answer: yes, I expect this to be mostly run by stars, for the reasons you state.</p>
</blockquote>
<blockquote>
<p>A light node Gall app is doable, it’s just a substantial project and I think getting the other stuff right is more important. Welcome to Urbit—way too much cool stuff to do, finite time. Order of operations matters.</p>
</blockquote>
<blockquote>
<p>This is analogous to how hosting works now: I run my own ship, but for friends/family who don’t care about privacy yet, I run ships for them. There’s a clear upgrade path if/when they do want it, and often that’s the best you can do in these situations—clear upgrade paths with low switching costs.</p>
</blockquote>
<p><img src="/sigils/sitful-chat.svg#floatsigil" alt="">: A question from my girlfriend: How novice-friendly is this implementation? Is this CLI-only or is there a GUI in the works?</p>
<blockquote>
<p><img src="/sigils/timluc-chat.svg#floatsigil" alt="">: GUI is happening. I’m polishing the backend now, and then I’ll be working with the Landscape team to integrate.</p>
</blockquote>
<p><img src="/sigils/sitful-chat.svg#floatsigil" alt="">: Very cool! For somebody excited about this kind of thing who wants to pick up where you left off, what are the next steps you&rsquo;d like to see taken, or features that require a little more investment, besides Lightning support?</p>
<blockquote>
<p><img src="/sigils/timluc-chat.svg#floatsigil" alt="">: So I think you&rsquo;re asking how programmers could contribute to this effort? The main area would be ongoing maintenance, polishing, and feature addition. I have a pretty clear roadmap for things that need to be added (one example: more efficient querying of block updates from the provider). Either I&rsquo;ll do those long-term, or else I&rsquo;ll pass them to someone else who is interested in this, which in turn would make me more available to start into Lightning or similar. If anyone is interested, there is plenty to be done.</p>
</blockquote>
<blockquote>
<p>To be clear: I&rsquo;m not &ldquo;leaving off&rdquo; until there is another good maintainer who is a single point of responsibility. If that never happens, I am fine to polish this forever myself; that&rsquo;s how important I think it is.</p>
</blockquote>
<p><img src="/sigils/sitful-chat.svg#floatsigil" alt="">: Yes, that&rsquo;s what I meant. I think that&rsquo;s an admirable approach to take, because I also think this is going to be one of the premier features in Urbit that draws new users and use cases. Things really seem like they&rsquo;re setting in place w/r/t Bitcoin and cryptocurrency becoming a permanent part of the financial landscape &ndash; obviously Bitcoin is at a stratospheric all time high as we speak, with lots of buy-in from big institutional investors that seems to me different from late 2017; I see more things starting to percolate out of the immediate sphere of crypto nerds and speculators, like Justin Murphy tokenizing his creative content; it looks like it&rsquo;s exceptionally good timing for this to be announced in terms of attention.</p>
<p>One last question and we&rsquo;ll call it a wrap, unless you have anything else you want to touch on: should Urbit move off of Eth, and if so, to what?</p>
<blockquote>
<p><img src="/sigils/timluc-chat.svg#floatsigil" alt="">: Man, this one is loaded. My answer is that Eth will leave Urbit no choice but to move off it because of scaleability issues, and my preference would be some sort of UrbitChain just for Urbit assets. We probably have a little bit of time left, and I&rsquo;m ok with other things being a bigger priority, but it&rsquo;s an issue. There was a lot of activity about this on urbit-dev in the summer, and then Eth asset prices went down. I&rsquo;m ok-ish if people want to go with something like optimistic rollups on Eth.</p>
</blockquote>
<blockquote>
<p>And to comment on your prior part about BTC becoming more of the landscape: actual BTC technical work is going very fast now, and it&rsquo;s a very exciting place to be just as the price rises.</p>
</blockquote>
<hr>
<p>Check out the <a href="https://grants.urbit.org/bounties">Urbit grant bounties</a> for more projects worthy of some attention. Big thanks again to <code>~timluc</code> for his generosity and time!</p>
<hr>
<p><em>This post is also available on Urbit, where you can post comments. Join <a href="web+urbitgraph://group/~matwet/networked-subject/">~matwet/networked-subject</a> and open the Networked Subject notebook.</em></p>
]]></content>
		</item>
		
		<item>
			<title>Urbit on Windows with WSL2</title>
			<link>https://subject.network/posts/urbit-wsl2/</link>
			<pubDate>Wed, 25 Nov 2020 17:18:36 -0600</pubDate>
			
			<guid>https://subject.network/posts/urbit-wsl2/</guid>
			<description>If you&amp;rsquo;re curious about Urbit but don&amp;rsquo;t know anything about running Linux binaries or don&amp;rsquo;t have a Mac, you don&amp;rsquo;t need to feel left out in the cold; Urbit runs just fine in WSL2 on Windows 10.
This tutorial will guide you through each step necessary to set up WSL and get an Urbit comet up and running. You don&amp;rsquo;t need to buy an address or learn any bash, you can just follow these directions and copy-paste the terminal commands.</description>
			<content type="html"><![CDATA[<p><a href=""><img src="/img/wsl-urbit.png" alt=""></a></p>
<p>If you&rsquo;re curious about Urbit but don&rsquo;t know anything about running Linux binaries or don&rsquo;t have a Mac, you don&rsquo;t need to feel left out in the cold; Urbit runs just fine in WSL2 on Windows 10.</p>
<p>This tutorial will guide you through each step necessary to set up WSL and get an Urbit comet up and running. You don&rsquo;t need to buy an address or learn any bash, you can just follow these directions and copy-paste the terminal commands.</p>
<p>Once you have Urbit installed for the first time, it requires very little effort to get it running. This process will take a bit of time, but once you&rsquo;re set up you can control your comet in your web browser.</p>
<p>You will need to get WSL2 and Ubuntu 18.04 set up, then install Urbit. WSL is Microsoft&rsquo;s official project to allow users to run a Linux operating system &lsquo;inside&rsquo; of Windows. Note that it is necessary to use <strong>WSL2</strong>. WSL2 virtualizes the operating system on the processor like VirtualBox, meaning you will be running a full instance of your Ubuntu off to the side of your Windows instance.</p>
<p><strong>2021 update</strong>: <em>An easier method for running Urbit on Windows with Docker Desktop is documented <a href="/posts/urbit-windows-docker/">here</a>. You will still need to follow the directions in this tutorial to install WSL2 if you don&rsquo;t already have it enabled.</em></p>
<h2 id="updating">Updating</h2>
<p>First,  you will need to update your Windows 10 installation to at least version <strong>1903</strong> build <strong>18917</strong>. You can check your Windows version by opening <code>Settings &gt; About</code>:</p>
<p><a href=""><img src="/img/wsl/wsl-01.png" alt=""></a></p>
<p>If your version is too low, you will need to update. Head here and use Microsoft’s installer:</p>
<p><a href="https://www.microsoft.com/en-us/software-download/windows10">https://www.microsoft.com/en-us/software-download/windows10</a></p>
<p><a href=""><img src="/img/wsl/wsl-02.png" alt=""></a></p>
<p>This may take a while, up to a few hours.</p>
<h2 id="enabling-wsl">Enabling WSL</h2>
<p>Once your update has completed, launch PowerShell. You can click the start button and start typing ‘powershell’; be sure to run it as an administrator.</p>
<p><a href=""><img src="/img/wsl/wsl-03.png" alt=""></a></p>
<p>Right click on the PowerShell window to paste this into it, and press enter it to enable WSL1:</p>
<div class="window" width="80%">
    <div class="titlebar">
      <div class="buttons">
        <div class="bclose">
        </div>
        <div class="minimize">
        </div>
        <div class="zoom">
        </div>
      </div>
      Windows PowerShell - 
    </div>
    <div class="termps">
      <ul>
        
        
        <li></li>
        
        
        <li>PS&nbsp;C:\>&nbsp;dism.exe&nbsp;/online&nbsp;/enable-feature&nbsp;/featurename:Microsoft-Windows-Subsystem-Linux&nbsp;/all&nbsp;/norestart&nbsp;</li>
        
        
        <li>&nbsp;</li>
        
        
        <li></li>
        
        
        <li></li>
          
      </ul>
    </div>
  </div>

<p><a href=""><img src="/img/wsl/wsl-04.png" alt=""></a></p>
<p>Now paste this command into PowerShell to enable virtualization (necessary for WSL2):</p>
<div class="window" width="80%">
    <div class="titlebar">
      <div class="buttons">
        <div class="bclose">
        </div>
        <div class="minimize">
        </div>
        <div class="zoom">
        </div>
      </div>
      Windows PowerShell - 
    </div>
    <div class="termps">
      <ul>
        
        
        <li></li>
        
        
        <li>PS&nbsp;C:\>&nbsp;dism.exe&nbsp;/online&nbsp;/enable-feature&nbsp;/featurename:VirtualMachinePlatform&nbsp;/all&nbsp;/norestart&nbsp;</li>
        
        
        <li>&nbsp;</li>
        
        
        <li></li>
        
        
        <li></li>
          
      </ul>
    </div>
  </div>

<p>Now you must restart your computer.</p>
<p>When you&rsquo;re back up, install this WSL update:</p>
<p><a href="https://wslstorestorage.blob.core.windows.net/wslblob/wsl_update_x64.msi">https://wslstorestorage.blob.core.windows.net/wslblob/wsl_update_x64.msi</a></p>
<p><a href=""><img src="/img/wsl/wsl-05.png" alt=""></a></p>
<p>Once this installation is complete, your computer is able to run WSL2.</p>
<h2 id="installation">Installation</h2>
<p>We will go ahead with one bonus option – Windows Terminal. If you’ve spent much time with the Windows command line, you probably don’t have very fond feelings about it. Fortunately, Microsoft has taken a few steps forward in this domain. Installing Windows Terminal is not necessary, but I prefer it.</p>
<p>Open the Microsoft Store and search for <code>windows terminal</code>:</p>
<p><a href=""><img src="/img/wsl/wsl-06.png" alt=""></a></p>
<p>Go ahead and install it; you can ignore and close the prompts to log  in.</p>
<p>Now search for <code>ubuntu 18.04</code> in the Windows store and install:</p>
<p><a href=""><img src="/img/wsl/wsl-07.png" alt=""></a></p>
<h2 id="running-wsl2">Running WSL2</h2>
<p>Once Ubuntu has completed installing, click the Launch button and enter a new username and password for your installation.</p>
<p>Now close it, open your admin PowerShell prompt again, and enter the following:</p>
<div class="window" width="80%">
    <div class="titlebar">
      <div class="buttons">
        <div class="bclose">
        </div>
        <div class="minimize">
        </div>
        <div class="zoom">
        </div>
      </div>
      Windows PowerShell - 
    </div>
    <div class="termps">
      <ul>
        
        
        <li></li>
        
        
        <li>PS&nbsp;C:\>&nbsp;wsl&nbsp;--set-version&nbsp;Ubuntu-18.04&nbsp;2&nbsp;</li>
        
        
        <li>&nbsp;</li>
        
        
        <li></li>
        
        
        <li></li>
          
      </ul>
    </div>
  </div>

<p>If your WSL install wasn’t already set to WSL2, it will be now (an issue I ran into). This is necessary for Urbit to work correctly. Make sure to follow this step!</p>
<p>If you open the installed Ubuntu shortcut directly, it will open in a normal command prompt, but you can also open WSL2 in Windows Terminal. Click the drop-down arrow to select your new Ubuntu VM:</p>
<p><a href=""><img src="/img/wsl/wsl-08.png" alt=""></a></p>
<p>Create a user and password if prompted, then run this to update the software:</p>
<div class="window" width="80%">
    <div class="titlebar">
      <div class="buttons">
        <div class="bclose">
        </div>
        <div class="minimize">
        </div>
        <div class="zoom">
        </div>
      </div>
      terminal: ~
    </div>
    <div class="termwin">
      <ul>
        
        
        <li></li>
        
        
        <li>$>&nbsp;sudo&nbsp;apt&nbsp;update&nbsp;&&&nbsp;sudo&nbsp;apt&nbsp;upgrade&nbsp;</li>
        
        
        <li>&nbsp;</li>
        
        
        <li></li>
        
        
        <li></li>
          
      </ul>
    </div>
  </div>

<p>(Note for novices – the <code>$&gt; </code> indicates that this is inside a command line, you do not need to enter those characters.)</p>
<p>Once this process has finished running, you now have a fully virtualized and up-to-date Linux computer running inside Windows!</p>
<p>In the command line you will be dropped into your Windows <code>C:\Users\</code> profile folder by default; for simplicity, use <code>cd</code> to navigate to your home folder in the command line. You can also access your Ubuntu filesystem in explorer by navigating to <code>\\wsl$</code> &ndash; Windows sees it as a network share.</p>
<p><a href=""><img src="/img/wsl/wsl-09.png" alt=""></a></p>
<p>Now all that’s left is to install Urbit, a simple process thanks to its static binaries.</p>
<h2 id="urbit">Urbit</h2>
<p>Paste the following commands into your terminal:</p>
<div class="window" width="80%">
    <div class="titlebar">
      <div class="buttons">
        <div class="bclose">
        </div>
        <div class="minimize">
        </div>
        <div class="zoom">
        </div>
      </div>
      terminal: ~
    </div>
    <div class="termwin">
      <ul>
        
        
        <li></li>
        
        
        <li>$>&nbsp;mkdir&nbsp;urbit</li>
        
        
        <li>$>&nbsp;cd&nbsp;urbit</li>
        
        
        <li>$>&nbsp;wget&nbsp;--content-disposition&nbsp;https://urbit.org/install/linux64/latest</li>
        
        
        <li>$>&nbsp;tar&nbsp;zxvf&nbsp;./linux64.tgz&nbsp;--strip=1</li>
        
        
        <li>$>&nbsp;./urbit</li>
        
        
        <li>&nbsp;</li>
        
        
        <li></li>
        
        
        <li></li>
          
      </ul>
    </div>
  </div>

<p>(Translating the above into english: 1. make a folder called urbit, 2. enter the folder, 3. download the urbit zip, 4. unzip it, 5. run it)</p>
<p>If everything has been successful, you will see the Urbit help menu printed:</p>
<p><a href=""><img src="/img/wsl/wsl-10.png" alt=""></a></p>
<p>Success! To launch a fresh comet, enter the following command:</p>
<div class="window" width="80%">
    <div class="titlebar">
      <div class="buttons">
        <div class="bclose">
        </div>
        <div class="minimize">
        </div>
        <div class="zoom">
        </div>
      </div>
      terminal: ~
    </div>
    <div class="termwin">
      <ul>
        
        
        <li></li>
        
        
        <li>$>&nbsp;./urbit&nbsp;-c&nbsp;mycomet&nbsp;</li>
        
        
        <li>&nbsp;</li>
        
        
        <li></li>
        
        
        <li></li>
          
      </ul>
    </div>
  </div>

<p>Booting a comet for the first time takes a few minutes, because you have to ‘mine’ an identity. This can take up to an hour, but in my experience is typically more like a few minutes. After an identity is mined, your comet will also need to download and compile its source code. Expect this process to take ~15 minutes total, but don&rsquo;t be alarmed if it takes longer. Subsequent boots with your comet do not require either step and should only take a few seconds.</p>
<p>Once the compile messages have settled down, you’ll see a message that probably says <code>web interface live on http://localhost:8080</code> – the port at the end may be different, but make of the address it gives you. You can visit this address in your web browser.</p>
<p>Now type <code>+code</code> in your urbit’s command line – it will present you with four hyphenated six-letter words. This is the passcode for your web interface.</p>
<p><a href=""><img src="/img/wsl/wsl-11.png" alt=""></a></p>
<p>Open your web browser and enter the address that was printed in the console; if you are not able to access your ship at <code>localhost</code> or <code>127.0.0.1</code>, go back to your Linux terminal (not your urbit&rsquo;s dojo) and enter <code>ip a</code> &ndash; it should give you an IP address that you can use to access your Ubuntu instance&rsquo;s network interface:</p>
<p><a href=""><img src="/img/wsl/wsl-14.png" alt=""></a></p>
<p>Once you&rsquo;ve loaded the web UI in your browser, enter the password that you were given by <code>+code</code>.</p>
<p><a href=""><img src="/img/wsl/wsl-12.png" alt=""></a></p>
<p>Welcome to your first urbit!</p>
<p><a href=""><img src="/img/wsl/wsl-13.png" alt=""></a></p>
<p>Click the first big square to go to your channel list; you can click the top bar to join groups. Feel free to hop into <code>~bitbet-bolbel/urbit-community</code> and <code>~matwet/networked-subject</code> if you want to chat!</p>
<h2 id="booting-a-planet">Booting a planet</h2>
<p>If you&rsquo;re ready to boot a planet, you can purchase one from <a href="https://subject.network/planet-sales/">one of these providers</a>, or perhaps receive one from a friend. Note that you will almost definitely need to pay with ETH or BTC if you purchase one.</p>
<p>To receive your planet, you can <a href="https://subject.network/posts/accepting-point/">follow these directions</a>. Proceed through the instructions to download your keyfile, and return to this page.</p>
<p>Now for the Windows-specific instructions: once you&rsquo;ve gotten as far as downloading your keyfile from Bridge, it will likely have downloaded to your Windows &lsquo;Downloads&rsquo; folder or similar. In order to access it easily, let&rsquo;s copy it into our WSL home directory.</p>
<p>Copy your keyfile, and navigate to this location with Explorer, replacing &lsquo;username&rsquo; with whatever name you gave your account in WSL:</p>
<pre><code>\\wsl$\Ubuntu\home\username\
</code></pre><p>Paste the keyfile, and open your WSL command line again. Navigate to your home folder with <code>cd</code>.</p>
<p>Now, for launch &ndash; run the following command, modified with the name of your keyfile/planet:</p>
<div class="window" width="80%">
    <div class="titlebar">
      <div class="buttons">
        <div class="bclose">
        </div>
        <div class="minimize">
        </div>
        <div class="zoom">
        </div>
      </div>
      terminal: ~
    </div>
    <div class="termwin">
      <ul>
        
        
        <li></li>
        
        
        <li>$>&nbsp;./urbit/urbit&nbsp;-w&nbsp;sampel-palnet&nbsp;-k&nbsp;~/sampel-palnet-1.key</li>
        
        
        <li>&nbsp;</li>
        
        
        <li></li>
        
        
        <li></li>
          
      </ul>
    </div>
  </div>

<p>If you&rsquo;ve pointed the command at the correct location for the binary, your planet should boot! If you ever want to move your planet off of this computer, you can simply upload the folder that was just created in your home directory to another computer.</p>
<p>Once your urbit has booted successfully, you can delete the keyfile. You do not need it after the first launch. To boot your ship in the future, just navigate to your home directory and run the urbit binary pointed at your pier:</p>
<div class="window" width="80%">
    <div class="titlebar">
      <div class="buttons">
        <div class="bclose">
        </div>
        <div class="minimize">
        </div>
        <div class="zoom">
        </div>
      </div>
      terminal: ~
    </div>
    <div class="termwin">
      <ul>
        
        
        <li></li>
        
        
        <li>$>&nbsp;./urbit/urbit&nbsp;sampel-palnet</li>
        
        
        <li>&nbsp;</li>
        
        
        <li></li>
        
        
        <li></li>
          
      </ul>
    </div>
  </div>

<h2 id="troubleshooting--misc">Troubleshooting &amp; misc</h2>
<ul>
<li>Full official documentation for basic use of your ship can be found <a href="https://urbit.org/using/operations/using-your-ship/">here</a>.</li>
</ul>
<hr>
<ul>
<li>If you want to turn off your urbit, open your command line and press <code>ctrl-d</code> (or <code>ctrl-z</code> to force quit).</li>
</ul>
<hr>
<ul>
<li>In the future, if you want to restart your urbit but don&rsquo;t know which steps to follow, you can just enter these commands in your Ubuntu terminal:</li>
</ul>
<h2 id="hahahugoshortcode-s8-hbhb"><div class="window" width="80%">
    <div class="titlebar">
      <div class="buttons">
        <div class="bclose">
        </div>
        <div class="minimize">
        </div>
        <div class="zoom">
        </div>
      </div>
      terminal: ~
    </div>
    <div class="termwin">
      <ul>
        
        
        <li></li>
        
        
        <li>$>&nbsp;cd&nbsp;~/urbit</li>
        
        
        <li>$>&nbsp;./urbit&nbsp;~/mycomet&nbsp;</li>
        
        
        <li>&nbsp;</li>
        
        
        <li></li>
        
        
        <li></li>
          
      </ul>
    </div>
  </div>
</h2>
<ul>
<li>If your urbit command line is filled with lines that say <code>loom: clear timer failed Invalid argument</code> and you can&rsquo;t load the browser interface after logging in, it&rsquo;s because you are using WSL1 instead of 2. Scroll <a href="#running-wsl2">back up</a> and repeat the instructions to enable WSL2. You may need to delete and recreate your comet.</li>
</ul>
<p>The best place for support off the network is the official <a href="https://discord.gg/n9xhMdz">Discord</a> server. Feel free to reach out to me <a href="https://twitter.com/_matwet">on Twitter</a> if you&rsquo;re having any  trouble as well &ndash; I can&rsquo;t guarantee timely support, but I am happy to help if I can.</p>
<hr>
<p>You can even cloud host your ship for free, with <a href="https://www.oracle.com/cloud/free/">Oracle Cloud VM</a>&rsquo;s free tier. If you want instructions for  setting up a server via SSH, you can do so via <a href="https://subject.network/posts/free-cloud-oracle/">this tutorial</a>. This is a great next step!</p>
<hr>
<p><em>This post is also available on Urbit, where you can post comments. Join <a href="web+urbitgraph://group/~matwet/networked-subject/">~matwet/networked-subject</a> and open the Networked Subject notebook.</em></p>
]]></content>
		</item>
		
		<item>
			<title>%graph-store: Social-optimized graph database</title>
			<link>https://subject.network/posts/graph-store/</link>
			<pubDate>Sun, 08 Nov 2020 11:53:01 -0600</pubDate>
			
			<guid>https://subject.network/posts/graph-store/</guid>
			<description>For a few months, a new piece of architecture has been quietly added to Urbit. A component called %graph-store has been rolled out to replace the bespoke databases previously used by the chat, publish, and link collection apps. The design and development of %graph-store was spearheaded by ~tacryt-socryp, a Tlon employee.
In brief, %graph-store is a flexible, interoperable database format purpose-built to accomodate social software. It&amp;rsquo;s urbit-native, but can be programmed and queried externally like any other database.</description>
			<content type="html"><![CDATA[<p><img src="/img/graphdb.png" alt=""></p>
<p>For a few months, a new piece of architecture has been quietly added to Urbit. A component called <code>%graph-store</code> has been rolled out to replace the bespoke databases previously used by the chat, publish, and link collection apps. The design and development of <code>%graph-store</code> was spearheaded by <code>~tacryt-socryp</code>, a Tlon employee.</p>
<p>In brief, <code>%graph-store</code> is a flexible, interoperable database format purpose-built to accomodate social software. It&rsquo;s urbit-native, but can be programmed and queried externally like any other database.</p>
<p>You can watch a recent community discussion stream <a href="https://www.youtube.com/watch?v=E4DFuAZQ32Y">here</a>; this post was distilled from ~tacryt&rsquo;s presentation and the <a href="https://docs.google.com/document/d/1-Gwfg442kV3cdfG7NnWPEf2TMa3uLUTAKkZD70ALZkE/edit">proposal document</a> he sent out to the urbit-dev mailing list.</p>
<h3 id="graph-databases">Graph databases</h3>
<p>In order to give a deeper description, it is helpful to establish what a graph database is; I find that one of the best ways to understand something is to compare it to something different but related. So to begin, a bite-sized explanation of relational databases.</p>
<p><img src="/img/relational.png" alt=""></p>
<ul>
<li><em>a representation of a relational database</em></li>
</ul>
<p>If you&rsquo;ve written any SQL, you already have an idea of what a relational database is. This is what most people mean when they say database &ndash; a collection of tables containing a list of items and their associated attributes, where one can generate new tables by querying their contents. It is basically a spreadsheet you program to spit out other spreadsheets.</p>
<p>Relational databases are most useful for highly structured data, like a phonebook. They are not optimized for relating a list of many things to another list of many things &ndash; eg, generating a Kevin Bacon-style list of who-knows-who. They can do these things, but not efficiently, and with exponentially more difficulty as scale increases.</p>
<p><img src="/img/analog-graph.jpg" alt=""></p>
<ul>
<li><em>an analog implementation of a graph database</em></li>
</ul>
<p>Graph databases are a more recent innovation that have become very popular and powerful in the last couple of decades, thanks in part to their utility in modeling human relations and interactions. In a graph database, items are &lsquo;nodes&rsquo;, and are connected to other items with &lsquo;edges&rsquo; (or &lsquo;relationships&rsquo;). That is to say, the relationship between two pieces of data is explicit, stored as its own piece of data, and not something that has to be defined and looked up in another table. This makes it much more efficient to work with pieces of data that are connected in complex ways.</p>
<h3 id="graph-store">%graph-store</h3>
<p>In order to think about what kind of database would be useful for social software content, it helps to step back and think of what exactly social software <em>does</em> abstractly; a reasonable answer is that it allows users to assume an identity to post text or media in a threaded, chronological format. Everything from 4chan to Twitter to Discord is some variation of this basic function with various bells, whistles, and constraints.</p>
<p><code>%graph-store</code> is a data structure meant to accommodate the data generated by this kind of digital social activity. In the linked presentation, ~tacryt mentions targeting Twitter&rsquo;s functionality with <code>%graph-store</code> because minus the character limit, it&rsquo;s the most flexible of the major social media services in terms of how content can be threaded. Most other modes of social content &ndash; forums, blog posts + comments, chats &ndash; could be whittled out of the Twitter format.</p>
<p><code>%graph-store</code> runs as a Gall application in userspace, acting as a database microservice. Applications can interact with it with commands (<code>%poke</code>), queries (<code>%peek</code>), or subscriptions (<code>%watch</code>). Other applications perform all of their  operations on data with these basic functions.</p>
<p>Under the hood, <code>%graph-store</code> graphs are trees of nodes numbered in descending order. This is an optimization for displaying the most recently appended content first, which is typical of social applications. Nodes contain a post, as well as another graph. That graph can either be empty, or contain the node&rsquo;s children &ndash; i.e. its replies.</p>
<p>Since Nock only understands binary trees, these graphs don&rsquo;t have cycles like other graph databases, but rather &lsquo;virtual cycles&rsquo; where any node can refer to any other node.</p>
<p><img src="/img/graph-store.jpg" alt=""></p>
<ul>
<li><em>image taken from ~tacryt&rsquo;s presentation</em></li>
</ul>
<p>A post itself contains a list of contents, metadata, a truncated hash of the post&rsquo;s noun, and signatures. The contents of the post can contain text, mentions (which hook into the notification system), URLs, executable code(!), and references to other nodes. ~tacryt also mentions future plans for supporting dynamic data content.</p>
<p>As a result of having a hash and signatures, all posts are cryptographically attested, not just by the post but by its children. This means that data cannot be deleted, only appended, and that you can be certain of the validity of the content. Urbit&rsquo;s strong type system also means that data stored in <code>%graph-store</code> is always strongly validated.</p>
<p>This collection of traits is unique and powerful; it also acts as a fundamental structure that can be shared by many types of software. For example, the chatting and blogging apps within Urbit both make use of it, only applying different semantics to the content of the graph. New uses are as simple as creating a new validation schema. Cryptographic validation opens up new possibilities for what posts can do, by offering blockchain-style security and legally legible guarantees.</p>
<p>Most interesting to me is the possibility of collating graph content across apps; no longer will your tweets need to be siloed from your essays or music playlists. The social data you generate across disparate services will truly be a single corpus of content &ndash; one big database you can pick up and take with you, and one that actually belongs to you, even in a cryptographically verifiable sense.</p>
<p><code>%graph-store</code> is not just limited to applications running on Urbit; Urbit has an an HTTP API with implementations in JS, Go, and Python. External clients can take advantage of it without having to program any Hoon &ndash; one could build e.g. a graph explorer application in Python, or forum webapp in JS, which interact with your graph data by querying through Airlock, Urbit&rsquo;s API.</p>
<p><img src="/img/katamari.jpg" alt=""></p>
<p>When I describe Urbit to people, I always find myself using the metaphor of a Katamari picking up all the pieces of technology spread across other peoples&rsquo; servers and hooking them into each other on your behalf; <code>%graph-store</code> reflects and extends this. It&rsquo;s exciting to consider what new kind of technology might come of it.</p>
<hr>
<h3 id="external-links">External links</h3>
<p>Proposal document &ndash; <a href="https://docs.google.com/document/d/1-Gwfg442kV3cdfG7NnWPEf2TMa3uLUTAKkZD70ALZkE/edit">https://docs.google.com/document/d/1-Gwfg442kV3cdfG7NnWPEf2TMa3uLUTAKkZD70ALZkE/edit</a></p>
<p>Developer Call presentation &ndash; <a href="https://www.youtube.com/watch?v=E4DFuAZQ32Y">https://www.youtube.com/watch?v=E4DFuAZQ32Y</a></p>
<hr>
<p><em>This post is also available on Urbit, where you can post comments. Join <a href="web+urbitgraph://group/~matwet/networked-subject/">~matwet/networked-subject</a> and open the Networked Subject notebook.</em></p>
]]></content>
		</item>
		
		<item>
			<title>Anglo-American Wikipaedia Vol. I</title>
			<link>https://subject.network/posts/anglo-american-cyclopaedia-v1/</link>
			<pubDate>Sun, 01 Nov 2020 12:43:28 -0600</pubDate>
			
			<guid>https://subject.network/posts/anglo-american-cyclopaedia-v1/</guid>
			<description>Like any burgeoning digital subculture, Urbit users love memeing. In the interest of generating a record of the early visual culture of Urbit without relying on Twitter for discovery, Networked Subject hosts a public aggregator for Urbit memes.
You can join ~matwet/networked-subject, the public group associated with this blog, to share or submit content. The Martian Meme Depository is a casual chat room for sharing memes; the Anglo-American Wikipaedia notebook is a curated archive of its contents.</description>
			<content type="html"><![CDATA[<p><img src="/img/urbit-meme-header.png" alt=""></p>
<p>Like any burgeoning digital subculture, Urbit users love memeing. In the interest of generating a record  of the early visual culture of Urbit without relying on Twitter for discovery, Networked Subject hosts a public aggregator for Urbit memes.</p>
<p>You can join <code>~matwet/networked-subject</code>, the public group associated with this blog, to share or submit content. The Martian Meme Depository is a casual chat room for sharing memes; the Anglo-American Wikipaedia notebook is a curated archive of its contents. This edition of the AAW will be published to the NetSub blog, but future collections will be exclusive to Urbit.</p>
<p><img src="https://subject.network/img/meme-dchem-1.png" alt=""></p>
<p>I will try to give proper attribution for all memes where possible. <code>(?)</code> denotes uncertain provenance. If you have any corrections or comments, please join one of our chats!</p>
<hr>
<p><img src="/img/meme-rovnys-ricfer-3.jpg" alt=""></p>
<p><code>~rovnys-ricfer</code> <code>(?)</code></p>
<hr>
<p><img src="/img/meme-rivpyl-sidfyl-1.jpg" alt=""></p>
<p><code>rivpyl-sidfyl</code></p>
<hr>
<p><img src="/img/meme-nartes-fasrum-2.jpg" alt=""></p>
<p><code>~nartes-fasrum</code></p>
<hr>
<p><img src="/img/meme-fonnyx-nopmer-1.jpg" alt=""></p>
<p><code>~fonnyx-nopmer</code></p>
<hr>
<p><img src="/img/meme-tanlev-sollex-1.jpg" alt=""></p>
<p><code>~tanlev-sollex</code></p>
<hr>
<p><img src="/img/meme-radbur-sivmus-1.jpg" alt=""></p>
<p><code>~radbur-sivmus</code></p>
<hr>
<p><img src="/img/meme-minder-folden-1.jpg" alt=""></p>
<p><code>~minder-folden</code></p>
<hr>
<p><img src="/img/meme-palfun-foslup-1.jpg" alt=""></p>
<p><code>~palfun-foslup</code></p>
<hr>
<p><img src="/img/meme-nartes-fasrum-3.jpg" alt=""></p>
<p><code>~nartes-fasrum</code></p>
<hr>
<p><img src="/img/meme-fonnyx-nopmer-2.jpg" alt=""></p>
<p><code>~fonnyx-nopmer</code></p>
<hr>
<p><img src="/img/meme-chixculube.jpg" alt=""></p>
<p><code>~nartes-fasrum</code> (via <code>@chixculube</code>)</p>
<hr>
<p><img src="/img/meme-litmus-ritten-1.jpg" alt=""></p>
<p>urbit-tan by <code>~litmus-ritten</code></p>
<hr>
<p><img src="/img/meme-urbit-1.jpg" alt=""></p>
<p><code>@urbit</code></p>
<hr>
<p><img src="/img/meme-nartes-fasrum-1.jpg" alt=""></p>
<p><code>~nartes-fasrum</code></p>
<hr>
<p><img src="/img/meme-tocrex-holpen-1.jpg" alt=""></p>
<p>one of a series of <a href="https://twitter.com/tocrexholpen/media">galaxy girls</a> by <code>~tocrex-holpen</code></p>
<hr>
<p><img src="/img/meme-minder-folden-2.png" alt=""></p>
<p><code>~minder-folden</code></p>
<hr>
<p><img src="/img/meme-nartus-fasrum-4.jpg" alt=""></p>
<p><code>~nartus-fasrum</code></p>
<hr>
<p><img src="/img/meme-minder-folden-3.jpg" alt=""></p>
<p><code>~minder-folden</code></p>
<hr>
<p><img src="/img/meme-rovnys-ricfer-1.jpg" alt=""></p>
<p><code>~rovnys-ricfer</code></p>
<hr>
<p><img src="/img/meme-rovnys-ricfer-2.png" alt=""></p>
<p><code>~rovnys-ricfer</code> <code>(?)</code></p>
<hr>
<p><img src="/img/meme-urbit-2.jpg" alt=""></p>
<hr>
<p><img src="/img/meme-palfun-foslup-2.jpg" alt=""></p>
<p><code>~palfun-foslup</code> <code>(?)</code></p>
<hr>
<p><em>This post is also available on Urbit, where you can post comments. Join <a href="web+urbitgraph://group/~matwet/networked-subject/">~matwet/networked-subject</a> and open the Networked Subject notebook.</em></p>
]]></content>
		</item>
		
		<item>
			<title>Accepting an Azimuth point</title>
			<link>https://subject.network/posts/accepting-point/</link>
			<pubDate>Sat, 17 Oct 2020 15:50:21 -0500</pubDate>
			
			<guid>https://subject.network/posts/accepting-point/</guid>
			<description>So, somebody has offered you an urbit; how do you accept it?
If you aren&amp;rsquo;t familiar with managing Ethereum tokens, this might seem a bit confusing. I promise it&amp;rsquo;s pretty easy, but does require a short walkthrough if you are not experienced with managing crypto tokens. I will try to be as clear as possible in my instructions without getting lost in the technical weeds.
Note that this process is not necessary should you opt for hosted services, or should you decide to run a comet.</description>
			<content type="html"><![CDATA[<p><a href=""><img src="/img/starchart2.jpg" alt=""></a></p>
<p>So, somebody has offered you an urbit; how do you accept it?</p>
<p>If you aren&rsquo;t familiar with managing Ethereum tokens, this might seem a bit confusing. I promise it&rsquo;s pretty easy, but does require a short walkthrough if you are not experienced with managing crypto tokens. I will try to be as clear as possible in my instructions without getting lost in the technical weeds.</p>
<p>Note that this process is <strong>not necessary</strong> should you opt for <strong><a href="https://tlon.io">hosted</a></strong> <a href="https://www.geturbitid.com/">services</a>, or should you decide to run a <a href="https://urbit.org/using/install/#macos-and-linux">comet</a>. If you&rsquo;ve never used Urbit before, you should boot a comet first! Note also that this process requires you to pay several ethereum <strong>transaction fees</strong> to interact with the contracts that record ownership, which you should expect to cost ~10-20USD as of late 2020. However, this should only take you a couple of minutes, and you only have to do it once.</p>
<p>First, a little glossary:</p>
<blockquote>
<ul>
<li><code>Urbit</code> can refer both to the overall software project, or an individual instance of its operating system (more properly called a &lsquo;ship&rsquo;). See <a href="/posts/urbit-introduction/">here</a> for a more detailed description of the project</li>
<li><code>Azimuth</code> is Urbit&rsquo;s PKI on Ethereum &ndash; in short, it&rsquo;s a decentralized database of who owns what, represented as tokens owned by wallets</li>
<li>An <code>Azimuth point</code> (AZP) refers to an individual Ethereum token on Azimuth, representing ownership of an address on Urbit&rsquo;s network</li>
<li><code>Bridge</code> is a tool that interacts with the Ethereum blockchain, which you can use to manage and modify ownership of your ship</li>
</ul>
</blockquote>
<p>A brief summary of what this guide will tell you how to do, so that you can keep it in your head as we proceed: We are going to install the Metamask browser extension, find the wallet address it gives us, pass that on to the person issuing our Azimuth point, and once it is received and confirmed, we will log onto the Urbit Bridge to claim our master ticket &ndash; the password that proves ultimate ownership of an Azimuth point. Then we will download a keyfile so that we can boot our ship for the first time. Let&rsquo;s begin!</p>
<h2 id="metamask">Metamask</h2>
<p>You will need to install <a href="https://metamask.io/download.html">Metamask</a> in the browser of your choice. Metamask is a browser extension that functions as a cryptocurrency wallet, specifically for Ethereum. It&rsquo;s used in a range of <a href="https://education.district0x.io/general-topics/understanding-ethereum/understanding-dapps/">decentralized apps</a> (&lsquo;DApps&rsquo;), but you don&rsquo;t need to worry about this stuff; the thing to understand is that you will use this piece of software to accept a token and prove that you own it.</p>
<p>Once you&rsquo;ve installed the extension in your browser, you&rsquo;ll be presented with a welcome screen and asked whether you&rsquo;re creating or importing a wallet. You will select <strong>create</strong> a wallet.</p>
<p><a href=""><img src="/img/metamask-1.png" alt=""></a></p>
<p>You will then be prompted to create a password. Use a very strong one.</p>
<p><a href=""><img src="/img/metamask-2.png" alt=""></a></p>
<p>Metamask will then give you a secret backup phrase; <strong>write this down somewhere safe</strong>. You can use this phrase to recover your wallet if you need to install Metamask on another computer. It is bad practice to keep this saved on your computer &ndash; treat it as something precious.</p>
<p><a href=""><img src="/img/metamask-3.png" alt=""></a></p>
<p>You will then be presented with the main menu for Metamask. Click the menu icon at the top right, then select &lsquo;Account details&rsquo;:</p>
<p><a href=""><img src="/img/metamask-4.png" alt=""></a></p>
<p>You&rsquo;ll see a QR code and a text bar with a long alphanumeric string. This string is your wallet address, which will receive your Azimuth point. Copy it and send it to the person that is giving it to you.</p>
<p>You will also need to send funds to this wallet address. Buying or obtaining ETH is outside of the scope of this tutorial, but you probably have a friend who can suggest a way of getting it.</p>
<p><a href=""><img src="/img/metamask-5.png" alt=""></a></p>
<p>Once the other party has issued the point, you will see a transaction appear underneath the &lsquo;Activity&rsquo; navigation header. Click this and keep an eye on it.</p>
<p><a href=""><img src="/img/metamask-6.png" alt=""></a></p>
<p>Once your transaction has shown up under Activity, after a few minutes depending on transaction speed, you will see a green block next to it with &lsquo;Confirmed&rsquo;. This means that the transaction has begun and will belong to you after you have accepted it.</p>
<h2 id="bridge">Bridge</h2>
<p>Now that you have been sent the token that proves ownership of your ship, you can log into Bridge to accept the point and issue the master ticket you can put in cold storage, and the keyfile you can use to boot the OS.</p>
<p>A note here: this requires ETH gas fees, specifically for receiving the point and transferring it to your master ticket. As of writing (late 2020), this fee can get pretty high; you can wait until gas prices drop to minimize the expense, but don&rsquo;t be surprised if this costs you an extra 20USD on a bad day. Keep an eye on <a href="https://ethgasstation.info/">gas prices</a> and wait for an advantageous time. (High fees are a reason that <a href="https://groups.google.com/a/urbit.org/g/dev/c/RafCVjZIUaQ/m/Jv_jaafNAgAJ">debate</a> has <a href="https://groups.google.com/a/urbit.org/g/dev/c/30GjqVNqcHM/m/Lmp8jwrTAgAJ">begun</a> about moving away from Ethereum for the Urbit PKI.)</p>
<p>Go to <a href="https://bridge.urbit.org">bridge.urbit.org</a> and click &lsquo;Metamask, Mnemonic, Hardware Wallet&hellip;&rsquo; at the bottom:</p>
<p><a href=""><img src="/img/bridge-1.png" alt=""></a></p>
<p>Expand the Metamask menu, and click the button that gives it access to your browser extension, then give it permission when prompted by Metamask. Proceed by clicking &lsquo;Login as 0x&hellip;.&rsquo;.</p>
<p>Once you&rsquo;ve logged into bridge, you will be prompted to accept the transfer of your planet. Click to accept &ndash; this will automtically deduct ETH from your Metamask wallet to pay for the transaction.</p>
<p>Once you&rsquo;re on the main Bridge dashboard, you will see a menu with several options for managing your Azimuth point. Click &lsquo;ID&rsquo;:</p>
<p><a href=""><img src="/img/bridge-3.png" alt=""></a></p>
<p>Click &lsquo;Transfer to Master Ticket&rsquo;. <strong>Do not click this more than once.</strong> This incurs four transaction fees to create sub-wallets with delegated privileges; however, you do not need to pay any more fees after this is finished.</p>
<p><a href=""><img src="/img/bridge-5.5.png" alt=""></a></p>
<p>Now click &lsquo;Download Keys&rsquo;, and click &lsquo;Download passport&rsquo;. You will be taken to another page that with a download button.</p>
<p><a href=""><img src="/img/bridge-5.png" alt=""></a></p>
<p><strong>Your paper wallet contains your ship&rsquo;s master key</strong>, a passphrase that proves ultimate ownership in the same way as your Ethereum wallet. You will also be given a few other keys you can use to take actions at lower privilege levels. Print these off for safekeeping and delete the file; treat this as something precious as well.</p>
<p>In the future if you wish to use Bridge, you can use the master key you just downloaded instead of Metamask. I find this preferable to authenticating with Metamask.</p>
<p>Now we will proceed to download your Arvo keyfile so that you can boot your ship for the first time. Go back to the main menu in Bridge and click &lsquo;OS&rsquo;:</p>
<p><a href=""><img src="/img/bridge-6.png" alt=""></a></p>
<p>Click the &lsquo;Download Arvo Keyfile button&rsquo;.</p>
<p><a href=""><img src="/img/bridge-7.png" alt=""></a></p>
<p>You will be given a file named &lsquo;[ship-name]-1.key&rsquo; &ndash; you will use this to boot your ship for the first time, but <strong>only</strong> the first time.</p>
<p>Congrats on making it to the end! You now have an urbit and the keys to boot and manage it. You&rsquo;re ready.</p>
<p>Instead of writing the installation instructions out, I advise you to proceed to the <a href="https://urbit.org/using/install/#boot-your-planet">official</a> instructions provided by Tlon.</p>
<hr>
<p><em>This post is also available on Urbit, where you can post comments. Join <a href="web+urbitgraph://group/~matwet/networked-subject/">~matwet/networked-subject</a> and open the Networked Subject notebook.</em></p>
]]></content>
		</item>
		
		<item>
			<title>%duiker &amp; %serval: bittorrent on Urbit</title>
			<link>https://subject.network/posts/duiker-serval/</link>
			<pubDate>Sat, 10 Oct 2020 17:32:53 -0500</pubDate>
			
			<guid>https://subject.network/posts/duiker-serval/</guid>
			<description>%duiker/%serval is a spanking-new software suite for running an Urbit-native bittorrent tracker, developed by ~palfun-foslup with ~paldev. (Astute readers may note the sly references.)
This is both a tracker and a command line interface for users to post and retrieve magnet links, which hooks into Urbit&amp;rsquo;s identity system, and is written in a combined ~1,400(!) lines of Hoon, the Urbit system programming language.
Note that this is not a client for downloading torrents; think of it like a torrent site you can only access through your dojo.</description>
			<content type="html"><![CDATA[<p><a href=""><img src="/img/duikers.jpg" alt=""></a></p>
<p>%duiker/%serval is a <a href="https://groups.google.com/u/1/a/urbit.org/g/dev/c/7hm3MGsmL_4">spanking-new</a> software suite for running an Urbit-native bittorrent tracker, developed by <code>~palfun-foslup</code> with <code>~paldev</code>. (Astute readers may note the <a href="https://github.com/WhatCD/Gazelle">sly</a> <a href="https://github.com/WhatCD/Ocelot">references</a>.)</p>
<p>This is both a tracker and a command line interface for users to post and retrieve magnet links, which hooks into Urbit&rsquo;s identity system, and is written in a combined ~1,400(!) lines of Hoon, the Urbit system programming language.</p>
<p>Note that this is not a client for downloading torrents; think of it like a torrent site you can only access through your dojo.</p>
<p><a href=""><img src="/img/duiker-cli.png" alt=""></a></p>
<h2 id="duiker">%duiker</h2>
<p><a href="https://github.com/Fang-/suite/blob/master/app/duiker.hoon">%duiker</a> is the frontend pictured above. Right now, you can use your urbit to connect to <code>~paldev</code>'s %serval instance and add or retrieve magnet links by running this in your dojo:</p>
<div class="window">
    <div class="titlebar">
      <div class="buttons">
        <div class="bclose">
        </div>
        <div class="minimize">
        </div>
        <div class="zoom">
        </div>
      </div>
      urbit - sampel-palnet
    </div>
    <div class="termdojo">
      <ul>
        
        
        <li></li>
        
        
        <li>~sampel-palnet:dojo>&nbsp;|link&nbsp;~paldev&nbsp;%duiker</li>
        
        
        <li>&nbsp;</li>
        
        
        <li></li>
        
        
        <li></li>
          
      </ul>
    </div>
  </div>

<p>This will drop you right into the tracker; press <code>?</code> and it will provide you with a hefty wall of text on how to use it! The basic navigation is pretty simple, you can list torrents and page through them:</p>
<div class="window">
    <div class="titlebar">
      <div class="buttons">
        <div class="bclose">
        </div>
        <div class="minimize">
        </div>
        <div class="zoom">
        </div>
      </div>
      urbit - sampel-palnet
    </div>
    <div class="termdojo">
      <ul>
        
        
        <li></li>
        
        
        <li>.	reprint&nbsp;the&nbsp;file&nbsp;list</li>
        
        
        <li>r	refresh&nbsp;the&nbsp;file&nbsp;list</li>
        
        
        <li>[	previous&nbsp;page</li>
        
        
        <li>]	next&nbsp;page</li>
        
        
        <li><	first&nbsp;page</li>
        
        
        <li>>	last&nbsp;page</li>
        
        
        <li>0-9	view&nbsp;file&nbsp;details</li>
        
        
        <li>~paldev:duiker>&nbsp;</li>
        
        
        <li></li>
        
        
        <li></li>
          
      </ul>
    </div>
  </div>

<p>The UI automatically refreshes as you press the keys; it&rsquo;s a very retro-computing vibe.</p>
<p>As of writing there are only about a dozen torrents posted, so there isn&rsquo;t a lot to traverse. You can also perform searches by text, tags, and uploader (<code>@p</code>).</p>
<p>Switch back to dojo or cli-chat by pressing <code>ctrl-x</code>. If you&rsquo;re ready to disconnect your %duiker session, simply unlink in dojo:</p>
<div class="window">
    <div class="titlebar">
      <div class="buttons">
        <div class="bclose">
        </div>
        <div class="minimize">
        </div>
        <div class="zoom">
        </div>
      </div>
      urbit - sampel-palnet
    </div>
    <div class="termdojo">
      <ul>
        
        
        <li></li>
        
        
        <li>~paldev:duiker>&nbsp;|unlink&nbsp;~paldev&nbsp;%duiker</li>
        
        
        <li>&nbsp;</li>
        
        
        <li></li>
        
        
        <li></li>
          
      </ul>
    </div>
  </div>

<p>It&rsquo;s a little laggy, since you&rsquo;re basically connecting to a TTY, but I found it perfectly serviceable every time I&rsquo;ve played with it.</p>
<h2 id="serval">%serval</h2>
<p><a href="https://github.com/fang-/suite/blob/master/app/serval.hoon">%serval</a> is the backend.  Under the hood, it&rsquo;s an HTTP torrent tracker. Like a traditional private tracker, you&rsquo;re given a private announce URL that&rsquo;s specific to your <code>@p</code>, which allows it to keep track of uploaders and up/down ratio per user. It also seems like it would be an easy thing to extend into invitation-only, or hook into other social software you&rsquo;re running with your friends.</p>
<p><code>~palfun</code> also mentions in the announcement post a potential future goal of allowing users to upload and download .torrent files through a web UI, to make it more functional as a proper private tracker. At the moment it works solely with magnet links, which typically don&rsquo;t even require trackers, but use DHT.</p>
<p>[<em>Jan 2021 update:</em> A new version of %serval now supports .torrent files &ndash; connecting to %serval in the web dojo allows you to download them.]</p>
<h2 id="adding-and-downloading-torrents">Adding and downloading torrents</h2>
<p>If you&rsquo;ve ever created a torrent before, none of this will be new &ndash; %duiker will print your private announce URL in the help menu you access with <code>?</code>. Use this URL to create a new torrent in your client of choice:</p>
<p><a href=""><img src="/img/create-torrent.png" alt=""></a></p>
<p>(<em>e. correction</em>) Do not mark the torrent private, as others will need to use DHT to download its metadata.</p>
<p>Once you&rsquo;ve created your torrent and begun seeding it in your client, right-click it and copy the magnet link. You&rsquo;ll need to use it to craft a nice long <code>;add</code> command to punch into %duiker, formatted as <code>;add magnetLink 'Title' 'description here' tag</code>, like so:</p>
<div class="window">
    <div class="titlebar">
      <div class="buttons">
        <div class="bclose">
        </div>
        <div class="minimize">
        </div>
        <div class="zoom">
        </div>
      </div>
      urbit - sampel-palnet
    </div>
    <div class="termdojo">
      <ul>
        
        
        <li></li>
        
        
        <li>~paldev:duiker>&nbsp;;add&nbsp;magnet:?xt=urn:btih:7221f09e518e4460203222131273bac81fd1caa0&dn=Fine%20Scale%20Modeler%20Magazines&tr=https%3a%2f%2furb.pal.dev%2f%serval%2f~sitful-hatred%2fy0uR4Nn0uNc3uRlH3Re%2fannounce&nbsp;'Fine&nbsp;Scale&nbsp;Modeler&nbsp;magazines'&nbsp;'a&nbsp;collection&nbsp;of&nbsp;PDFs&nbsp;related&nbsp;to&nbsp;skills&nbsp;and&nbsp;tips&nbsp;for&nbsp;building&nbsp;&&nbsp;painting&nbsp;scale&nbsp;models'&nbsp;pdf</li>
        
        
        <li>&nbsp;</li>
        
        
        <li></li>
        
        
        <li></li>
          
      </ul>
    </div>
  </div>

<p>I&rsquo;d recommend putting this together in a separate window, because scrolling back and forth inside the line buffer can be a bit of a pain. Once it&rsquo;s assembled, just paste it in and hit return. You can press <code>r</code> to see it in the list of torrents.</p>
<p><a href=""><img src="/img/torrent-list.png" alt=""></a></p>
<p>From here we can demonstrate downloading as well &ndash; note the far left column, with numbers next to each item. Just enter the number, and it will spit out the description and a magnet link to copy into your client.</p>
<p><a href=""><img src="/img/torrent-desc.png" alt=""></a></p>
<hr>
<p>In the comments of %serval, <code>~palfun</code> outlines a few of the technical hurdles that exist before an urbit torrent <em>client</em> is feasible (e.g &gt;2GB loom, a vane for raw TCP). This seems like it could be a possibility one day, but maybe not in the immediate future.</p>
<p>For the moment, with Urbit lacking a proper package manager, so installing this on your ship is a bit more involved than using it on <code>~paldev</code> &ndash; I haven&rsquo;t tried it, but I&rsquo;ll update this post with instructions if it&rsquo;s reasonably doable.</p>
<p>What I find most appealing about this project is the prospect of a simple community torrent tracker that you can spin up to go with your group chat; it demonstrates what kind of social software becomes possible when everybody has a server, and points to a new kind of localized internet; and it showcases the power of Urbit as a fully programmable computer that can interface with the rest of the internet. I find this kind of thing very exciting. Anyway, I uploaded a folder of cool French comics by a guy named Lewis Trondheim, you should hop on and grab them.</p>
<hr>
<p><em>This post is also available on Urbit, where you can post comments. Join <a href="web+urbitgraph://group/~matwet/networked-subject/">~matwet/networked-subject</a> and open the Networked Subject notebook.</em></p>
]]></content>
		</item>
		
		<item>
			<title>Mapping the heavens</title>
			<link>https://subject.network/posts/mapping-the-heavens/</link>
			<pubDate>Sat, 10 Oct 2020 10:11:40 -0500</pubDate>
			
			<guid>https://subject.network/posts/mapping-the-heavens/</guid>
			<description>This entry will be a quickie, a simple how-to for generating a list of planets from an arbitrary star. There are two methods, both of which require you to use a bit of command line, but nothing too exotic.
Generating a list of planets from a star Option 1: Hoon one-liner You can execute this right in your dojo:
    urbit - sampel-palnet    ~sampel-palnet:dojo&amp;nbsp;`(list&amp;nbsp;@p)`(turn&amp;nbsp;(gulf&amp;nbsp;0x1&amp;nbsp;0x5)&amp;nbsp;|=(p=@&amp;nbsp;(cat&amp;nbsp;3&amp;nbsp;~matwet&amp;nbsp;p))) &amp;nbsp; &amp;nbsp;&amp;nbsp;     Replace ~matwet with the star of your choice.</description>
			<content type="html"><![CDATA[<p><a href=""><img src="/img/ship.jpg" alt=""></a></p>
<p>This entry will be a quickie, a simple how-to for generating a list of planets from an arbitrary star. There are two methods, both of which require you to use a bit of command line, but nothing too exotic.</p>
<h2 id="generating-a-list-of-planets-from-a--star">Generating a list of planets from a  star</h2>
<h3 id="option-1-hoon-one-liner">Option 1: Hoon one-liner</h3>
<p>You can execute this right in your dojo:</p>
<div class="window">
    <div class="titlebar">
      <div class="buttons">
        <div class="bclose">
        </div>
        <div class="minimize">
        </div>
        <div class="zoom">
        </div>
      </div>
      urbit - sampel-palnet
    </div>
    <div class="termdojo">
      <ul>
        
        
        <li></li>
        
        
        <li>~sampel-palnet:dojo>&nbsp;`(list&nbsp;@p)`(turn&nbsp;(gulf&nbsp;0x1&nbsp;0x5)&nbsp;|=(p=@&nbsp;(cat&nbsp;3&nbsp;~matwet&nbsp;p)))</li>
        
        
        <li>&nbsp;</li>
        
        
        <li>&nbsp;&nbsp;</li>
        
        
        <li></li>
          
      </ul>
    </div>
  </div>

<p>Replace <code>~matwet</code> with the star of your choice. You can also change the <code>0x5</code> to a different number to generate a longer list than 5 &ndash; e.g, <code>0x10</code> would give you a list of 10. Note that this generates a list &lsquo;from zero&rsquo; &ndash; it will always generate the same list, given the same input.</p>
<h3 id="option-2-venetia">Option 2: Venetia</h3>
<p>There is also a fabulous little <a href="https://github.com/tylershuster/venetia">Node package by tylershuster</a> (<code>~radbur-sivmus</code>) for generating a list of all planets issuable by a star and save it to a file. It&rsquo;s very easy to use:</p>
<div class="window" width="80%">
    <div class="titlebar">
      <div class="buttons">
        <div class="bclose">
        </div>
        <div class="minimize">
        </div>
        <div class="zoom">
        </div>
      </div>
      terminal: ~
    </div>
    <div class="termwin">
      <ul>
        
        
        <li></li>
        
        
        <li>$>&nbsp;sudo&nbsp;apt&nbsp;install&nbsp;npm</li>
        
        
        <li>$>&nbsp;git&nbsp;clone&nbsp;https://github.com/tylershuster/venetia</li>
        
        
        <li>$>&nbsp;cd&nbsp;venetia</li>
        
        
        <li>$>&nbsp;npm&nbsp;install</li>
        
        
        <li>$>&nbsp;node&nbsp;index.js</li>
        
        
        <li>&nbsp;</li>
        
        
        <li></li>
        
        
        <li></li>
          
      </ul>
    </div>
  </div>

<p>You&rsquo;ll be prompted to choose one of three options &ndash; all planets, all planets with english-ish words, and planets with <em>only</em> english-ish words. It will take a few minutes to churn through all of them!</p>
<p><a href=""><img src="/img/venetia.png" alt=""></a></p>
<p>Once completed, you&rsquo;ll find a text file inside the same folder named <code>planets.txt</code>.</p>
<p><strong>Update</strong>: You can now use Venetia as a <a href="https://venetia.herokuapp.com/">webapp</a> without installing Node, and find homophones for English words.</p>
<p><strong>Update 2</strong>: <code>~hadnex_samzod</code> adds the following:</p>
<blockquote>
<p>Python script to print all english (american) words using the linux installed dictionary in /usr/share/dict/american:</p>
</blockquote>
<pre><code>import subprocess

# Change me
the_dict = &quot;/usr/share/dict/american&quot;
command = [&quot;egrep&quot;, &quot;-w&quot;, &quot;^\w{6}$&quot;, the_dict]

prefix = [ 'bac', 'bal', 'ban', 'bar', 'bat', 'bic', 'bid', 'bil', 'bin', 'bis', 
'bit', 'bol', 'bon', 'bor', 'bos', 'bot', 'dab', 'dac', 'dal', 'dan', 'dap', 
'dar', 'das', 'dat', 'dav', 'dib', 'dif', 'dig', 'dil', 'din', 'dir', 'dis', 
'div', 'doc', 'dol', 'don', 'dop', 'dor', 'dos', 'dot', 'dov', 'doz', 'fab', 
'fad', 'fal', 'fam', 'fan', 'fas', 'fid', 'fig', 'fil', 'fin', 'fip', 'fir', 
'fit', 'fod', 'fog', 'fol', 'fon', 'fop', 'for', 'fos', 'fot', 'hab', 'hac', 
'had', 'hal', 'han', 'hap', 'har', 'has', 'hat', 'hav', 'hid', 'hil', 'hin', 
'hob', 'hoc', 'hod', 'hol', 'hop', 'hos', 'lab', 'lac', 'lad', 'lag', 'lan', 
'lap', 'lar', 'las', 'lat', 'lav', 'lib', 'lid', 'lig', 'lin', 'lis', 'lit', 
'liv', 'loc', 'lod', 'lom', 'lon', 'lop', 'lor', 'los', 'mac', 'mag', 'mal', 
'map', 'mar', 'mas', 'mat', 'mic', 'mid', 'mig', 'mil', 'min', 'mip', 'mir', 
'mis', 'mit', 'moc', 'mod', 'mog', 'mol', 'mon', 'mop', 'mor', 'mos', 'mot', 
'nac', 'nal', 'nam', 'nap', 'nar', 'nat', 'nav', 'nib', 'nid', 'nil', 'nim', 
'nis', 'noc', 'nod', 'nol', 'nom', 'nop', 'nor', 'nos', 'nov', 'pac', 'pad', 
'pag', 'pal', 'pan', 'par', 'pas', 'pat', 'pic', 'pid', 'pil', 'pin', 'pit', 
'poc', 'pod', 'pol', 'pon', 'pos', 'rab', 'rac', 'rad', 'rag', 'ral', 'ram', 
'ran', 'rap', 'rav', 'rib', 'ric', 'rid', 'rig', 'ril', 'rin', 'rip', 'ris', 
'rit', 'riv', 'roc', 'rol', 'ron', 'rop', 'ros', 'rov', 'sab', 'sal', 'sam', 
'san', 'sap', 'sar', 'sat', 'sav', 'sib', 'sic', 'sid', 'sig', 'sil', 'sim', 
'sip', 'sit', 'siv', 'soc', 'sog', 'sol', 'som', 'son', 'sop', 'sor', 'sov', 
'tab', 'tac', 'tad', 'tag', 'tal', 'tam', 'tan', 'tap', 'tar', 'tas', 'tic', 
'tid', 'til', 'tim', 'tin', 'tip', 'tir', 'tob', 'toc', 'tod', 'tog', 'tol', 
'tom', 'ton', 'top', 'tor', 'wac', 'wal', 'wan', 'wat', 'wic', 'wid', 'win', 
'wis', 'wit', 'wol', 'wor' ]

suffix = [ 'bec', 'bel', 'ben', 'bep', 'ber', 'bes', 'bet', 'bex', 'bud', 'bur', 
'bus', 'byl', 'byn', 'byr', 'byt', 'deb', 'dec', 'def', 'deg', 'del', 'dem', 
'den', 'dep', 'der', 'des', 'det', 'dev', 'dex', 'duc', 'dul', 'dun', 'dur', 
'dus', 'dut', 'dux', 'dyl', 'dyn', 'dyr', 'dys', 'dyt', 'feb', 'fed', 'fel', 
'fen', 'fep', 'fer', 'fes', 'fet', 'fex', 'ful', 'fun', 'fur', 'fus', 'fyl', 
'fyn', 'fyr', 'heb', 'hec', 'hep', 'hes', 'het', 'hex', 'hul', 'hus', 'hut', 
'leb', 'lec', 'led', 'leg', 'len', 'lep', 'ler', 'let', 'lev', 'lex', 'luc', 
'lud', 'lug', 'lun', 'lup', 'lur', 'lus', 'lut', 'lux', 'lyd', 'lyn', 'lyr', 
'lys', 'lyt', 'lyx', 'meb', 'mec', 'med', 'meg', 'mel', 'mep', 'mer', 'mes', 
'met', 'mev', 'mex', 'mud', 'mug', 'mul', 'mun', 'mur', 'mus', 'mut', 'myl', 
'myn', 'myr', 'neb', 'nec', 'ned', 'nel', 'nem', 'nep', 'ner', 'nes', 'net', 
'nev', 'nex', 'nub', 'nul', 'num', 'nup', 'nus', 'nut', 'nux', 'nyd', 'nyl', 
'nym', 'nyr', 'nys', 'nyt', 'nyx', 'pec', 'ped', 'peg', 'pel', 'pem', 'pen', 
'per', 'pes', 'pet', 'pex', 'pub', 'pun', 'pur', 'put', 'pyl', 'pyx', 'reb', 
'rec', 'red', 'ref', 'reg', 'rel', 'rem', 'ren', 'rep', 'res', 'ret', 'rev', 
'rex', 'ruc', 'rud', 'rul', 'rum', 'run', 'rup', 'rus', 'rut', 'rux', 'ryc', 
'ryd', 'ryg', 'ryl', 'rym', 'ryn', 'ryp', 'rys', 'ryt', 'ryx', 'seb', 'sec', 
'sed', 'sef', 'seg', 'sel', 'sem', 'sen', 'sep', 'ser', 'set', 'sev', 'sub', 
'sud', 'sug', 'sul', 'sum', 'sun', 'sup', 'sur', 'sut', 'syd', 'syl', 'sym', 
'syn', 'syp', 'syr', 'syt', 'syx', 'teb', 'tec', 'ted', 'teg', 'tel', 'tem', 
'ten', 'tep', 'ter', 'tes', 'tev', 'tex', 'tuc', 'tud', 'tug', 'tul', 'tun', 
'tus', 'tux', 'tyc', 'tyd', 'tyl', 'tyn', 'typ', 'tyr', 'tyv', 'web', 'wed', 
'weg', 'wel', 'wen', 'wep', 'wer', 'wes', 'wet', 'wex', 'wyc', 'wyd', 'wyl', 
'wyn', 'wyt', 'wyx', 'zod', ]

# Load 6 letter dictionary words into list
process = subprocess.Popen(command, stdout=subprocess.PIPE)
stdout_data, stderr_data = process.communicate()

# Convert to set for fast lookup
words = set(stdout_data.decode('utf8').splitlines())

for i in prefix:
	for j in suffix:
		urbit_word = i+j
		if urbit_word in words:
			print(urbit_word)
</code></pre><hr>
<p><em>This post is also available on Urbit, where you can post comments. Join <a href="web+urbitgraph://group/~matwet/networked-subject/">~matwet/networked-subject</a> and open the Networked Subject notebook.</em></p>
]]></content>
		</item>
		
		<item>
			<title>Configuring S3 storage for your urbit</title>
			<link>https://subject.network/posts/configuring-s3-urbit/</link>
			<pubDate>Sat, 03 Oct 2020 13:39:06 -0500</pubDate>
			
			<guid>https://subject.network/posts/configuring-s3-urbit/</guid>
			<description>Continuing our convention of instructions for running your ship on DigitalOcean (referral), this document will guide you through using DO&amp;rsquo;s S3-equivalent service with your ship.
Introduction First a brief explainer &amp;ndash; S3 (Simple Storage Service) is a system for storing and retreiving objects in the cloud. The &amp;lsquo;official&amp;rsquo; S3 is run by Amazon, but other providers run compatible services &amp;ndash; DO&amp;rsquo;s is called Spaces, and it is built to be interchangeable with AWS S3&amp;rsquo;s API.</description>
			<content type="html"><![CDATA[<p><a href=""><img src="/img/urbit-do-spaces.png" alt=""></a></p>
<p>Continuing our convention of instructions for running your ship on <a href="https://m.do.co/c/4da920651e1a">DigitalOcean</a> (referral), this document will guide you through using DO&rsquo;s S3-equivalent service with your ship.</p>
<h2 id="introduction">Introduction</h2>
<p>First a brief explainer &ndash; S3 (Simple Storage Service) is a system for storing and retreiving objects in the cloud. The &lsquo;official&rsquo; S3 is run by Amazon, but other providers run compatible services &ndash; DO&rsquo;s is called <a href="https://www.digitalocean.com/products/spaces/">Spaces</a>, and it is built to be interchangeable with AWS S3&rsquo;s API. You don&rsquo;t need to be running your ship on DO to use Spaces with it. The provider you use <em>does</em> have support Signature Version 2 (DO does &ndash; do a quick check if you&rsquo;re using another provider).</p>
<p>What does Urbit use S3 for? It&rsquo;s an easy and reliable way to store files and media for retrieval within the apps in your urbit &ndash; for instance, sharing pictures in a chat. If you attach an S3 bucket to your ship, the Chat app will enable an image upload feature. If you want to program software for urbit that makes efficient use of static content, you may be able to imagine a few potential uses; think of it as a giant online hard drive.</p>
<h2 id="creating-a-space">Creating a space</h2>
<p>Navigate to the DO dashboard and find &lsquo;Spaces&rsquo; in the left navigation bar, then click &lsquo;Create a Space&rsquo;, and select a datacenter. The next option is to enable CDN &ndash; content delivery network, a feature that lets you spread your content across regional servers to speed up delivery. It probably is not necessary if you&rsquo;re just using this for personal file storage, so you can skip this step, but for the sake of completeness we&rsquo;ll do that too.</p>
<p>Click &lsquo;Enable CDN&rsquo;, select your domain, and scroll to the bottom of the list of subdomains to create a new A record. Finalize it to create a LetsEncrypt certificate &ndash; you should get an email momentarily that the process has completed. Note that creating a subdomain on your own domain is obviously only possible if you already have a domain on a DO droplet, but you will be able to access your media using this new subdomain as well.</p>
<p>An option on this page is whether you want to restrict file listing &ndash; I would recommend keeping the default restricted setting, unless you have some specific need to allow anyone to list your objects. Finally, create a subdomain for your space (this will be a subdomain on a DO domain, not your own), take note of it, and submit the form.</p>
<p><a href=""><img src="/img/spaces-1.png" alt=""></a></p>
<p>We need to do a little configuration now; click &lsquo;Settings&rsquo; under the page header, look for &lsquo;CORS configurations&rsquo;, and click &lsquo;add&rsquo; on the right. We want to add two rules &ndash; in the Origin box, put a <code>*</code>; then click &lsquo;Add header&rsquo;, enter another <code>*</code>. This allows other people to request objects from our bucket. Make sure <code>GET</code> and <code>PUT</code> are enabled, and save.</p>
<p><a href=""><img src="/img/spaces-2.png" alt=""></a></p>
<p>We have one last step before we enable this on our ship &ndash; getting our API keys. In the main navigation bar on the left, look for &lsquo;API&rsquo; towards the bottom and select it. At the bottom of the page you&rsquo;ll see &lsquo;Spaces access keys&rsquo;; select &lsquo;Generate new key&rsquo;. It will give you two lines of random text &ndash; the top one is your access key, and the bottom is your secret key. Think of them as your username and password; do not share them or post them publicly, unless you want strangers abusing your storage.</p>
<p><a href=""><img src="/img/spaces-3.png" alt=""></a></p>
<h2 id="ship-configuration">Ship configuration</h2>
<p>Finally, let&rsquo;s tell our ship how to use it. Open Landscape, click your name at the top right corner, and scroll down until you see &lsquo;S3 Credentials&rsquo;:</p>
<p><a href=""><img src="/img/s3-settings.png" alt=""></a></p>
<p>Make sure your S3 bucket name is the same as your bucket name on DO:</p>
<p><a href=""><img src="/img/bucket-endpoint.png" alt=""></a></p>
<p>Hit save, go to <code>Options -&gt; Activate</code> next to the name of the bucket, and you should be good!</p>
<p>Alternatively, you can enter your credentials in the command line. Let&rsquo;s proceed to our dojo (CLI or Landscape). Enter the following commands, replacing the variables in single quotes with your own details:</p>
<div class="window">
    <div class="titlebar">
      <div class="buttons">
        <div class="bclose">
        </div>
        <div class="minimize">
        </div>
        <div class="zoom">
        </div>
      </div>
      urbit - sampel-palnet
    </div>
    <div class="termdojo">
      <ul>
        
        
        <li></li>
        
        
        <li>~sampel-palnet:dojo>&nbsp;:s3-store|set-endpoint&nbsp;'ams3.digitaloceanspaces.com'</li>
        
        
        <li>~sampel-palnet:dojo>&nbsp;:s3-store|set-access-key-id&nbsp;'ACCESSKEY'</li>
        
        
        <li>~sampel-palnet:dojo>&nbsp;:s3-store|set-secret-access-key&nbsp;'5eCrEtK3Y/8L4H8L4H'</li>
        
        
        <li>~sampel-palnet:dojo>&nbsp;:s3-store|set-current-bucket&nbsp;'bucketname'</li>
        
        
        <li>&nbsp;</li>
        
        
        <li>&nbsp;&nbsp;</li>
        
        
        <li></li>
          
      </ul>
    </div>
  </div>

<p>You can print out your stored S3 credentials in dojo anytime using:</p>
<div class="window">
    <div class="titlebar">
      <div class="buttons">
        <div class="bclose">
        </div>
        <div class="minimize">
        </div>
        <div class="zoom">
        </div>
      </div>
      urbit - sampel-palnet
    </div>
    <div class="termdojo">
      <ul>
        
        
        <li></li>
        
        
        <li>~sampel-palnet:dojo>&nbsp;:s3-store&nbsp;+dbug</li>
        
        
        <li>&nbsp;</li>
        
        
        <li>&nbsp;&nbsp;</li>
        
        
        <li></li>
          
      </ul>
    </div>
  </div>

<p><a href=""><img src="/img/urbit-s3.png" alt=""></a></p>
<p>Don&rsquo;t worry if you don&rsquo;t see any immediate notification of success; head over to landscape and open a chat. If all went well, you&rsquo;ll see a little attachment upload icon in your text entry box:</p>
<p><a href=""><img src="/img/spaces-4.png" alt=""></a></p>
<p>Just click this, select an item to upload; if you did it correctly, you should be able to post images to chats, meaning your urbit has a big fat disk added to it (If you see the image icon but can&rsquo;t post, double check your CORS settings).</p>
<p>If you want to look through the stuff you&rsquo;ve uploaded through your urbit, you can go to the management page on your DO dashboard and select the space you&rsquo;re using. It will give you a directory named after your ship, and inside of that a listing of all files you&rsquo;ve uploaded, where you can manage them.</p>
<p><a href=""><img src="/img/spaces-5.png" alt=""></a></p>
<hr>
<p><em>This post is also available on Urbit, where you can post comments. Join <a href="web+urbitgraph://group/~matwet/networked-subject/">~matwet/networked-subject</a> and open the Networked Subject notebook.</em></p>
]]></content>
		</item>
		
		<item>
			<title>Urbit, Nginx and Letsencrypt</title>
			<link>https://subject.network/posts/urbit-nginx-letsencrypt/</link>
			<pubDate>Sat, 26 Sep 2020 12:08:26 -0500</pubDate>
			
			<guid>https://subject.network/posts/urbit-nginx-letsencrypt/</guid>
			<description>As part of a project to document how I use Urbit and the things I learn along the way, I&amp;rsquo;m going to document the process of setting up this site. In its current state, it&amp;rsquo;s pretty simple &amp;ndash; a static site using a modified template (Hugo and Hermit), served from a Digital Ocean Ubuntu VPS (referral link).
Behind the scenes, there are a couple of extra features &amp;ndash; I wanted to be able to access my planet as a subdomain over SSL (proxied from my home PC), and I wanted to run ~matwet under the hood on the same VPS, also accessible on a subdomain.</description>
			<content type="html"><![CDATA[<p><a href=""><img src="/img/nginx-letsencrypt-urbit.png" alt=""></a></p>
<p>As part of a project to document how I use Urbit and the things I learn along the way, I&rsquo;m going to document the process of setting up this site. In its current state, it&rsquo;s pretty simple &ndash; a static site using a modified template (<a href="https://gohugo.io/">Hugo</a> and <a href="https://themes.gohugo.io/hermit/">Hermit</a>), served from a <a href="https://m.do.co/c/4da920651e1a">Digital Ocean</a> Ubuntu VPS (referral link).</p>
<p>Behind the scenes, there are a couple of extra features &ndash; I wanted to be able to access my planet as a subdomain over SSL (proxied from my home PC), and I wanted to run <code>~matwet</code> under the hood on the same VPS, also accessible on a subdomain.</p>
<p>This is actually pretty easy to do! Nginx can be configured to proxy content from a different port through a subdomain, or even from a different server entirely.</p>
<p>So, to recap, in this guide we will:</p>
<ul>
<li>
<p>Set up a VPS and point a domain at it</p>
</li>
<li>
<p>Set up our Urbit</p>
</li>
<li>
<p>Install and Configure Nginx to point at both our Urbit and a blog (or whatever)</p>
</li>
<li>
<p>Secure the site with Letsencrypt</p>
</li>
</ul>
<p>An important caveat is that this is <strong>none of this is necessary</strong> if you just want to <a href="https://urbit.org/using/install/">run your urbit</a>. You can download it and run it on your home PC (even <a href="https://www.omgubuntu.co.uk/how-to-install-wsl2-on-windows-10">on Windows</a>!). It&rsquo;s not even necessary if you want to access your planet through an easy-to-remember domain; you can simply use built-in <a href="https://urbit.org/using/operations/using-your-ship/#dns-proxying">DNS proxying</a>. This intended for anyone else who just wants to do it themselves for the fun of it, or wants to keep their Urbit running 24/7 in a high reliability data center. At the end of this, you&rsquo;ll have an alien spacecraft running on a remote server, and learn three ways to configure an nginx web server.</p>
<p>One more important note before we begin &ndash; your urbit instance (&ldquo;ship&rdquo;) is portable, meaning you can shut it down and move it to any device that can run urbit. In the course of moving an existing ship to your server, or if you ever decide to move your ship to another server or your PC, you can simply download the directory that contains your data (your &ldquo;pier&rdquo;) to the desired device. Make sure you <strong>shut down ship</strong> before you do so! Trying to run your ship twice in different places will probably de-sync it from the network and require a <a href="https://urbit.org/docs/tutorials/guide-to-breaches/">personal breach</a>. You can stop your urbit at any time from the command line by pressing <code>ctrl-d</code>, or force it to quit with <code>ctrl-z</code>.</p>
<p><strong>Jan 2021 Edit</strong>: <em>Be sure to check out <a href="https://zalberico.com/essay/2020/06/06/urbit-on-the-cloud.html">~dovsem-bornyl</a>&rsquo;s similar guide for alternative step-by-step instructions, including VPS &amp; domain setup!</em></p>
<p><strong>May 2021 Edit</strong>: <em>I now recommend using Caddy instead of Nginx &ndash; this tutorial is still perfectly serviceable, but configuring Caddy is much much simpler. You can see the (much shorter) tutorial <a href="/posts/caddyserver-urbit-tls">here</a>.</em></p>
<h2 id="server-setup">Server setup</h2>
<p>You will first need to spin up a VPS. As I mentioned, I use Digital Ocean, but hosts are <a href="https://lowendbox.com/">commodity providers</a> and are generally fungible if you&rsquo;re not doing anything too fancy or critical.</p>
<h3 id="selecting-a-plan">Selecting a plan</h3>
<p>Urbit checks to make sure there is 2GB of memory available on the system when you start it up, but it rarely uses anywhere close to that limit, and you can create a <a href="https://www.digitalocean.com/community/tutorials/how-to-add-swap-space-on-ubuntu-16-04">swap file</a> to spoof it if you have less than the requirement. That said, I would recommend a VPS with at least 2GB for a noticable improvement in performance. Ship performance does noticeably scale with resource availability, so it may be worth it to you to bump your specs to a higher tier plan &ndash; but the cheapest tier is useable, and you can always do that later.</p>
<h3 id="domain-names">Domain names</h3>
<p>Next, we&rsquo;ll assign a domain name to our server. Once you&rsquo;ve found a <a href="https://www.gandi.net/en-US">name</a> you <a href="https://www.namecheap.com/">like</a>, purchase it, and <a href="https://www.digitalocean.com/community/tutorials/how-to-point-to-digitalocean-nameservers-from-common-domain-registrars">point it</a> at the appropriate nameservers, then <a href="https://www.digitalocean.com/docs/networking/dns/how-to/add-domains/">add the domain</a> to your droplet.</p>
<p>Remember that DNS can take time to propagate &ndash; you see people say that it can take up to a day, and the longest I&rsquo;ve waited was about 8 hours, but typically it will propagate within about an hour. Go make some coffee.</p>
<h2 id="server-configuration">Server configuration</h2>
<p>Once you&rsquo;ve created your server, you will need to log into into it with an SSH client. If you&rsquo;re using Linux or MacOS, you can just use the system terminal; if you&rsquo;re using Windows, the classic standby is <a href="https://www.putty.org/">PuTTY</a>, but the new <a href="https://www.microsoft.com/en-us/p/windows-terminal/9n0dx20hk701">Windows Terminal</a> is pretty <a href="https://docs.microsoft.com/en-us/windows/terminal/tutorials/ssh">slick</a>.</p>
<p>Now, SSH in using your credentials:</p>
<div class="window" width="80%">
    <div class="titlebar">
      <div class="buttons">
        <div class="bclose">
        </div>
        <div class="minimize">
        </div>
        <div class="zoom">
        </div>
      </div>
      terminal: ~
    </div>
    <div class="termwin">
      <ul>
        
        
        <li></li>
        
        
        <li>$>&nbsp;ssh&nbsp;user@your.server.ip.addr</li>
        
        
        <li>&nbsp;</li>
        
        
        <li></li>
        
        
        <li></li>
          
      </ul>
    </div>
  </div>

<p>You will be dropped into a terminal that will walk you through creating an account. You can find detailed instructions on setting up your server with a new user account <a href="https://www.digitalocean.com/community/tutorials/initial-server-setup-with-ubuntu-18-04">here</a>. I would strongly recommend setting up SSH authentication as outlined near the end of those instructions.</p>
<p>Once everything is set up, we need to get a few things installed.</p>
<h3 id="installing-software">Installing software</h3>
<p>There&rsquo;s nothing too special here! We just want to put nginx and certbot in place.</p>
<div class="window" width="80%">
    <div class="titlebar">
      <div class="buttons">
        <div class="bclose">
        </div>
        <div class="minimize">
        </div>
        <div class="zoom">
        </div>
      </div>
      terminal: ~
    </div>
    <div class="termwin">
      <ul>
        
        
        <li></li>
        
        
        <li>$>&nbsp;sudo&nbsp;apt&nbsp;update</li>
        
        
        <li>$>&nbsp;sudo&nbsp;apt&nbsp;install&nbsp;nginx&nbsp;certbot&nbsp;python3-certbot-nginx&nbsp;tmux</li>
        
        
        <li>&nbsp;</li>
        
        
        <li></li>
        
        
        <li></li>
          
      </ul>
    </div>
  </div>

<p>Once it&rsquo;s completed, nginx should have started running &ndash; try navigating to the IP address of your server in your web browser, it should present you with this:</p>
<p><a href=""><img src="/img/nginx-default.png" alt=""></a></p>
<h3 id="setting-up-a-server-block">Setting up a server block</h3>
<p>We need to configure nginx for our new domain and the blog it hosts. First, we&rsquo;ll make the folders that contain its data and assign the appropriate permissions (with your domain substituted, of course), then add a placeholder index.</p>
<div class="window" width="80%">
    <div class="titlebar">
      <div class="buttons">
        <div class="bclose">
        </div>
        <div class="minimize">
        </div>
        <div class="zoom">
        </div>
      </div>
      terminal: ~
    </div>
    <div class="termwin">
      <ul>
        
        
        <li></li>
        
        
        <li>$>&nbsp;sudo&nbsp;mkdir&nbsp;-p&nbsp;/var/www/your.domain/html</li>
        
        
        <li>$>&nbsp;sudo&nbsp;chown&nbsp;-R&nbsp;$USER:$USER&nbsp;/var/www/your.domain/html</li>
        
        
        <li>$>&nbsp;sudo&nbsp;chmod&nbsp;-R&nbsp;755&nbsp;/var/www/your.domain</li>
        
        
        <li>$>&nbsp;echo&nbsp;"placeholder"&nbsp;>&nbsp;/var/www/your.domain/html/index.html</li>
        
        
        <li>&nbsp;</li>
        
        
        <li></li>
        
        
        <li></li>
          
      </ul>
    </div>
  </div>

<p>Then we&rsquo;ll add it to nginx&rsquo;s <code>sites-available</code> by copying the default configuration, then opening it in an editor:</p>
<div class="window" width="80%">
    <div class="titlebar">
      <div class="buttons">
        <div class="bclose">
        </div>
        <div class="minimize">
        </div>
        <div class="zoom">
        </div>
      </div>
      terminal: ~
    </div>
    <div class="termwin">
      <ul>
        
        
        <li></li>
        
        
        <li>$>&nbsp;sudo&nbsp;cp&nbsp;/etc/nginx/sites-available/default&nbsp;/etc/nginx/sites-available/your.domain</li>
        
        
        <li>$>&nbsp;sudo&nbsp;nano&nbsp;/etc/nginx/sites-available/your.domain</li>
        
        
        <li>&nbsp;</li>
        
        
        <li></li>
        
        
        <li></li>
          
      </ul>
    </div>
  </div>

<p>You can ignore the commented-out lines for now &ndash; just go through it and replace <code>default_server</code> with your domain, edit the root path variable to point at our new directory at <code>/var/www/your.domain/html</code>, and change&hellip;</p>
<pre><code>server_name _;
</code></pre><p>to&hellip;</p>
<pre><code>server_name your.domain www.your.domain;
</code></pre><p>&hellip;then press <code>ctrl-o return</code>, <code>ctrl-x return</code> to save and exit.</p>
<p>We also want to make sure we didn&rsquo;t make any mistakes before we set this into gear, so we&rsquo;ll run a little test:</p>
<div class="window" width="80%">
    <div class="titlebar">
      <div class="buttons">
        <div class="bclose">
        </div>
        <div class="minimize">
        </div>
        <div class="zoom">
        </div>
      </div>
      terminal: ~
    </div>
    <div class="termwin">
      <ul>
        
        
        <li></li>
        
        
        <li>$>&nbsp;sudo&nbsp;nginx&nbsp;-t</li>
        
        
        <li>&nbsp;</li>
        
        
        <li></li>
        
        
        <li></li>
          
      </ul>
    </div>
  </div>

<p>It should report no errors, but will point you at them if you have.</p>
<p>Finally, let&rsquo;s link our new config to <code>sites-available</code> to tell nginx that it&rsquo;s ready for use!</p>
<div class="window" width="80%">
    <div class="titlebar">
      <div class="buttons">
        <div class="bclose">
        </div>
        <div class="minimize">
        </div>
        <div class="zoom">
        </div>
      </div>
      terminal: ~
    </div>
    <div class="termwin">
      <ul>
        
        
        <li></li>
        
        
        <li>$>&nbsp;sudo&nbsp;ln&nbsp;-s&nbsp;/etc/nginx/sites-available/your.domain&nbsp;/etc/nginx/sites-enabled</li>
        
        
        <li>$>&nbsp;sudo&nbsp;service&nbsp;nginx&nbsp;restart</li>
        
        
        <li>&nbsp;</li>
        
        
        <li></li>
        
        
        <li></li>
          
      </ul>
    </div>
  </div>

<p>If you&rsquo;ve done everything correctly, and your DNS update has had time to propagate, you should be able to point to your domain in your browser and pull up the word &lsquo;placeholder&rsquo;.</p>
<p>Now you can throw your locally-generated static site onto your server (the creation of which is slightly beyond the bounds of this document!). From your <strong>local computer</strong>, copy your desired content into the path for your newly configured site:</p>
<div class="window" width="80%">
    <div class="titlebar">
      <div class="buttons">
        <div class="bclose">
        </div>
        <div class="minimize">
        </div>
        <div class="zoom">
        </div>
      </div>
      terminal: ~
    </div>
    <div class="termwin">
      <ul>
        
        
        <li></li>
        
        
        <li>$>&nbsp;rsync&nbsp;-avz&nbsp;/path/to/content&nbsp;user@your.domain:/var/www/your.domain/html</li>
        
        
        <li>&nbsp;</li>
        
        
        <li></li>
        
        
        <li></li>
          
      </ul>
    </div>
  </div>

<p>Once it&rsquo;s copied, try refreshing the browser window with your domain pulled up. Viola! You have completed the most treacherous part, and you have a fancy new blog.</p>
<h3 id="installing-urbit">Installing Urbit</h3>
<p>Now that we have a web server up and running, let&rsquo;s put an urbit ship on the same machine. This will probably take a little bit of time if you&rsquo;ve never done so before, but should only take a couple of minutes if you&rsquo;re familiar with the process. If you&rsquo;re new to urbit, and don&rsquo;t have a planet yet, go ahead and follow the instructions for <a href="https://urbit.org/using/install/#booting-a-comet">booting a comet</a>. Comets are free and infinite, but can take a little bit of time to boot up for the first time.</p>
<p>A useful tip before you begin is to launch urbit inside a tmux session. Tmux is a tool that allows you to create multiple terminal sessions, and &lsquo;attach&rsquo; or detach from them at will &ndash; this means your urbit can hog the entire terminal screen, and you can still switch back to a normal command line to perform operations on your server.</p>
<p>SSH back into your server, and launch a new terminal session named &lsquo;urbit&rsquo; like this:</p>
<div class="window" width="80%">
    <div class="titlebar">
      <div class="buttons">
        <div class="bclose">
        </div>
        <div class="minimize">
        </div>
        <div class="zoom">
        </div>
      </div>
      terminal: ~
    </div>
    <div class="termwin">
      <ul>
        
        
        <li></li>
        
        
        <li>$>&nbsp;tmux&nbsp;new&nbsp;-s&nbsp;urbit</li>
        
        
        <li>&nbsp;</li>
        
        
        <li></li>
        
        
        <li></li>
          
      </ul>
    </div>
  </div>

<p>Your command line&rsquo;s history will suddenly clear from the screen, because you&rsquo;re in a new one. Now you can follow the instructions on <a href="https://urbit.org/using/install/">this</a> page. If you need to detach from your urbit session, simply press <code>ctrl-b d</code> and it will disappear. If you need to re-attach to it, simply run:</p>
<div class="window" width="80%">
    <div class="titlebar">
      <div class="buttons">
        <div class="bclose">
        </div>
        <div class="minimize">
        </div>
        <div class="zoom">
        </div>
      </div>
      terminal: ~
    </div>
    <div class="termwin">
      <ul>
        
        
        <li></li>
        
        
        <li>$>&nbsp;tmux&nbsp;a&nbsp;-t&nbsp;urbit</li>
        
        
        <li>&nbsp;</li>
        
        
        <li></li>
        
        
        <li></li>
          
      </ul>
    </div>
  </div>

<p>And you will suddenly see your urbit shell again, chugging away.</p>
<p>After your urbit has booted up fully (which again will probably take at least 5 minutes the first time you do it, and up to an hour if you launched a comet), look for a few lines that look like this:</p>
<div class="window">
    <div class="titlebar">
      <div class="buttons">
        <div class="bclose">
        </div>
        <div class="minimize">
        </div>
        <div class="zoom">
        </div>
      </div>
      urbit - sampel-palnet
    </div>
    <div class="termdojo">
      <ul>
        
        
        <li></li>
        
        
        <li>ames:&nbsp;on&nbsp;localhost,&nbsp;UDP&nbsp;31337.</li>
        
        
        <li>http:&nbsp;web&nbsp;interface&nbsp;live&nbsp;on&nbsp;http://localhost:80</li>
        
        
        <li>http:&nbsp;loopback&nbsp;live&nbsp;on&nbsp;http://localhost:12321</li>
        
        
        <li>~sampel-palnet:dojo>&nbsp;</li>
        
        
        <li>&nbsp;</li>
        
        
        <li></li>
        
        
        <li></li>
          
      </ul>
    </div>
  </div>

<p>The bit we&rsquo;re interested in is that second line, that tells you the web interface port. If you&rsquo;re already running something (like nginx) on port 80, or if the urbit binary doesn&rsquo;t have the appopriate permissions, it will default to port 8080, and increment up from there if it finds that port occupied.</p>
<p>If you navigate to <code>http://your.domain:8080</code>, you should be presented with a login screen for an urbit ship! Go back to your urbit command line, type <code>+code</code> and hit return to get your password.</p>
<p>So we&rsquo;ve set up a domain that servers a blog by default, and an urbit over port 8080. Pretty fancy! But we&rsquo;re not done here &ndash; URL aesthetics demand that you get rid of that ugly tailing port and give your ship a nice subdomain.</p>
<h3 id="configuring-a-local-reverse-proxy-subdomain">Configuring a local reverse proxy subdomain</h3>
<p>A <a href="https://docs.nginx.com/nginx/admin-guide/web-server/reverse-proxy/">reverse proxy</a> is a server configuration option we will use to point a subdomain at the port our urbit is running on &ndash; so instead of <code>your.domain:8080</code>, you can go to <code>ship.your.domain</code>, and we can secure it with SSL a couple of sections down.</p>
<p>This actually is not terribly difficult! We just need to create an A record and modify our existing <code>sites-enabled</code> to tell the server how to respond to requests for a subdomain.</p>
<p>First, you will need to log into your DigitalOcean dashboard and navigate to your droplet. You should see a header titled &lsquo;Domains&rsquo;, and a box that contains the domain you are using. Click on your domain, and you will be presented with a page titled &lsquo;Create new record&rsquo; &ndash; &lsquo;A&rsquo; should be selected by default, and that is what we want.</p>
<p>Simply fill out the &lsquo;hostname&rsquo; box with your desired subdomain (just the subdomain, without <code>your.domain</code>), select your domain under &lsquo;will direct to&rsquo;, and press &lsquo;create record&rsquo;. This should go into effect more or less immediately. (While you&rsquo;re here, you may want to create a <code>www.</code> subdomain if you don&rsquo;t have one).</p>
<p>There are more verbose instructions with pictures <a href="https://www.digitalocean.com/docs/networking/dns/how-to/add-subdomain/">here</a>.</p>
<p>Now we&rsquo;ll modify our site configuration:</p>
<div class="window" width="80%">
    <div class="titlebar">
      <div class="buttons">
        <div class="bclose">
        </div>
        <div class="minimize">
        </div>
        <div class="zoom">
        </div>
      </div>
      terminal: ~
    </div>
    <div class="termwin">
      <ul>
        
        
        <li></li>
        
        
        <li>$>&nbsp;sudo&nbsp;nano&nbsp;/etc/nginx/sites-available/your.domain</li>
        
        
        <li>&nbsp;</li>
        
        
        <li></li>
        
        
        <li></li>
          
      </ul>
    </div>
  </div>

<p>Scroll down to the very bottom of the file and insert the following, after replacing <code>sub.your.domain</code> with your desired subdomain:</p>
<pre><code>server {
	server_name sub.your.domain;
	location / {
		proxy_set_header Host $host;
		proxy_set_header Connection '';
		proxy_http_version 1.1;
		proxy_pass http://127.0.0.1:8080;
		chunked_transfer_encoding off;
		proxy_buffering off;
		proxy_cache off;
		proxy_redirect default;
		proxy_set_header Forwarded for=$remote_addr;
	}
}
</code></pre><p>This is a proxy setup optimized for <a href="https://developer.mozilla.org/en-US/docs/Web/API/EventSource">EventSource</a>; there is one important thing to note in it &ndash; <code>proxy_buffering off;</code>. This is something you will specifically need to set for Landscape to work at all; otherwise, the interface does not load properly, and you will be met with a blank screen after logging in. Be sure to enable this option on any nginx configuration that is set up to proxy for urbit.</p>
<p>Now verify the syntax of your edits:</p>
<div class="window" width="80%">
    <div class="titlebar">
      <div class="buttons">
        <div class="bclose">
        </div>
        <div class="minimize">
        </div>
        <div class="zoom">
        </div>
      </div>
      terminal: ~
    </div>
    <div class="termwin">
      <ul>
        
        
        <li></li>
        
        
        <li>$>&nbsp;sudo&nbsp;nginx&nbsp;-t</li>
        
        
        <li>&nbsp;</li>
        
        
        <li></li>
        
        
        <li></li>
          
      </ul>
    </div>
  </div>

<p>Once you save this file and exit, reload nginx and test your new subdomain in a web browser:</p>
<div class="window" width="80%">
    <div class="titlebar">
      <div class="buttons">
        <div class="bclose">
        </div>
        <div class="minimize">
        </div>
        <div class="zoom">
        </div>
      </div>
      terminal: ~
    </div>
    <div class="termwin">
      <ul>
        
        
        <li></li>
        
        
        <li>$>&nbsp;sudo&nbsp;service&nbsp;nginx&nbsp;restart</li>
        
        
        <li>&nbsp;</li>
        
        
        <li></li>
        
        
        <li></li>
          
      </ul>
    </div>
  </div>

<h3 id="proxying-from-a-remote-server">Proxying from a remote server</h3>
<p>I mentioned before that I also wanted to proxy a ship from a remote server &ndash; in this case, my home PC. So, when I navigate to <code>sitful-hatred.subject.network</code>, it simply proxies the traffic from my home computer. This is much easier than remembering my home IP address &ndash; though I will have to update my configuration the next time my IP changes. If you run a VPS and want to proxy a ship running at home or anywhere else through it, you can easily do the same.</p>
<p>Follow the instructions in the previous section to create a new A record for your subdomain, and open your <code>sites-available</code> file in a text editor once more.</p>
<div class="window" width="80%">
    <div class="titlebar">
      <div class="buttons">
        <div class="bclose">
        </div>
        <div class="minimize">
        </div>
        <div class="zoom">
        </div>
      </div>
      terminal: ~
    </div>
    <div class="termwin">
      <ul>
        
        
        <li></li>
        
        
        <li>$>&nbsp;sudo&nbsp;nano&nbsp;/etc/nginx/sites-available/your.domain</li>
        
        
        <li>&nbsp;</li>
        
        
        <li></li>
        
        
        <li></li>
          
      </ul>
    </div>
  </div>

<p>Scroll down once more to the very bottom and add the following, substituting your IP address and the port number your urbit is serving from:</p>
<pre><code>server {
	server_name your-planet.your.domain;
	location / {
			proxy_set_header Host $host;
			proxy_set_header Connection '';
			proxy_http_version 1.1;
			proxy_pass http://your.remote.ip.addr:80;
			chunked_transfer_encoding off;
			proxy_buffering off;
			proxy_cache off;
			proxy_redirect default;
			proxy_set_header Forwarded for=$remote_addr;
	}
}
</code></pre><p>Hit save and exit (<code>ctrl-o ctrl-x</code>), and verify the syntax like this:</p>
<div class="window" width="80%">
    <div class="titlebar">
      <div class="buttons">
        <div class="bclose">
        </div>
        <div class="minimize">
        </div>
        <div class="zoom">
        </div>
      </div>
      terminal: ~
    </div>
    <div class="termwin">
      <ul>
        
        
        <li></li>
        
        
        <li>$>&nbsp;sudo&nbsp;nginx&nbsp;-t</li>
        
        
        <li>&nbsp;</li>
        
        
        <li></li>
        
        
        <li></li>
          
      </ul>
    </div>
  </div>

<p>If you&rsquo;re good to go, then reload nginx.</p>
<div class="window" width="80%">
    <div class="titlebar">
      <div class="buttons">
        <div class="bclose">
        </div>
        <div class="minimize">
        </div>
        <div class="zoom">
        </div>
      </div>
      terminal: ~
    </div>
    <div class="termwin">
      <ul>
        
        
        <li></li>
        
        
        <li>$>&nbsp;sudo&nbsp;service&nbsp;nginx&nbsp;restart</li>
        
        
        <li>&nbsp;</li>
        
        
        <li></li>
        
        
        <li></li>
          
      </ul>
    </div>
  </div>

<p>Pretty easy! Between these two ways of proxying your urbit, I&rsquo;m sure you can think of an interesting configuration for yourself. But we&rsquo;re not done here yet; we need to add a little lock icon to our URL bar.</p>
<h3 id="certbot">Certbot</h3>
<p>This is probably the easiest part of this tutorial, to the credit of the LetsEncrypt devs. You already installed the necessary software at the beginning of this tutorial, so now simply run:</p>
<div class="window" width="80%">
    <div class="titlebar">
      <div class="buttons">
        <div class="bclose">
        </div>
        <div class="minimize">
        </div>
        <div class="zoom">
        </div>
      </div>
      terminal: ~
    </div>
    <div class="termwin">
      <ul>
        
        
        <li></li>
        
        
        <li>$>&nbsp;sudo&nbsp;certbot</li>
        
        
        <li>&nbsp;</li>
        
        
        <li></li>
        
        
        <li></li>
          
      </ul>
    </div>
  </div>

<p>and proceed through, selecting the default optinons. Once it&rsquo;s completed, you should be presented with a success message, and should also be able to pull up your site and all its subdomains with <code>https://</code>!</p>
<p>One last thing to do is automate certificate renewal so you don&rsquo;t have to log into your VPS every three months to manually do it.</p>
<div class="window" width="80%">
    <div class="titlebar">
      <div class="buttons">
        <div class="bclose">
        </div>
        <div class="minimize">
        </div>
        <div class="zoom">
        </div>
      </div>
      terminal: ~
    </div>
    <div class="termwin">
      <ul>
        
        
        <li></li>
        
        
        <li>$>&nbsp;sudo&nbsp;systemctl&nbsp;enable&nbsp;certbot.timer</li>
        
        
        <li>$>&nbsp;sudo&nbsp;systemctl&nbsp;start&nbsp;certbot.timer</li>
        
        
        <li>&nbsp;</li>
        
        
        <li></li>
        
        
        <li></li>
          
      </ul>
    </div>
  </div>

<p>And we&rsquo;re finished! A handy little server that conveniently demonstrates different ways to proxy our urbit ship. This probably was a little less specific than it could have been in places, but if you have any questions, feel free to reach out to me on the network at <code>~sitful-hatred</code>.</p>
<p>An addendum here; you may have noticed that the connection between my browser and VPS is encrypted, but that the connection between my home PC urbit and VPS is not. I noticed this too, and I don&rsquo;t intend to keep it that way forever. Setting up a self-signed encrypted connection between my home PC and my VPS is on the list of weekend projects, and whenever I get it figured out I will update this post!</p>
<p><em>Edit: The way i eventually addressed this was by running <a href="/posts/caddyserver-urbit-tls/">Caddy</a> on my home PC directly, and pointing the subdomain at my home IP. Caddy makes TLS and reverse proxies significantly simpler than these instructions, check it out!</em></p>
<hr>
<p><em>This post is also available on Urbit, where you can post comments. Join <a href="web+urbitgraph://group/~matwet/networked-subject/">~matwet/networked-subject</a> and open the Networked Subject notebook.</em></p>
]]></content>
		</item>
		
		<item>
			<title>Planetary drive</title>
			<link>https://subject.network/posts/planetary-drive/</link>
			<pubDate>Sun, 30 Aug 2020 14:28:42 -0500</pubDate>
			
			<guid>https://subject.network/posts/planetary-drive/</guid>
			<description>Urbit is a manifestation of the cypherpunk ethos &amp;ndash; your communication is relayed through a decentralized network, with all traffic encrypted all the time. Well, most of the time; it&amp;rsquo;s not encrypted at rest, meaning physical access to your device means full access to its history. There&amp;rsquo;s no technical reason that it must remain this way, though, and I&amp;rsquo;ve decided to run my pier from an encrypted disk.
For about the last year or so, I&amp;rsquo;ve run my urbit planet ~sitful-hatred on a Digital Ocean VPS.</description>
			<content type="html"><![CDATA[<p><a href=""><img src="/img/pavepaws.png" alt=""></a></p>
<p>Urbit is a manifestation of the cypherpunk ethos &ndash; your communication is relayed through a decentralized network, with all traffic encrypted all the time. Well, most of the time; it&rsquo;s not encrypted at rest, meaning physical access to your device means full access to its history. There&rsquo;s no technical reason that it must remain this way, though, and I&rsquo;ve decided to run my pier from an encrypted disk.</p>
<p>For about the last year or so, I&rsquo;ve run my urbit planet <code>~sitful-hatred</code> on a Digital Ocean VPS. However, I decided that I would like to have my planet on a device in my physical possession. I have a sentimental and practical desire to keep my important data secure and at-hand; I also had a spare SSD collecting dust inside my desktop, and this was the first good idea I had for making use of it &ndash; encrypting a bunch of books and music didn&rsquo;t seem as cool.</p>
<p>I think decryption at rest by default is a sane default for something that aspires to be a major platform &ndash; leaving your phone&rsquo;s data on Apple&rsquo;s servers is <a href="https://www.engadget.com/2020-01-21-apple-dropped-plan-for-encrypted-icloud-backups.html">insecure</a>, which gets the feds off their back (to some degree). This can of course be trivially sidestepped, by setting a real passcode to unlock your phone and disabling cloud backups, but nobody does this. Decryption at rest for your ship by default means only the technically-inclined or adventurous of spirit will bother to secure their pier; but it also allows for easier recovery of data if something goes wrong, or a password is forgotten. It probably is best for most people, most of the time.</p>
<p>But encryption is a blanket. Encryption is a moat between you and the world. Encryption is how you take care of what&rsquo;s important and personal.</p>
<p>So, to cut a long introduction short, the following is a tutorial in running your urbit from an encrypted drive or partition on Ubuntu. The steps taken to encrypt the drive are shamelessly pillaged from <a href="https://davidyat.es/2015/04/03/encrypting-a-second-hard-drive-on-ubuntu-14-10-post-install/">here</a> &ndash; total credit to Mr Yates, because worked out the hard part.</p>
<p>One last word of warning: messing with partitions and disk formatting is very easy to screw up! If you don&rsquo;t understand what is happening when you follow these steps, it may be better to skip this one, though you probably won&rsquo;t do anything unrecoverable if you screw up &ndash; just double and triple check that you&rsquo;re performing operations on the correct device.</p>
<hr>
<h3 id="1-clear-the-partitions">1. Clear the partitions</h3>
<p>Before you can encrypt the drive with LUKS, you&rsquo;ll need to delete the partitions on it. Using gparted, select the device you&rsquo;re using in the <code>Gparted-&gt; Devices</code> menu. It will display a graphical representation of the drive, along with any existing partitions. Delete all partitions, create an unformatted partition of the desired size, make a double check that you&rsquo;re doing this to the correct device, and hit apply.</p>
<p>You will not be formatting the drive quite yet. Do not mount it, or interact with the device outside of these instructions until you are finished.</p>
<h3 id="2-setting-up-luks">2. Setting up LUKS</h3>
<p>** Replace <code>sd?X</code> with the name of your device (e.g, <code>/dev/sdc</code>). You can identify the device name in Gparted, or by running <code>lsblk</code>.**</p>
<p>Now we will run <code>cryptsetup</code> to set up the device&rsquo;s encryption:</p>
<div class="window" width="80%">
    <div class="titlebar">
      <div class="buttons">
        <div class="bclose">
        </div>
        <div class="minimize">
        </div>
        <div class="zoom">
        </div>
      </div>
      terminal: ~
    </div>
    <div class="termwin">
      <ul>
        
        
        <li></li>
        
        
        <li>$>&nbsp;sudo&nbsp;cryptsetup&nbsp;-y&nbsp;-v&nbsp;luksFormat&nbsp;/dev/sd?X</li>
        
        
        <li>&nbsp;</li>
        
        
        <li></li>
        
        
        <li></li>
          
      </ul>
    </div>
  </div>

<p>Enter a strong password and write it down. You won&rsquo;t need to remember it so you can go the extra mile with complexity, but at some point in the future you will probably need to recover it.</p>
<p>Next, perform the following operations:</p>
<div class="window" width="80%">
    <div class="titlebar">
      <div class="buttons">
        <div class="bclose">
        </div>
        <div class="minimize">
        </div>
        <div class="zoom">
        </div>
      </div>
      terminal: ~
    </div>
    <div class="termwin">
      <ul>
        
        
        <li></li>
        
        
        <li>$>&nbsp;sudo&nbsp;cryptsetup&nbsp;luksOpen&nbsp;/dev/sd?X&nbsp;sd?X_crypt</li>
        
        
        <li>$>&nbsp;sudo&nbsp;mkfs.ext4&nbsp;/dev/mapper/sd?X_crypt</li>
        
        
        <li>&nbsp;</li>
        
        
        <li></li>
        
        
        <li></li>
          
      </ul>
    </div>
  </div>

<p>This will decrypt the partition, and format it in <a href="https://www.wikiwand.com/en/Ext4">ext4</a>. Now, it&rsquo;s ready to mount:</p>
<div class="window" width="80%">
    <div class="titlebar">
      <div class="buttons">
        <div class="bclose">
        </div>
        <div class="minimize">
        </div>
        <div class="zoom">
        </div>
      </div>
      terminal: ~
    </div>
    <div class="termwin">
      <ul>
        
        
        <li></li>
        
        
        <li>$>&nbsp;sudo&nbsp;mount&nbsp;/dev/mapper/sd?X_crypt&nbsp;/<mount-point></li>
        
        
        <li>&nbsp;</li>
        
        
        <li></li>
        
        
        <li></li>
          
      </ul>
    </div>
  </div>

<p>Your mount point can be arbitrary, but on Ubuntu is usually a directory inside <code>/media/</code> &ndash; mine is <code>/media/Data/</code>. You can interact with your newly formatted drive in this folder.</p>
<h3 id="4-keyfile--auto-mount">4. Keyfile &amp; auto-mount</h3>
<p>A cool trick I didn&rsquo;t know about until reading the previously-linked tutorial is that you can make your machine automatically mount a LUKS drive using a keyfile. In order to do so, we&rsquo;ll generate a file of random noise and add it as a key for the drive:</p>
<div class="window" width="80%">
    <div class="titlebar">
      <div class="buttons">
        <div class="bclose">
        </div>
        <div class="minimize">
        </div>
        <div class="zoom">
        </div>
      </div>
      terminal: ~
    </div>
    <div class="termwin">
      <ul>
        
        
        <li></li>
        
        
        <li>$>&nbsp;sudo&nbsp;dd&nbsp;if=/dev/urandom&nbsp;of=/root/.keyfile&nbsp;bs=1024&nbsp;count=4</li>
        
        
        <li>$>&nbsp;sudo&nbsp;chmod&nbsp;0400&nbsp;/root/.keyfile</li>
        
        
        <li>$>&nbsp;sudo&nbsp;cryptsetup&nbsp;luksAddKey&nbsp;/dev/sd?X&nbsp;/root/.keyfile</li>
        
        
        <li>&nbsp;</li>
        
        
        <li></li>
        
        
        <li></li>
          
      </ul>
    </div>
  </div>

<p>Next we&rsquo;ll need to tell the computer to mount the drive using the keyfile automatically. We&rsquo;ll need the device UUID (a unique identifier for the hardware), which we can find by looking at the output of:</p>
<div class="window" width="80%">
    <div class="titlebar">
      <div class="buttons">
        <div class="bclose">
        </div>
        <div class="minimize">
        </div>
        <div class="zoom">
        </div>
      </div>
      terminal: ~
    </div>
    <div class="termwin">
      <ul>
        
        
        <li></li>
        
        
        <li>$>&nbsp;sudo&nbsp;blkid</li>
        
        
        <li>&nbsp;</li>
        
        
        <li></li>
        
        
        <li></li>
          
      </ul>
    </div>
  </div>

<p>Look for the device you&rsquo;re working with, find where it says <code>UUID=&quot;longstringofnumbersandletters...&quot;</code> and copy the part between quotation marks. Next, use it to edit this command, replacing <code>&lt;device UUID&gt;</code>:</p>
<pre><code>  sd?X_crypt UUID=&lt;device UUID&gt; /root/.keyfile luks,discard
</code></pre><p>Make sure you&rsquo;re looking at the UUID of the device (e.g, <code>/dev/sdc</code>, <strong>not</strong> <code>/dev/sdc_crypt</code> or <code>/dev/sdc1/</code>).</p>
<p>Now we&rsquo;ll add the mount instructions to fstab:</p>
<div class="window" width="80%">
    <div class="titlebar">
      <div class="buttons">
        <div class="bclose">
        </div>
        <div class="minimize">
        </div>
        <div class="zoom">
        </div>
      </div>
      terminal: ~
    </div>
    <div class="termwin">
      <ul>
        
        
        <li></li>
        
        
        <li>$>&nbsp;sudo&nbsp;nano&nbsp;/etc/fstab</li>
        
        
        <li>$>&nbsp;/dev/mapper/sd?X_crypt&nbsp; /<mount-point>&nbsp; &nbsp;ext4&nbsp; &nbsp; defaults&nbsp; &nbsp; &nbsp; &nbsp; 0&nbsp; &nbsp; &nbsp; &nbsp;2</li>
        
        
        <li>&nbsp;</li>
        
        
        <li></li>
        
        
        <li></li>
          
      </ul>
    </div>
  </div>

<p>Be sure to replace <code>/&lt;mount-point&gt;</code> with your preferred mount location (e.g, <code>/media/Data</code>).</p>
<p>Now to make sure that your device has the appropriated permissions, run the following command with your username and mount point replacing the original:</p>
<div class="window" width="80%">
    <div class="titlebar">
      <div class="buttons">
        <div class="bclose">
        </div>
        <div class="minimize">
        </div>
        <div class="zoom">
        </div>
      </div>
      terminal: ~
    </div>
    <div class="termwin">
      <ul>
        
        
        <li></li>
        
        
        <li>$>&nbsp;sudo&nbsp;chown&nbsp;<user>:<user>&nbsp;/<mount-point>&nbsp;-R</li>
        
        
        <li>&nbsp;</li>
        
        
        <li></li>
        
        
        <li></li>
          
      </ul>
    </div>
  </div>

<p>Now restart your device to test whether it successfully mounts on reboot. Voila, a fully encrypted disk you don&rsquo;t have to remember the password for!</p>
<h3 id="6-moving-your-pier">6. Moving your pier</h3>
<p>This is the easy part. I moved my urbit from a remote server, so all I had to do was shutdown the process on the server and rsync the pier folder into my new drive:</p>
<div class="window" width="80%">
    <div class="titlebar">
      <div class="buttons">
        <div class="bclose">
        </div>
        <div class="minimize">
        </div>
        <div class="zoom">
        </div>
      </div>
      terminal: ~
    </div>
    <div class="termwin">
      <ul>
        
        
        <li></li>
        
        
        <li>$>&nbsp;rsync&nbsp;-av&nbsp;reid@subject.network:/~/sitful-hatred&nbsp;/media/Data</li>
        
        
        <li>&nbsp;</li>
        
        
        <li></li>
        
        
        <li></li>
          
      </ul>
    </div>
  </div>

<p>Urbit piers are completely portable; as long as you have the static binaries on another device and it&rsquo;s not trying to run in two places at once, you can simply pick up your data and move it with a copy operation. This is one of the reasons I wanted to devote a disk to my ship &ndash; I can swap it in and out of devices I may go through in the future, but maintain a physical token of my digital homestead. One day we&rsquo;ll all have e-ink mesh-networked urbit devices that run on solar panels and Optane drives, but for now I have my <code>+code</code> and an SSD.</p>
<hr>
<p><em>This post is also available on Urbit, where you can post comments. Join <a href="web+urbitgraph://group/~matwet/networked-subject/">~matwet/networked-subject</a> and open the Networked Subject notebook.</em></p>
]]></content>
		</item>
		
		<item>
			<title>Urbit: An introduction</title>
			<link>https://subject.network/posts/urbit-introduction/</link>
			<pubDate>Tue, 25 Aug 2020 14:38:09 -0500</pubDate>
			
			<guid>https://subject.network/posts/urbit-introduction/</guid>
			<description>Note: this is a copy of a presentation initially posted on my personal blog. I am posting it here in the interest of centralizing Urbit-related content that I produce.
This essay was written to be given as a presentation at the (temporarily suspended) Urbit DFW meetup group. You can watch it on youtube here.
introduction Urbit is a personal server. that is to say, it&amp;rsquo;s a computer acts as an agent on your behalf to talk to other computers on the internet.</description>
			<content type="html"><![CDATA[<p><em>Note: this is a copy of a presentation initially posted on my <a href="https://hyperstition.al/post/Urbit-an-introduction/">personal blog</a>. I am posting it here in the interest of centralizing Urbit-related content that I produce.</em></p>
<p>This essay was written to be given as a presentation at the (temporarily suspended) Urbit DFW meetup group. You can watch it on youtube <a href="https://www.youtube.com/watch?v=RI1TS0PWQAA">here</a>.</p>
<h3 id="introduction">introduction</h3>
<p><a href="/img/slides/slide1.png"><img src="/img/slides/slide1.png" alt=""></a>Urbit is a personal server. that is to say, it&rsquo;s a computer acts as an agent on your behalf to talk to other computers on the internet. Right now, we all use computers that belong to megacorporations and serve their interests; when you log into Facebook and talk to your friend, all the real computation and storage is done on servers that belong to Facebook. In a very real sense, they own your data. It&rsquo;s very difficult to avoid at this point. The goal of Urbit is to address the technical issues that led to this state of affairs, so that everybody can run and control their own software. there are a lot of projects that have tried to address one or two of the many problems that Urbit tries to solve, but I doubt there is any other current project as ambitious or farsighted. Urbit is an open source project primarily developed by a company called <a href="https://tlon.io">Tlon</a>, in San Francisco, and there&rsquo;s another company in Austin also working full-time to develop it, called <a href="https://urbit.live">urbit.live</a>.</p>
<p>Urbit is famously complicated to describe; this is due to a combination of complexity, an opaque naming scheme, and its genuinely novel ideas and clever recombinations of old ones. It can seem like it leaked into our world from an alternate timeline. Thinking about Urbit requires you to modify a lot of conceptual models that you&rsquo;re used to using to think about computers and the internet. I&rsquo;m not any kind of expert on any on these subjects but i&rsquo;ve spent a decent amount of time trying to digest the technical parts of Urbit, and my goal here is to convey that understanding to you, and connect the technical decisions and constraints to the problems being solved. This presentation is aimed at someone who has heard of Urbit but doesn&rsquo;t quite get it yet. So, to begin, here is a list of questions:</p>
<p>What if your computer was deterministic &ndash; a minimal, strictly defined mathematical function that given an event sequence, always ended up in the same state? How would it be different from the computers we&rsquo;re used to, and what advantages might it have? What would a network of these computers look like? What if that computation was standardized, so that an app I write today runs on another arbitrary computer in ten years, or the computer I&rsquo;m using now still works when I pass it down to my kids?</p>
<p>Why can&rsquo;t I take my social graph with me when I leave Facebook? Why isn&rsquo;t facebook just a protocol? Why has the internet transformed from a peer-to-peer assemblage into a surveillance panopticon? Why are we doing all our computation on some corporation&rsquo;s mainframe as if it&rsquo;s the 70&rsquo;s, while they build dossiers on us? What happened to the dream of using networked computers to liberate individuals?</p>
<p>How do you grow social software to internet-scale without running into the obstacles produced by the conflicting values of different communities? How do we preserve the freedoms of association and speech while still allowing for the enforcement of values within groups? How do you disincentivize spam and bad actors in an open system?</p>
<p>As you may guess, some of the goals of Urbit are to answer these questions and challenges in an elegant way. I will give you a cursory overview of the system and then talk more about the ideas it exists to implement.</p>
<p><a href="/img/slides/slide2.png"><img src="/img/slides/slide2.png" alt=""></a></p>
<h3 id="the-stack">the stack</h3>
<p>These problems are very difficult to address within the constraints of the current internet, but Urbit is an entire networked computing stack from scratch. The core thesis of Urbit is that all of these are technically solvable problems if you approach them at the right scale. I&rsquo;ll try working from the bottom up here and give a cursory overview without getting too bogged down in details. I apologize if this is a little dense, but bear with me and it should cohere. The second half of this is less technical.</p>
<p><a href="/img/slides/slide3.png"><img src="/img/slides/slide3.png" alt=""></a></p>
<p>Nock is a turing-complete function. You can think of it as the functional assembly code that underpins the entire Urbit stack. Its formal spec is typically described as &ldquo;small enough to fit on a t-shirt&rdquo;, and it has 12 opcodes, or basic instructions. This is a couple of orders of magnitude smaller than the x86_64 instruction set that your pc uses. Nock is pared down to the minimum elements of what might make up a useful computer; for instance, it defines a single recursive datatype, a binary tree of integers; and its only arithmetic operator is increment.</p>
<p>But a combinator whose only arithmetic operator is increment sounds unusable as a computer; How do you subtract, for instance?</p>
<p>As you may know, if your computer can increment, you can derive all of the rest of the math you&rsquo;d like out of that operation &ndash; for instance decrementing x by incrementing up to x-1. This is extremely inefficient, but Urbit has a cool hack for this: the standard library has all the operations you would expect implemented as &ldquo;jets&rdquo;, written in optimized c, which manipulate values in a formally equivalent manner to a specification written in Nock. That is to say, if you ran an incredibly slow version of your urbit without jets that did all its math the hard way but otherwise had the same inputs, its state would end up identical to the jetted version.</p>
<p><a href="/img/slides/slide4.png"><img src="/img/slides/slide4.png" alt=""></a></p>
<p>Nock is virtualized with an interpreter programmed in C called Vere. Vere sits between your urbit and your computer, handing over keyboard and packet inputs to your urbit, and outputs back to your Unix computer to be displayed in its terminal or sent off through its network interface. Right now Urbit runs as a Unix process, but one can imagine Urbit on hardware meant to run Nock and jets directly. For now, Vere is what runs your urbit on your Macbook, VPS, or WSL.</p>
<p><a href="/img/slides/slide5.png"><img src="/img/slides/slide5.png" alt=""></a></p>
<p>Hoon is the system programming language for the Urbit operating system, Arvo. Hoon is a strongly-typed, functional higher-level language that compiles to Nock; it&rsquo;s effectively a collection of Nock macros. Expressions are denoted with &lsquo;runes&rsquo;, which are digraphs of ASCII special characters. Hoon code is made up of these expressions and as a result can be kind of scary to look at, but I promise it&rsquo;s not as hard to use as you may think!</p>
<p><a href="/img/slides/slide6.png"><img src="/img/slides/slide6.png" alt=""></a></p>
<p>Arvo is the Urbit operating system. It has a minimal kernel, around 1000 lines of code, plus some kernel modules, called vanes. Arvo&rsquo;s vanes handle the networking, apps, a web server, a version-controlled file system, etc. Your urbit instance&rsquo;s Arvo begins with a blank slate, then processes any events (packets and keystrokes), writes them to a log, and outputs its effects, producing new events and its new state. If you play back this log, your urbit will end up in an identical state.</p>
<p>Urbit is deterministic. Your urbit&rsquo;s state is one giant binary tree that is modified by an event log. Nock takes your state and some new event, applies the event to the state, and outputs a new state and a list of effects. Arvo orchestrates events between vanes.</p>
<p><a href="/img/slides/slide7.png"><img src="/img/slides/slide7.png" alt=""></a></p>
<p>The Urbit network protocol &amp; kernel module is called ames. Ames is peer-to-peer and encrypted, and runs over UDP. It has a global immutable namespace; an instance&rsquo;s name is permanent, and is both an identity and routing address.</p>
<p>Urbit&rsquo;s address space is 128-bit, just like IPv6. the total number of addresses (or &lsquo;ships&rsquo;) is effectively unlimited. However, Urbit&rsquo;s address space is also partitioned into classes with different privileges. 8-bit address ships are called galaxies, which are core infrastructure nodes that sign software updates. Underneath galaxies are stars, 16-bit address ships that act as routing infrastructure. Beneath stars are planets, which are ships meant for individual humans. Planet addresses are 32-bit like IPv4, so there&rsquo;s about 4.2 billion of them. Galaxies issue stars, and stars issue planets.</p>
<p>Urbit uses a base-256 phonemic scheme for pronouncible numbers called @p. Galaxies have single-syllable names like <code>~zod</code>; stars are two-syllable, like <code>~marzod</code>. Planets have two two-syllable names, like <code>~dalsum-simreg</code>. This is your identity &ndash; think of it as a combination IP &amp; email address. the words are human-memorable and sound like cool sci-fi names.</p>
<p><a href="/img/slides/slide8.png"><img src="/img/slides/slide8.png" alt=""></a></p>
<p>How do you own these names? Urbit&rsquo;s public key infrastructure is a set of Ethereum contracts collectively called Azimuth. Azimuth acts as an ownership registry for ships and consensus mechanism for network governance. If you receive a ship, your proof of ownership is an ERC-721 token, which is an Ethereum standard for non-fungible tokens. You own this token like you own Bitcoin; as long as you have the master password, it belongs to you forever.</p>
<p>Azimuth technically exists outside of Urbit as a general-purpose PKI; Urbit just uses it as a source of truth. If you dislike Ethereum for political or technical reasons, keep in mind that it&rsquo;s not a permanent intrinsic part of how Urbit works, it&rsquo;s just the current scheme &ndash; though in my opinion it&rsquo;s a pretty elegant solution.</p>
<h3 id="philosophy">philosophy</h3>
<p>Urbit has very strong opinions, and some design decisions that might not make immediate sense. This is a system meant to replace the internet we&rsquo;ve spent half a century building; it needs some really compelling wins to be serious.</p>
<p>For instance, why make a computer with such a minimal core? So you can freeze it and standardize it.</p>
<p><a href="/img/slides/slide9.png"><img src="/img/slides/slide9.png" alt=""></a></p>
<p>A basic idea underlying the design of Urbit is that many of the problems we have today with the way networked computers work is that the technologies composing them accrued in layers atop each other in ways that produce unforeseen conflicts. We have a million identity systems because each layer reinvents everything in the layers below it in mutually inoperable ways. A universal identity system, a secure peer to peer networking stack transparent to the software using it, and key management and cryptocurrency management baked into the core allows developers to offload those problems onto the operating system without worrying about re-implementing them at the app level and fretting over security, dependencies, translating data between layers, etc. These features are basic traits of the platform, available to all software on the system to use.</p>
<p>Urbit approaches the problem of cascading system complexity by introducing a hard brake on the core components, called kelvin versioning. Instead of incrementing version numbers, the versions of Nock and Hoon count down to absolute zero, at which point they can never be changed again. Nock is at 4k at the moment, pretty close to its final state, and Hoon is around 150. This is meant to ensure future interoperability and compatibility, one of the most technically ambitious parts of Urbit. this is a system designed so that your kids can execute code you write today on their future computers, or even boot up your entire ship after an arbitrary amount of time offline or on different hardware. Nock&rsquo;s frozen status means everything above it can be upgraded on the fly, including live upgrades of the kernel, and ensures architectural compatibility forever. I should also mention that Urbit&rsquo;s codebase is much, much more compact than the computers you use every day; the whole stack is somewhere in the neighborhood of 50k lines of code. The Linux kernel alone is somewhere around 12 million.</p>
<p>Standardization also allows for commoditization. Any computer that can run an Urbit can run any other Urbit and all its software. The platform is an open standard, which allows commodity providers to compete over performance without users being locked in or out by proprietary changes or interoperability problems. In practice, this will look something like Urbit hosts running your instance on their hardware for a fee, but you being able to download your instance and all your data to run on another provider, or even your personal computer if you decide to do so. It can also look like hardware implementations of Nock, and Urbit-native computers manufactured by anybody who wants to, like PC clones.</p>
<p><a href="/img/slides/slide10.png"><img src="/img/slides/slide10.png" alt=""></a></p>
<p>As you&rsquo;re probably aware, the internet of today is built on top of the client-server model. You want to connect to other computers, but you don&rsquo;t or can&rsquo;t leave your computer on all the time, so you offload that duty onto a dedicated server run by somebody else. This model grew out of the timesharing mainframes of yesteryear, and it has served us well, but the limitations have become clear; he who runs the server, owns the data. Google runs some excellent email servers and Facebook is fabulous at showing you pictures of people you&rsquo;ve dated, but it&rsquo;s 2020 and I don&rsquo;t want to be spied on anymore; why don&rsquo;t we just run this stuff ourselves? First, it&rsquo;s hard, and second, network effects.</p>
<p>Running a personal server today is technically possible. You can rent a VPS, set up and maintain an email server, throw a Mastodon instance on it, connect a bunch of chat services, etc, but it sucks and is a huge pain to maintain and troubleshoot. Worse, you have to be significantly more technically inclined than average to get that far. There is a reason almost nobody does this. Unix is industrial machinery; Urbit is meant for individuals. Your urbit is intended to be manageable like an iPhone, through a simple user interface that allows you to configure the software on it without having to touch the command line (though it&rsquo;s there if you prefer). Unlike an iPhone, it is open source and extensible, and will likely develop an ecosystem of competing interfaces. Today, the interface is called Landscape, a minimal and attractive web UI that you control via your browser.</p>
<p>Network effects on the other hand are a tricky thing to overcome; why should we be confident that Urbit will be preferable to facebook? Why would anybody use a hypothetical Twitter-like service on Urbit instead of actually-existing Twitter, or an alternative like Mastodon? Because, these things are not mutually exclusive. Urbit is a computer, not just a social network. Existing networks and services have API&rsquo;s that allow you to access them via third party clients. Urbit is a general purpose computer that you can straightforwardly program to scrape, display, and store data. Why not program your urbit to scrape your all your feeds and messages in one place?</p>
<p>Because Urbit is an entire computing platform, every piece of functional utility added to it by software increases the network effect of Urbit; once enough people are using Urbit for whatever disparate purposes they desire, be it running a Bitcoin-trading bot or collated Twitter feeds, they will all find themselves on a decentralized network with a universal identity system and basic messaging utilities. When you and your friends get hooked into some Urbit functionality or another, the external megacorp services are redundant &ndash; so why bother?</p>
<p>Urbit&rsquo;s model is everyone running their own server. A hypothetical Reddit or Usenet-like service on Urbit is an app you install, that communicates with your friends&rsquo; Urbits, which are also running the app. Existing social platforms can be conceived of as a relatively simple set of rules for displaying content, comments and messages; the hard part is getting everyone in one place, which Urbit&rsquo;s identity and network layers provide for anything built on top of it. It&rsquo;s exciting to imagine the possibilities for rapid experimentation that it makes possible.</p>
<p><a href="/img/slides/slide11.png"><img src="/img/slides/slide11.png" alt=""></a></p>
<p>Urbit presents itself as a critique of the internet as it works today; this isn&rsquo;t purely on technical grounds, but also a vision of a more pro-social internet. The legacy internet was taken over quite quickly by spammers and hackers. It was designed originally to trust anyone by default. If a person sends you mean emails or a remote code exploit, there&rsquo;s little you can do in response &ndash; IP addresses  change and email accounts are free and unlimited. Urbit&rsquo;s solution to this is in its finite address space.</p>
<p>I mentioned earlier that there are 4.2 billion planets, or addresses meant for humans. Your proof of ownership of your address is a cryptographic token. Right now these sell for about $20, though the price is ultimately determined by the market. However, the fact that they cost money is one half of the solution. The other half is that infrastructure nodes can blacklist bad actors. If it costs ten or twenty dollars to get an Urbit identity, and you start spamming or abusing people, people may ask the operators of the routing nodes above you to stop routing your traffic. The cost of a planet is ideally cheap enough to not be a burden, but expensive enough that you can&rsquo;t make up the cost from spamming or be worth burning because you&rsquo;re angry at someone.</p>
<p>One can also imagine reputation systems, where people individually set rules to automatically block crowdsourced lists of known bad actors. I should note that this system is theoretical at the moment; Urbit is designed to make this kind of thing easy to do, but right now it&rsquo;s small enough that everybody is nice to each other.</p>
<p><a href="/img/slides/slide12.png"><img src="/img/slides/slide12.png" alt=""></a></p>
<p>To briefly recap the design of the network, at the top of the routing hierarchy are galaxies, which sign software updates for all the ships below them and issue stars. The star is expected to perform peer discovery and NAT traversal for the planets beneath it. Stars can issue planets, which are meant for people. The connections your server makes with your friend&rsquo;s are directly peer-to-peer where possible, and mediated by a star when it isn&rsquo;t.</p>
<p>An important qualification to understand here is that all traffic on Urbit&rsquo;s network is encrypted. Your host star tells you where to send the packets or gets them through the firewall for you, but nobody but the recipient can read them.</p>
<p>A simple illustration to understand routing: you buy a planet from a star. After your planet is up and running, you want to talk to your friend&rsquo;s planet. Your planet asks your star for its IP address. Your star asks its galaxy, which asks your friend&rsquo;s galaxy, which asks you friends star, and the answer comes back to you the same way. Now that you have his IP address, you send your encrypted packets back and forth directly. [<em>note: I&rsquo;m not sure if this is a very precise description but my understanding is that it&rsquo;s something like this</em>]</p>
<p>The star or galaxy above you is called your sponsor. I described how stars could block abusive Urbits from reaching other ships, but that runs both ways. If your star is unfair or malicious, or you just don&rsquo;t like the guy running it, your planet can &lsquo;escape&rsquo; to another star if it will have you. Stars provide services to planets and in the long run will probably be mostly operated as businesses, and it&rsquo;s a good idea to keep your customers happy.</p>
<p>This is a system of voluntary relations; your star has to like you enough to route your traffic, and you have to like him enough to trust his services and potentially pay him. This creates pressure on both sides to maintain good behavior, and gives a release valve for irreconcilable differences. The sponsor relationship also applies between stars and galaxies. In the long run, this also allows the network to fragment gracefully if it needs to.</p>
<p><a href="/img/slides/slide13.png"><img src="/img/slides/slide13.png" alt=""></a></p>
<p>One of the major development milestones coming up in 2020 is the integration of native Bitcoin and Ethereum support into the Urbit kernel. This is basic wallet support and API calls for full nodes, but big things have small beginnings. What new possibilities are opened up by having secure digital identities and simple system calls for trustless money? Here&rsquo;s an easy example. Write a program that watches for Bitcoin transactions to a wallet you designate, grants access permissions to media in your filesystem for the Urbit ID&rsquo;s associated with the senders, then sends them a message. You now have a decentralized patreon.</p>
<p><a href="/img/slides/slide14.png"><img src="/img/slides/slide14.png" alt=""></a></p>
<p>This is a bit of a personal angle, but I am very attached to the aesthetics and design that Tlon has brought to bear on this project. An example is the sigil system. in the same way that @p converts routing addresses into pronounceable names, sigils convert Urbit names into visual symbols you can recognize. They look kind of alien and mysterious. My girlfriend gave me a painting of mine that I put above my computer.</p>
<p><a href="/img/slides/slide15.png"><img src="/img/slides/slide15.png" alt=""></a></p>
<p>All of this aims at a terminal goal of taking away the necessity of having other people&rsquo;s servers between you and your friends &amp; family. When Urbit conquers the world, your digital life will be fully contained on a device you control, running on an open standard computing model. All your traffic will be private and encrypted, and all traffic meant for you will be addressed to you, personally. You will easily experiment with new social platforms with your friends, which will simply be protocol exchanges between your devices and theirs, and you won&rsquo;t be beholden to or spied on by the Googles of the world. Conflicts will be mediated within the groups you belong to instead of from above. Your home IoT devices will run child ships issued by your planet and be entirely under your control. You will be able to run the device orchestrating your social and financial data online in a high-assurance data center or your home PC. More than anything, your computer and data will belong to you in a way that it simply cannot in today&rsquo;s world.</p>
<p>There&rsquo;s a good deal I&rsquo;ve skipped over and a few things I&rsquo;ve undoubtedly gotten a little wrong in this already long presentation, but I hope you find this as exciting as I do.</p>
<h3 id="getting-involved">getting involved</h3>
<p>Urbit is young but moving fast. There&rsquo;s plenty to dip your feet into if you find this stuff exciting.</p>
<p><strong>boot a comet</strong></p>
<blockquote>
<p>You can jump into Urbit without buying a ship. A &lsquo;self-signed&rsquo; instance that isn&rsquo;t issued by a star or galaxy is called a <a href="https://urbit.org/using/install/#booting-a-comet">comet</a>, and you can spin one up for free. Comets can do almost everything a planet can, at least for now.</p>
</blockquote>
<p><strong>read the docs</strong></p>
<blockquote>
<p>Urbit&rsquo;s <a href="https://Urbit.org/docs/">documentation</a> is significantly more clear and robust today than when I first tried learning about it. There&rsquo;s a huge amount of stuff to read on the website, and you could do worse than looking through the <a href="https://Urbit.org/docs/glossary/">glossary</a>; one of the hurdles to learning about this is that it has a good deal of jargon. There&rsquo;s a <a href="https://Urbit.org/blog/">blog</a> that&rsquo;s had some really excellent posts about design decisions and constraints of various parts of the stack posted recently. There&rsquo;s also a <a href="https://media.Urbit.org/whitepaper.pdf">whitepaper</a> from a few years ago if you like reading those.</p>
</blockquote>
<p><strong>hang out in u-h</strong></p>
<blockquote>
<p>The de facto community hangout spot is on <code>~dopzod/Urbit-help</code>. it&rsquo;s meant for technical discussion of Urbit, and it&rsquo;s a great place to ask questions, but it&rsquo;s also a pretty typical friendly chat room. [<em>note: as of late 2020, the defacto group is <code>~bitbet-bolbel/urbit-community</code> or <code>~dopzod/urbit-community</code></em>]</p>
</blockquote>
<p><strong>hoon school</strong></p>
<blockquote>
<p>Learning to program with Hoon is the single best thing you can do to understand how things work under the hood if you&rsquo;re technically inclined. You can do this yourself by reading documentation and asking questions in u-h, but if you&rsquo;re like me you may benefit from structure. Tlon organizes informal beginner and an advanced Hoon school sessions. You can <a href="https://Urbit.org/community/Hoonschool/">sign up</a> for the waitlist on the website. [<em>note: <a href="https://hooniversity.org/">hooniversity</a> is the new, free, community-run Hoon education course</em>]</p>
</blockquote>
<blockquote>
<p>Hoon is pretty weird, especially if you don&rsquo;t have any experience with functional programming. Don&rsquo;t let me saying that discourage you though &ndash; I completed the 101 course with almost no programming experience. I won&rsquo;t pretend it was a piece of cake, but it probably took 5-10 hours a week for me.</p>
</blockquote>
<p><strong>meetups</strong></p>
<blockquote>
<p>There are <a href="https://Urbit.org/community/meetups/">meetup groups</a> all over the world. If you&rsquo;re interested in helping me organize and promote the DFW meetup, feel free to talk to me about it.</p>
</blockquote>
<p><strong>grants</strong></p>
<blockquote>
<p>Tlon is <a href="https://grants.Urbit.org/">incentivizing</a> the community development of Urbit by granting address space in exchange for features. For instance, different components of Bitcoin support are being contributed in exchange for grants of stars. This meetup is also part of the grant program. It&rsquo;s worth taking a look!</p>
</blockquote>
<p>Feel free to message me on the network at <code>~sitful-hatred</code>. See you on Mars.</p>
<hr>
<p><em>This post is also available on Urbit, where you can post comments. Join <a href="web+urbitgraph://group/~matwet/networked-subject/">~matwet/networked-subject</a> and open the Networked Subject notebook.</em></p>
]]></content>
		</item>
		
		<item>
			<title>Thekla</title>
			<link>https://subject.network/posts/thekla/</link>
			<pubDate>Sat, 11 Jul 2020 15:04:31 -0500</pubDate>
			
			<guid>https://subject.network/posts/thekla/</guid>
			<description>Those who arrive at Thekla can see little of the city, beyond the plank fences, the sackcloth screens, the scaffoldings, the metal armatures, the wooden catwalks hanging from ropes or supported by sawhorses, the ladders, the trestles. If you ask &amp;ldquo;Why is Thekla&amp;rsquo;s construction taking such a long time?&amp;rdquo; the inhabitants continue hoisting sacks, lowering leaded strings, moving long brushes up and down, as they answer &amp;ldquo;So that it&amp;rsquo;s destruction cannot begin.</description>
			<content type="html"><![CDATA[<p><a href=""><img src="/img/starchart.jpg" alt=""></a></p>
<blockquote>
<p>Those who arrive at Thekla can see little of the city, beyond the plank fences, the sackcloth screens, the scaffoldings, the metal armatures, the wooden catwalks hanging from ropes or supported by sawhorses, the ladders, the trestles. If you ask &ldquo;Why is Thekla&rsquo;s construction taking such a long time?&rdquo; the inhabitants continue hoisting sacks, lowering leaded strings, moving long brushes up and down, as they answer &ldquo;So that it&rsquo;s destruction cannot begin.&rdquo; And if asked whether they fear that, once the scaffoldings are removed, the city may begin to crumble and fall to pieces, they add hastily, in a whisper, &ldquo;Not only the city.&rdquo;</p>
</blockquote>
<blockquote>
<p>If, dissatisfied with the answers, someone puts his eye to a crack in a fence, he sees cranes pulling up other cranes, scaffoldings that embrace other scaffoldings, beams that prop up other beams. &ldquo;What meaning does your construction have?&rdquo; he asks. &ldquo;What is the aim of a city under construction unless it is a city? Where is the plan you are following, the blueprint?&rdquo;</p>
</blockquote>
<blockquote>
<p>&ldquo;We will show it to you as soon as the working day is over; we cannot interrupt our work now,&rdquo; they answer.
Work stops at sunset. Darkness falls over the building site. The sky is filled with stars. &ldquo;There is the blueprint,&rdquo; they say.</p>
</blockquote>
<p>Cities and the Sky 3</p>
<p><em>Invisible Cities</em></p>
<p>Italo Calvino</p>
<hr>
<p><em>This post is also available on Urbit, where you can post comments. Join <a href="web+urbitgraph://group/~matwet/networked-subject/">~matwet/networked-subject</a> and open the Networked Subject notebook.</em></p>
]]></content>
		</item>
		
	</channel>
</rss>
